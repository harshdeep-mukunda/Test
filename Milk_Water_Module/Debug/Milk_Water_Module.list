
Milk_Water_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee0  08006ee0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08006ee0  08006ee0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ee0  08006ee0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  2000008c  08006f74  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08006f74  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148e1  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025ae  00000000  00000000  00034995  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e28  00000000  00000000  00036f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d40  00000000  00000000  00037d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ff65  00000000  00000000  00038ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cda5  00000000  00000000  00048a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005460a  00000000  00000000  000557ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a9dc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033fc  00000000  00000000  000a9e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006dbc 	.word	0x08006dbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08006dbc 	.word	0x08006dbc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb6d 	bl	8000908 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 faef 	bl	800081c <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb5f 	bl	8000908 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb55 	bl	8000908 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fafd 	bl	800086c <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 faf3 	bl	800086c <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	; 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fd43 	bl	8000d30 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	; 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fb79 	bl	80009a8 <__aeabi_fsub>
 80002b6:	f000 fd3b 	bl	8000d30 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fadd>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	4647      	mov	r7, r8
 80002c8:	46ce      	mov	lr, r9
 80002ca:	0243      	lsls	r3, r0, #9
 80002cc:	0a5b      	lsrs	r3, r3, #9
 80002ce:	0044      	lsls	r4, r0, #1
 80002d0:	0fc2      	lsrs	r2, r0, #31
 80002d2:	469c      	mov	ip, r3
 80002d4:	0048      	lsls	r0, r1, #1
 80002d6:	00dd      	lsls	r5, r3, #3
 80002d8:	024b      	lsls	r3, r1, #9
 80002da:	0e24      	lsrs	r4, r4, #24
 80002dc:	0a5b      	lsrs	r3, r3, #9
 80002de:	0e00      	lsrs	r0, r0, #24
 80002e0:	b580      	push	{r7, lr}
 80002e2:	4698      	mov	r8, r3
 80002e4:	0026      	movs	r6, r4
 80002e6:	4691      	mov	r9, r2
 80002e8:	0fc9      	lsrs	r1, r1, #31
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	1a27      	subs	r7, r4, r0
 80002ee:	428a      	cmp	r2, r1
 80002f0:	d029      	beq.n	8000346 <__aeabi_fadd+0x82>
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	dd15      	ble.n	8000322 <__aeabi_fadd+0x5e>
 80002f6:	2800      	cmp	r0, #0
 80002f8:	d14a      	bne.n	8000390 <__aeabi_fadd+0xcc>
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d000      	beq.n	8000300 <__aeabi_fadd+0x3c>
 80002fe:	e095      	b.n	800042c <__aeabi_fadd+0x168>
 8000300:	08ed      	lsrs	r5, r5, #3
 8000302:	2cff      	cmp	r4, #255	; 0xff
 8000304:	d100      	bne.n	8000308 <__aeabi_fadd+0x44>
 8000306:	e088      	b.n	800041a <__aeabi_fadd+0x156>
 8000308:	026b      	lsls	r3, r5, #9
 800030a:	0a5b      	lsrs	r3, r3, #9
 800030c:	b2e6      	uxtb	r6, r4
 800030e:	025b      	lsls	r3, r3, #9
 8000310:	05f6      	lsls	r6, r6, #23
 8000312:	0a58      	lsrs	r0, r3, #9
 8000314:	4330      	orrs	r0, r6
 8000316:	07d2      	lsls	r2, r2, #31
 8000318:	4310      	orrs	r0, r2
 800031a:	bc0c      	pop	{r2, r3}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000322:	2f00      	cmp	r7, #0
 8000324:	d000      	beq.n	8000328 <__aeabi_fadd+0x64>
 8000326:	e087      	b.n	8000438 <__aeabi_fadd+0x174>
 8000328:	1c60      	adds	r0, r4, #1
 800032a:	b2c0      	uxtb	r0, r0
 800032c:	2801      	cmp	r0, #1
 800032e:	dc00      	bgt.n	8000332 <__aeabi_fadd+0x6e>
 8000330:	e0b6      	b.n	80004a0 <__aeabi_fadd+0x1dc>
 8000332:	1aee      	subs	r6, r5, r3
 8000334:	0172      	lsls	r2, r6, #5
 8000336:	d500      	bpl.n	800033a <__aeabi_fadd+0x76>
 8000338:	e0c5      	b.n	80004c6 <__aeabi_fadd+0x202>
 800033a:	2e00      	cmp	r6, #0
 800033c:	d13d      	bne.n	80003ba <__aeabi_fadd+0xf6>
 800033e:	2200      	movs	r2, #0
 8000340:	2600      	movs	r6, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e7e3      	b.n	800030e <__aeabi_fadd+0x4a>
 8000346:	2f00      	cmp	r7, #0
 8000348:	dc00      	bgt.n	800034c <__aeabi_fadd+0x88>
 800034a:	e096      	b.n	800047a <__aeabi_fadd+0x1b6>
 800034c:	2800      	cmp	r0, #0
 800034e:	d05d      	beq.n	800040c <__aeabi_fadd+0x148>
 8000350:	2cff      	cmp	r4, #255	; 0xff
 8000352:	d060      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	04d2      	lsls	r2, r2, #19
 8000358:	4313      	orrs	r3, r2
 800035a:	2f1b      	cmp	r7, #27
 800035c:	dd00      	ble.n	8000360 <__aeabi_fadd+0x9c>
 800035e:	e0ec      	b.n	800053a <__aeabi_fadd+0x276>
 8000360:	2220      	movs	r2, #32
 8000362:	1bd2      	subs	r2, r2, r7
 8000364:	0018      	movs	r0, r3
 8000366:	4093      	lsls	r3, r2
 8000368:	40f8      	lsrs	r0, r7
 800036a:	1e5a      	subs	r2, r3, #1
 800036c:	4193      	sbcs	r3, r2
 800036e:	4303      	orrs	r3, r0
 8000370:	18ed      	adds	r5, r5, r3
 8000372:	016b      	lsls	r3, r5, #5
 8000374:	d57b      	bpl.n	800046e <__aeabi_fadd+0x1aa>
 8000376:	3401      	adds	r4, #1
 8000378:	2cff      	cmp	r4, #255	; 0xff
 800037a:	d100      	bne.n	800037e <__aeabi_fadd+0xba>
 800037c:	e0b7      	b.n	80004ee <__aeabi_fadd+0x22a>
 800037e:	2201      	movs	r2, #1
 8000380:	2607      	movs	r6, #7
 8000382:	402a      	ands	r2, r5
 8000384:	086b      	lsrs	r3, r5, #1
 8000386:	4d9a      	ldr	r5, [pc, #616]	; (80005f0 <__aeabi_fadd+0x32c>)
 8000388:	401d      	ands	r5, r3
 800038a:	4315      	orrs	r5, r2
 800038c:	402e      	ands	r6, r5
 800038e:	e029      	b.n	80003e4 <__aeabi_fadd+0x120>
 8000390:	2cff      	cmp	r4, #255	; 0xff
 8000392:	d0b5      	beq.n	8000300 <__aeabi_fadd+0x3c>
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	04d2      	lsls	r2, r2, #19
 8000398:	4313      	orrs	r3, r2
 800039a:	2f1b      	cmp	r7, #27
 800039c:	dd00      	ble.n	80003a0 <__aeabi_fadd+0xdc>
 800039e:	e0b2      	b.n	8000506 <__aeabi_fadd+0x242>
 80003a0:	2220      	movs	r2, #32
 80003a2:	1bd2      	subs	r2, r2, r7
 80003a4:	0019      	movs	r1, r3
 80003a6:	4093      	lsls	r3, r2
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	1e5a      	subs	r2, r3, #1
 80003ac:	4193      	sbcs	r3, r2
 80003ae:	430b      	orrs	r3, r1
 80003b0:	1aed      	subs	r5, r5, r3
 80003b2:	016b      	lsls	r3, r5, #5
 80003b4:	d55b      	bpl.n	800046e <__aeabi_fadd+0x1aa>
 80003b6:	01ad      	lsls	r5, r5, #6
 80003b8:	09ae      	lsrs	r6, r5, #6
 80003ba:	0030      	movs	r0, r6
 80003bc:	f000 fd62 	bl	8000e84 <__clzsi2>
 80003c0:	3805      	subs	r0, #5
 80003c2:	4086      	lsls	r6, r0
 80003c4:	4284      	cmp	r4, r0
 80003c6:	dc65      	bgt.n	8000494 <__aeabi_fadd+0x1d0>
 80003c8:	1b04      	subs	r4, r0, r4
 80003ca:	0033      	movs	r3, r6
 80003cc:	2020      	movs	r0, #32
 80003ce:	3401      	adds	r4, #1
 80003d0:	40e3      	lsrs	r3, r4
 80003d2:	1b04      	subs	r4, r0, r4
 80003d4:	40a6      	lsls	r6, r4
 80003d6:	1e75      	subs	r5, r6, #1
 80003d8:	41ae      	sbcs	r6, r5
 80003da:	4333      	orrs	r3, r6
 80003dc:	2607      	movs	r6, #7
 80003de:	001d      	movs	r5, r3
 80003e0:	2400      	movs	r4, #0
 80003e2:	401e      	ands	r6, r3
 80003e4:	2201      	movs	r2, #1
 80003e6:	464b      	mov	r3, r9
 80003e8:	401a      	ands	r2, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d004      	beq.n	80003f8 <__aeabi_fadd+0x134>
 80003ee:	230f      	movs	r3, #15
 80003f0:	402b      	ands	r3, r5
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d000      	beq.n	80003f8 <__aeabi_fadd+0x134>
 80003f6:	3504      	adds	r5, #4
 80003f8:	016b      	lsls	r3, r5, #5
 80003fa:	d400      	bmi.n	80003fe <__aeabi_fadd+0x13a>
 80003fc:	e780      	b.n	8000300 <__aeabi_fadd+0x3c>
 80003fe:	3401      	adds	r4, #1
 8000400:	b2e6      	uxtb	r6, r4
 8000402:	2cff      	cmp	r4, #255	; 0xff
 8000404:	d12f      	bne.n	8000466 <__aeabi_fadd+0x1a2>
 8000406:	26ff      	movs	r6, #255	; 0xff
 8000408:	2300      	movs	r3, #0
 800040a:	e780      	b.n	800030e <__aeabi_fadd+0x4a>
 800040c:	2b00      	cmp	r3, #0
 800040e:	d152      	bne.n	80004b6 <__aeabi_fadd+0x1f2>
 8000410:	2cff      	cmp	r4, #255	; 0xff
 8000412:	d000      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000414:	e774      	b.n	8000300 <__aeabi_fadd+0x3c>
 8000416:	000a      	movs	r2, r1
 8000418:	08ed      	lsrs	r5, r5, #3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0f3      	beq.n	8000406 <__aeabi_fadd+0x142>
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	432b      	orrs	r3, r5
 8000424:	025b      	lsls	r3, r3, #9
 8000426:	0a5b      	lsrs	r3, r3, #9
 8000428:	26ff      	movs	r6, #255	; 0xff
 800042a:	e770      	b.n	800030e <__aeabi_fadd+0x4a>
 800042c:	3f01      	subs	r7, #1
 800042e:	2f00      	cmp	r7, #0
 8000430:	d0be      	beq.n	80003b0 <__aeabi_fadd+0xec>
 8000432:	2cff      	cmp	r4, #255	; 0xff
 8000434:	d1b1      	bne.n	800039a <__aeabi_fadd+0xd6>
 8000436:	e763      	b.n	8000300 <__aeabi_fadd+0x3c>
 8000438:	2c00      	cmp	r4, #0
 800043a:	d047      	beq.n	80004cc <__aeabi_fadd+0x208>
 800043c:	28ff      	cmp	r0, #255	; 0xff
 800043e:	d069      	beq.n	8000514 <__aeabi_fadd+0x250>
 8000440:	2480      	movs	r4, #128	; 0x80
 8000442:	04e4      	lsls	r4, r4, #19
 8000444:	427a      	negs	r2, r7
 8000446:	4325      	orrs	r5, r4
 8000448:	2a1b      	cmp	r2, #27
 800044a:	dd00      	ble.n	800044e <__aeabi_fadd+0x18a>
 800044c:	e0c5      	b.n	80005da <__aeabi_fadd+0x316>
 800044e:	002c      	movs	r4, r5
 8000450:	2620      	movs	r6, #32
 8000452:	40d4      	lsrs	r4, r2
 8000454:	1ab2      	subs	r2, r6, r2
 8000456:	4095      	lsls	r5, r2
 8000458:	1e6a      	subs	r2, r5, #1
 800045a:	4195      	sbcs	r5, r2
 800045c:	4325      	orrs	r5, r4
 800045e:	1b5d      	subs	r5, r3, r5
 8000460:	0004      	movs	r4, r0
 8000462:	4689      	mov	r9, r1
 8000464:	e7a5      	b.n	80003b2 <__aeabi_fadd+0xee>
 8000466:	01ab      	lsls	r3, r5, #6
 8000468:	0a5b      	lsrs	r3, r3, #9
 800046a:	e750      	b.n	800030e <__aeabi_fadd+0x4a>
 800046c:	2400      	movs	r4, #0
 800046e:	2201      	movs	r2, #1
 8000470:	464b      	mov	r3, r9
 8000472:	401a      	ands	r2, r3
 8000474:	076b      	lsls	r3, r5, #29
 8000476:	d1ba      	bne.n	80003ee <__aeabi_fadd+0x12a>
 8000478:	e742      	b.n	8000300 <__aeabi_fadd+0x3c>
 800047a:	2f00      	cmp	r7, #0
 800047c:	d13b      	bne.n	80004f6 <__aeabi_fadd+0x232>
 800047e:	3401      	adds	r4, #1
 8000480:	b2e0      	uxtb	r0, r4
 8000482:	2801      	cmp	r0, #1
 8000484:	dd4a      	ble.n	800051c <__aeabi_fadd+0x258>
 8000486:	2cff      	cmp	r4, #255	; 0xff
 8000488:	d0bd      	beq.n	8000406 <__aeabi_fadd+0x142>
 800048a:	2607      	movs	r6, #7
 800048c:	18ed      	adds	r5, r5, r3
 800048e:	086d      	lsrs	r5, r5, #1
 8000490:	402e      	ands	r6, r5
 8000492:	e7a7      	b.n	80003e4 <__aeabi_fadd+0x120>
 8000494:	2307      	movs	r3, #7
 8000496:	4d57      	ldr	r5, [pc, #348]	; (80005f4 <__aeabi_fadd+0x330>)
 8000498:	1a24      	subs	r4, r4, r0
 800049a:	4035      	ands	r5, r6
 800049c:	401e      	ands	r6, r3
 800049e:	e7a1      	b.n	80003e4 <__aeabi_fadd+0x120>
 80004a0:	2c00      	cmp	r4, #0
 80004a2:	d11b      	bne.n	80004dc <__aeabi_fadd+0x218>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d16e      	bne.n	8000586 <__aeabi_fadd+0x2c2>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_fadd+0x1ea>
 80004ac:	e09a      	b.n	80005e4 <__aeabi_fadd+0x320>
 80004ae:	000a      	movs	r2, r1
 80004b0:	001d      	movs	r5, r3
 80004b2:	003c      	movs	r4, r7
 80004b4:	e724      	b.n	8000300 <__aeabi_fadd+0x3c>
 80004b6:	3f01      	subs	r7, #1
 80004b8:	2f00      	cmp	r7, #0
 80004ba:	d100      	bne.n	80004be <__aeabi_fadd+0x1fa>
 80004bc:	e758      	b.n	8000370 <__aeabi_fadd+0xac>
 80004be:	2cff      	cmp	r4, #255	; 0xff
 80004c0:	d000      	beq.n	80004c4 <__aeabi_fadd+0x200>
 80004c2:	e74a      	b.n	800035a <__aeabi_fadd+0x96>
 80004c4:	e7a7      	b.n	8000416 <__aeabi_fadd+0x152>
 80004c6:	1b5e      	subs	r6, r3, r5
 80004c8:	4689      	mov	r9, r1
 80004ca:	e776      	b.n	80003ba <__aeabi_fadd+0xf6>
 80004cc:	2d00      	cmp	r5, #0
 80004ce:	d11c      	bne.n	800050a <__aeabi_fadd+0x246>
 80004d0:	000a      	movs	r2, r1
 80004d2:	28ff      	cmp	r0, #255	; 0xff
 80004d4:	d01f      	beq.n	8000516 <__aeabi_fadd+0x252>
 80004d6:	0004      	movs	r4, r0
 80004d8:	001d      	movs	r5, r3
 80004da:	e711      	b.n	8000300 <__aeabi_fadd+0x3c>
 80004dc:	2d00      	cmp	r5, #0
 80004de:	d15d      	bne.n	800059c <__aeabi_fadd+0x2d8>
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d117      	bne.n	8000514 <__aeabi_fadd+0x250>
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	2200      	movs	r2, #0
 80004e8:	03db      	lsls	r3, r3, #15
 80004ea:	26ff      	movs	r6, #255	; 0xff
 80004ec:	e70f      	b.n	800030e <__aeabi_fadd+0x4a>
 80004ee:	000a      	movs	r2, r1
 80004f0:	26ff      	movs	r6, #255	; 0xff
 80004f2:	2300      	movs	r3, #0
 80004f4:	e70b      	b.n	800030e <__aeabi_fadd+0x4a>
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d121      	bne.n	800053e <__aeabi_fadd+0x27a>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d166      	bne.n	80005cc <__aeabi_fadd+0x308>
 80004fe:	28ff      	cmp	r0, #255	; 0xff
 8000500:	d1e9      	bne.n	80004d6 <__aeabi_fadd+0x212>
 8000502:	001d      	movs	r5, r3
 8000504:	e787      	b.n	8000416 <__aeabi_fadd+0x152>
 8000506:	2301      	movs	r3, #1
 8000508:	e752      	b.n	80003b0 <__aeabi_fadd+0xec>
 800050a:	1c7a      	adds	r2, r7, #1
 800050c:	d0a7      	beq.n	800045e <__aeabi_fadd+0x19a>
 800050e:	43fa      	mvns	r2, r7
 8000510:	28ff      	cmp	r0, #255	; 0xff
 8000512:	d199      	bne.n	8000448 <__aeabi_fadd+0x184>
 8000514:	000a      	movs	r2, r1
 8000516:	001d      	movs	r5, r3
 8000518:	24ff      	movs	r4, #255	; 0xff
 800051a:	e6f1      	b.n	8000300 <__aeabi_fadd+0x3c>
 800051c:	2e00      	cmp	r6, #0
 800051e:	d121      	bne.n	8000564 <__aeabi_fadd+0x2a0>
 8000520:	2d00      	cmp	r5, #0
 8000522:	d04f      	beq.n	80005c4 <__aeabi_fadd+0x300>
 8000524:	2b00      	cmp	r3, #0
 8000526:	d04c      	beq.n	80005c2 <__aeabi_fadd+0x2fe>
 8000528:	18ed      	adds	r5, r5, r3
 800052a:	016b      	lsls	r3, r5, #5
 800052c:	d59e      	bpl.n	800046c <__aeabi_fadd+0x1a8>
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <__aeabi_fadd+0x330>)
 8000530:	3607      	adds	r6, #7
 8000532:	402e      	ands	r6, r5
 8000534:	2401      	movs	r4, #1
 8000536:	401d      	ands	r5, r3
 8000538:	e754      	b.n	80003e4 <__aeabi_fadd+0x120>
 800053a:	2301      	movs	r3, #1
 800053c:	e718      	b.n	8000370 <__aeabi_fadd+0xac>
 800053e:	28ff      	cmp	r0, #255	; 0xff
 8000540:	d0df      	beq.n	8000502 <__aeabi_fadd+0x23e>
 8000542:	2480      	movs	r4, #128	; 0x80
 8000544:	04e4      	lsls	r4, r4, #19
 8000546:	427f      	negs	r7, r7
 8000548:	4325      	orrs	r5, r4
 800054a:	2f1b      	cmp	r7, #27
 800054c:	dc4d      	bgt.n	80005ea <__aeabi_fadd+0x326>
 800054e:	2620      	movs	r6, #32
 8000550:	1bf6      	subs	r6, r6, r7
 8000552:	002c      	movs	r4, r5
 8000554:	40b5      	lsls	r5, r6
 8000556:	40fc      	lsrs	r4, r7
 8000558:	1e6a      	subs	r2, r5, #1
 800055a:	4195      	sbcs	r5, r2
 800055c:	4325      	orrs	r5, r4
 800055e:	18ed      	adds	r5, r5, r3
 8000560:	0004      	movs	r4, r0
 8000562:	e706      	b.n	8000372 <__aeabi_fadd+0xae>
 8000564:	2d00      	cmp	r5, #0
 8000566:	d0cc      	beq.n	8000502 <__aeabi_fadd+0x23e>
 8000568:	2b00      	cmp	r3, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x2aa>
 800056c:	e753      	b.n	8000416 <__aeabi_fadd+0x152>
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	4660      	mov	r0, ip
 8000572:	03c9      	lsls	r1, r1, #15
 8000574:	4208      	tst	r0, r1
 8000576:	d003      	beq.n	8000580 <__aeabi_fadd+0x2bc>
 8000578:	4640      	mov	r0, r8
 800057a:	4208      	tst	r0, r1
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x2bc>
 800057e:	001d      	movs	r5, r3
 8000580:	2101      	movs	r1, #1
 8000582:	4011      	ands	r1, r2
 8000584:	e747      	b.n	8000416 <__aeabi_fadd+0x152>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x2c8>
 800058a:	e6b9      	b.n	8000300 <__aeabi_fadd+0x3c>
 800058c:	1aea      	subs	r2, r5, r3
 800058e:	0150      	lsls	r0, r2, #5
 8000590:	d525      	bpl.n	80005de <__aeabi_fadd+0x31a>
 8000592:	2607      	movs	r6, #7
 8000594:	1b5d      	subs	r5, r3, r5
 8000596:	402e      	ands	r6, r5
 8000598:	4689      	mov	r9, r1
 800059a:	e723      	b.n	80003e4 <__aeabi_fadd+0x120>
 800059c:	24ff      	movs	r4, #255	; 0xff
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fadd+0x2e0>
 80005a2:	e6ad      	b.n	8000300 <__aeabi_fadd+0x3c>
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4660      	mov	r0, ip
 80005a8:	03d2      	lsls	r2, r2, #15
 80005aa:	4210      	tst	r0, r2
 80005ac:	d004      	beq.n	80005b8 <__aeabi_fadd+0x2f4>
 80005ae:	4640      	mov	r0, r8
 80005b0:	4210      	tst	r0, r2
 80005b2:	d101      	bne.n	80005b8 <__aeabi_fadd+0x2f4>
 80005b4:	001d      	movs	r5, r3
 80005b6:	4689      	mov	r9, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	464b      	mov	r3, r9
 80005bc:	24ff      	movs	r4, #255	; 0xff
 80005be:	401a      	ands	r2, r3
 80005c0:	e69e      	b.n	8000300 <__aeabi_fadd+0x3c>
 80005c2:	002b      	movs	r3, r5
 80005c4:	08dd      	lsrs	r5, r3, #3
 80005c6:	000a      	movs	r2, r1
 80005c8:	2400      	movs	r4, #0
 80005ca:	e69d      	b.n	8000308 <__aeabi_fadd+0x44>
 80005cc:	1c7a      	adds	r2, r7, #1
 80005ce:	d0c6      	beq.n	800055e <__aeabi_fadd+0x29a>
 80005d0:	43ff      	mvns	r7, r7
 80005d2:	28ff      	cmp	r0, #255	; 0xff
 80005d4:	d1b9      	bne.n	800054a <__aeabi_fadd+0x286>
 80005d6:	001d      	movs	r5, r3
 80005d8:	e71d      	b.n	8000416 <__aeabi_fadd+0x152>
 80005da:	2501      	movs	r5, #1
 80005dc:	e73f      	b.n	800045e <__aeabi_fadd+0x19a>
 80005de:	1e15      	subs	r5, r2, #0
 80005e0:	d000      	beq.n	80005e4 <__aeabi_fadd+0x320>
 80005e2:	e744      	b.n	800046e <__aeabi_fadd+0x1aa>
 80005e4:	2200      	movs	r2, #0
 80005e6:	2300      	movs	r3, #0
 80005e8:	e691      	b.n	800030e <__aeabi_fadd+0x4a>
 80005ea:	2501      	movs	r5, #1
 80005ec:	e7b7      	b.n	800055e <__aeabi_fadd+0x29a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	7dffffff 	.word	0x7dffffff
 80005f4:	fbffffff 	.word	0xfbffffff

080005f8 <__aeabi_fdiv>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	4657      	mov	r7, sl
 80005fc:	464e      	mov	r6, r9
 80005fe:	4645      	mov	r5, r8
 8000600:	46de      	mov	lr, fp
 8000602:	0244      	lsls	r4, r0, #9
 8000604:	b5e0      	push	{r5, r6, r7, lr}
 8000606:	0046      	lsls	r6, r0, #1
 8000608:	4688      	mov	r8, r1
 800060a:	0a64      	lsrs	r4, r4, #9
 800060c:	0e36      	lsrs	r6, r6, #24
 800060e:	0fc7      	lsrs	r7, r0, #31
 8000610:	2e00      	cmp	r6, #0
 8000612:	d063      	beq.n	80006dc <__aeabi_fdiv+0xe4>
 8000614:	2eff      	cmp	r6, #255	; 0xff
 8000616:	d024      	beq.n	8000662 <__aeabi_fdiv+0x6a>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	00e4      	lsls	r4, r4, #3
 800061c:	04db      	lsls	r3, r3, #19
 800061e:	431c      	orrs	r4, r3
 8000620:	2300      	movs	r3, #0
 8000622:	4699      	mov	r9, r3
 8000624:	469b      	mov	fp, r3
 8000626:	3e7f      	subs	r6, #127	; 0x7f
 8000628:	4643      	mov	r3, r8
 800062a:	4642      	mov	r2, r8
 800062c:	025d      	lsls	r5, r3, #9
 800062e:	0fd2      	lsrs	r2, r2, #31
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	0a6d      	lsrs	r5, r5, #9
 8000634:	0e1b      	lsrs	r3, r3, #24
 8000636:	4690      	mov	r8, r2
 8000638:	4692      	mov	sl, r2
 800063a:	d065      	beq.n	8000708 <__aeabi_fdiv+0x110>
 800063c:	2bff      	cmp	r3, #255	; 0xff
 800063e:	d055      	beq.n	80006ec <__aeabi_fdiv+0xf4>
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	00ed      	lsls	r5, r5, #3
 8000646:	04d2      	lsls	r2, r2, #19
 8000648:	3b7f      	subs	r3, #127	; 0x7f
 800064a:	4315      	orrs	r5, r2
 800064c:	1af6      	subs	r6, r6, r3
 800064e:	4643      	mov	r3, r8
 8000650:	464a      	mov	r2, r9
 8000652:	407b      	eors	r3, r7
 8000654:	2a0f      	cmp	r2, #15
 8000656:	d900      	bls.n	800065a <__aeabi_fdiv+0x62>
 8000658:	e08d      	b.n	8000776 <__aeabi_fdiv+0x17e>
 800065a:	486d      	ldr	r0, [pc, #436]	; (8000810 <__aeabi_fdiv+0x218>)
 800065c:	0092      	lsls	r2, r2, #2
 800065e:	5882      	ldr	r2, [r0, r2]
 8000660:	4697      	mov	pc, r2
 8000662:	2c00      	cmp	r4, #0
 8000664:	d154      	bne.n	8000710 <__aeabi_fdiv+0x118>
 8000666:	2308      	movs	r3, #8
 8000668:	4699      	mov	r9, r3
 800066a:	3b06      	subs	r3, #6
 800066c:	26ff      	movs	r6, #255	; 0xff
 800066e:	469b      	mov	fp, r3
 8000670:	e7da      	b.n	8000628 <__aeabi_fdiv+0x30>
 8000672:	2500      	movs	r5, #0
 8000674:	4653      	mov	r3, sl
 8000676:	2902      	cmp	r1, #2
 8000678:	d01b      	beq.n	80006b2 <__aeabi_fdiv+0xba>
 800067a:	2903      	cmp	r1, #3
 800067c:	d100      	bne.n	8000680 <__aeabi_fdiv+0x88>
 800067e:	e0bf      	b.n	8000800 <__aeabi_fdiv+0x208>
 8000680:	2901      	cmp	r1, #1
 8000682:	d028      	beq.n	80006d6 <__aeabi_fdiv+0xde>
 8000684:	0030      	movs	r0, r6
 8000686:	307f      	adds	r0, #127	; 0x7f
 8000688:	2800      	cmp	r0, #0
 800068a:	dd20      	ble.n	80006ce <__aeabi_fdiv+0xd6>
 800068c:	076a      	lsls	r2, r5, #29
 800068e:	d004      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000690:	220f      	movs	r2, #15
 8000692:	402a      	ands	r2, r5
 8000694:	2a04      	cmp	r2, #4
 8000696:	d000      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000698:	3504      	adds	r5, #4
 800069a:	012a      	lsls	r2, r5, #4
 800069c:	d503      	bpl.n	80006a6 <__aeabi_fdiv+0xae>
 800069e:	0030      	movs	r0, r6
 80006a0:	4a5c      	ldr	r2, [pc, #368]	; (8000814 <__aeabi_fdiv+0x21c>)
 80006a2:	3080      	adds	r0, #128	; 0x80
 80006a4:	4015      	ands	r5, r2
 80006a6:	28fe      	cmp	r0, #254	; 0xfe
 80006a8:	dc03      	bgt.n	80006b2 <__aeabi_fdiv+0xba>
 80006aa:	01ac      	lsls	r4, r5, #6
 80006ac:	0a64      	lsrs	r4, r4, #9
 80006ae:	b2c2      	uxtb	r2, r0
 80006b0:	e001      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	2400      	movs	r4, #0
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	05d2      	lsls	r2, r2, #23
 80006ba:	0a60      	lsrs	r0, r4, #9
 80006bc:	07db      	lsls	r3, r3, #31
 80006be:	4310      	orrs	r0, r2
 80006c0:	4318      	orrs	r0, r3
 80006c2:	bc3c      	pop	{r2, r3, r4, r5}
 80006c4:	4690      	mov	r8, r2
 80006c6:	4699      	mov	r9, r3
 80006c8:	46a2      	mov	sl, r4
 80006ca:	46ab      	mov	fp, r5
 80006cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ce:	2201      	movs	r2, #1
 80006d0:	1a10      	subs	r0, r2, r0
 80006d2:	281b      	cmp	r0, #27
 80006d4:	dd7c      	ble.n	80007d0 <__aeabi_fdiv+0x1d8>
 80006d6:	2200      	movs	r2, #0
 80006d8:	2400      	movs	r4, #0
 80006da:	e7ec      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d11d      	bne.n	800071c <__aeabi_fdiv+0x124>
 80006e0:	2304      	movs	r3, #4
 80006e2:	4699      	mov	r9, r3
 80006e4:	3b03      	subs	r3, #3
 80006e6:	2600      	movs	r6, #0
 80006e8:	469b      	mov	fp, r3
 80006ea:	e79d      	b.n	8000628 <__aeabi_fdiv+0x30>
 80006ec:	3eff      	subs	r6, #255	; 0xff
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d120      	bne.n	8000734 <__aeabi_fdiv+0x13c>
 80006f2:	2102      	movs	r1, #2
 80006f4:	4643      	mov	r3, r8
 80006f6:	464a      	mov	r2, r9
 80006f8:	407b      	eors	r3, r7
 80006fa:	430a      	orrs	r2, r1
 80006fc:	2a0f      	cmp	r2, #15
 80006fe:	d8d8      	bhi.n	80006b2 <__aeabi_fdiv+0xba>
 8000700:	4845      	ldr	r0, [pc, #276]	; (8000818 <__aeabi_fdiv+0x220>)
 8000702:	0092      	lsls	r2, r2, #2
 8000704:	5882      	ldr	r2, [r0, r2]
 8000706:	4697      	mov	pc, r2
 8000708:	2d00      	cmp	r5, #0
 800070a:	d119      	bne.n	8000740 <__aeabi_fdiv+0x148>
 800070c:	2101      	movs	r1, #1
 800070e:	e7f1      	b.n	80006f4 <__aeabi_fdiv+0xfc>
 8000710:	230c      	movs	r3, #12
 8000712:	4699      	mov	r9, r3
 8000714:	3b09      	subs	r3, #9
 8000716:	26ff      	movs	r6, #255	; 0xff
 8000718:	469b      	mov	fp, r3
 800071a:	e785      	b.n	8000628 <__aeabi_fdiv+0x30>
 800071c:	0020      	movs	r0, r4
 800071e:	f000 fbb1 	bl	8000e84 <__clzsi2>
 8000722:	2676      	movs	r6, #118	; 0x76
 8000724:	1f43      	subs	r3, r0, #5
 8000726:	409c      	lsls	r4, r3
 8000728:	2300      	movs	r3, #0
 800072a:	4276      	negs	r6, r6
 800072c:	1a36      	subs	r6, r6, r0
 800072e:	4699      	mov	r9, r3
 8000730:	469b      	mov	fp, r3
 8000732:	e779      	b.n	8000628 <__aeabi_fdiv+0x30>
 8000734:	464a      	mov	r2, r9
 8000736:	2303      	movs	r3, #3
 8000738:	431a      	orrs	r2, r3
 800073a:	4691      	mov	r9, r2
 800073c:	2103      	movs	r1, #3
 800073e:	e786      	b.n	800064e <__aeabi_fdiv+0x56>
 8000740:	0028      	movs	r0, r5
 8000742:	f000 fb9f 	bl	8000e84 <__clzsi2>
 8000746:	1f43      	subs	r3, r0, #5
 8000748:	1836      	adds	r6, r6, r0
 800074a:	409d      	lsls	r5, r3
 800074c:	3676      	adds	r6, #118	; 0x76
 800074e:	2100      	movs	r1, #0
 8000750:	e77d      	b.n	800064e <__aeabi_fdiv+0x56>
 8000752:	2480      	movs	r4, #128	; 0x80
 8000754:	2300      	movs	r3, #0
 8000756:	03e4      	lsls	r4, r4, #15
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	e7ac      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 800075c:	2500      	movs	r5, #0
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	03db      	lsls	r3, r3, #15
 8000762:	421c      	tst	r4, r3
 8000764:	d028      	beq.n	80007b8 <__aeabi_fdiv+0x1c0>
 8000766:	421d      	tst	r5, r3
 8000768:	d126      	bne.n	80007b8 <__aeabi_fdiv+0x1c0>
 800076a:	432b      	orrs	r3, r5
 800076c:	025c      	lsls	r4, r3, #9
 800076e:	0a64      	lsrs	r4, r4, #9
 8000770:	4643      	mov	r3, r8
 8000772:	22ff      	movs	r2, #255	; 0xff
 8000774:	e79f      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 8000776:	0162      	lsls	r2, r4, #5
 8000778:	016c      	lsls	r4, r5, #5
 800077a:	42a2      	cmp	r2, r4
 800077c:	d224      	bcs.n	80007c8 <__aeabi_fdiv+0x1d0>
 800077e:	211b      	movs	r1, #27
 8000780:	2500      	movs	r5, #0
 8000782:	3e01      	subs	r6, #1
 8000784:	2701      	movs	r7, #1
 8000786:	0010      	movs	r0, r2
 8000788:	006d      	lsls	r5, r5, #1
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	2800      	cmp	r0, #0
 800078e:	db01      	blt.n	8000794 <__aeabi_fdiv+0x19c>
 8000790:	4294      	cmp	r4, r2
 8000792:	d801      	bhi.n	8000798 <__aeabi_fdiv+0x1a0>
 8000794:	1b12      	subs	r2, r2, r4
 8000796:	433d      	orrs	r5, r7
 8000798:	3901      	subs	r1, #1
 800079a:	2900      	cmp	r1, #0
 800079c:	d1f3      	bne.n	8000786 <__aeabi_fdiv+0x18e>
 800079e:	0014      	movs	r4, r2
 80007a0:	1e62      	subs	r2, r4, #1
 80007a2:	4194      	sbcs	r4, r2
 80007a4:	4325      	orrs	r5, r4
 80007a6:	e76d      	b.n	8000684 <__aeabi_fdiv+0x8c>
 80007a8:	46ba      	mov	sl, r7
 80007aa:	4659      	mov	r1, fp
 80007ac:	0025      	movs	r5, r4
 80007ae:	4653      	mov	r3, sl
 80007b0:	2902      	cmp	r1, #2
 80007b2:	d000      	beq.n	80007b6 <__aeabi_fdiv+0x1be>
 80007b4:	e761      	b.n	800067a <__aeabi_fdiv+0x82>
 80007b6:	e77c      	b.n	80006b2 <__aeabi_fdiv+0xba>
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	03db      	lsls	r3, r3, #15
 80007bc:	431c      	orrs	r4, r3
 80007be:	0264      	lsls	r4, r4, #9
 80007c0:	0a64      	lsrs	r4, r4, #9
 80007c2:	003b      	movs	r3, r7
 80007c4:	22ff      	movs	r2, #255	; 0xff
 80007c6:	e776      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80007c8:	1b12      	subs	r2, r2, r4
 80007ca:	211a      	movs	r1, #26
 80007cc:	2501      	movs	r5, #1
 80007ce:	e7d9      	b.n	8000784 <__aeabi_fdiv+0x18c>
 80007d0:	369e      	adds	r6, #158	; 0x9e
 80007d2:	002a      	movs	r2, r5
 80007d4:	40b5      	lsls	r5, r6
 80007d6:	002c      	movs	r4, r5
 80007d8:	40c2      	lsrs	r2, r0
 80007da:	1e65      	subs	r5, r4, #1
 80007dc:	41ac      	sbcs	r4, r5
 80007de:	4314      	orrs	r4, r2
 80007e0:	0762      	lsls	r2, r4, #29
 80007e2:	d004      	beq.n	80007ee <__aeabi_fdiv+0x1f6>
 80007e4:	220f      	movs	r2, #15
 80007e6:	4022      	ands	r2, r4
 80007e8:	2a04      	cmp	r2, #4
 80007ea:	d000      	beq.n	80007ee <__aeabi_fdiv+0x1f6>
 80007ec:	3404      	adds	r4, #4
 80007ee:	0162      	lsls	r2, r4, #5
 80007f0:	d403      	bmi.n	80007fa <__aeabi_fdiv+0x202>
 80007f2:	01a4      	lsls	r4, r4, #6
 80007f4:	0a64      	lsrs	r4, r4, #9
 80007f6:	2200      	movs	r2, #0
 80007f8:	e75d      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80007fa:	2201      	movs	r2, #1
 80007fc:	2400      	movs	r4, #0
 80007fe:	e75a      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 8000800:	2480      	movs	r4, #128	; 0x80
 8000802:	03e4      	lsls	r4, r4, #15
 8000804:	432c      	orrs	r4, r5
 8000806:	0264      	lsls	r4, r4, #9
 8000808:	0a64      	lsrs	r4, r4, #9
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	e753      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	08006df4 	.word	0x08006df4
 8000814:	f7ffffff 	.word	0xf7ffffff
 8000818:	08006e34 	.word	0x08006e34

0800081c <__eqsf2>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	0042      	lsls	r2, r0, #1
 8000820:	024e      	lsls	r6, r1, #9
 8000822:	004c      	lsls	r4, r1, #1
 8000824:	0245      	lsls	r5, r0, #9
 8000826:	0a6d      	lsrs	r5, r5, #9
 8000828:	0e12      	lsrs	r2, r2, #24
 800082a:	0fc3      	lsrs	r3, r0, #31
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	0e24      	lsrs	r4, r4, #24
 8000830:	0fc9      	lsrs	r1, r1, #31
 8000832:	2aff      	cmp	r2, #255	; 0xff
 8000834:	d00f      	beq.n	8000856 <__eqsf2+0x3a>
 8000836:	2cff      	cmp	r4, #255	; 0xff
 8000838:	d011      	beq.n	800085e <__eqsf2+0x42>
 800083a:	2001      	movs	r0, #1
 800083c:	42a2      	cmp	r2, r4
 800083e:	d000      	beq.n	8000842 <__eqsf2+0x26>
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	42b5      	cmp	r5, r6
 8000844:	d1fc      	bne.n	8000840 <__eqsf2+0x24>
 8000846:	428b      	cmp	r3, r1
 8000848:	d00d      	beq.n	8000866 <__eqsf2+0x4a>
 800084a:	2a00      	cmp	r2, #0
 800084c:	d1f8      	bne.n	8000840 <__eqsf2+0x24>
 800084e:	0028      	movs	r0, r5
 8000850:	1e45      	subs	r5, r0, #1
 8000852:	41a8      	sbcs	r0, r5
 8000854:	e7f4      	b.n	8000840 <__eqsf2+0x24>
 8000856:	2001      	movs	r0, #1
 8000858:	2d00      	cmp	r5, #0
 800085a:	d1f1      	bne.n	8000840 <__eqsf2+0x24>
 800085c:	e7eb      	b.n	8000836 <__eqsf2+0x1a>
 800085e:	2001      	movs	r0, #1
 8000860:	2e00      	cmp	r6, #0
 8000862:	d1ed      	bne.n	8000840 <__eqsf2+0x24>
 8000864:	e7e9      	b.n	800083a <__eqsf2+0x1e>
 8000866:	2000      	movs	r0, #0
 8000868:	e7ea      	b.n	8000840 <__eqsf2+0x24>
 800086a:	46c0      	nop			; (mov r8, r8)

0800086c <__gesf2>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	004a      	lsls	r2, r1, #1
 8000870:	024e      	lsls	r6, r1, #9
 8000872:	0245      	lsls	r5, r0, #9
 8000874:	0044      	lsls	r4, r0, #1
 8000876:	0a6d      	lsrs	r5, r5, #9
 8000878:	0e24      	lsrs	r4, r4, #24
 800087a:	0fc3      	lsrs	r3, r0, #31
 800087c:	0a76      	lsrs	r6, r6, #9
 800087e:	0e12      	lsrs	r2, r2, #24
 8000880:	0fc9      	lsrs	r1, r1, #31
 8000882:	2cff      	cmp	r4, #255	; 0xff
 8000884:	d015      	beq.n	80008b2 <__gesf2+0x46>
 8000886:	2aff      	cmp	r2, #255	; 0xff
 8000888:	d00e      	beq.n	80008a8 <__gesf2+0x3c>
 800088a:	2c00      	cmp	r4, #0
 800088c:	d115      	bne.n	80008ba <__gesf2+0x4e>
 800088e:	2a00      	cmp	r2, #0
 8000890:	d101      	bne.n	8000896 <__gesf2+0x2a>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d01c      	beq.n	80008d0 <__gesf2+0x64>
 8000896:	2d00      	cmp	r5, #0
 8000898:	d014      	beq.n	80008c4 <__gesf2+0x58>
 800089a:	428b      	cmp	r3, r1
 800089c:	d027      	beq.n	80008ee <__gesf2+0x82>
 800089e:	2002      	movs	r0, #2
 80008a0:	3b01      	subs	r3, #1
 80008a2:	4018      	ands	r0, r3
 80008a4:	3801      	subs	r0, #1
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	d0ee      	beq.n	800088a <__gesf2+0x1e>
 80008ac:	2002      	movs	r0, #2
 80008ae:	4240      	negs	r0, r0
 80008b0:	e7f9      	b.n	80008a6 <__gesf2+0x3a>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	d1fa      	bne.n	80008ac <__gesf2+0x40>
 80008b6:	2aff      	cmp	r2, #255	; 0xff
 80008b8:	d00e      	beq.n	80008d8 <__gesf2+0x6c>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d10e      	bne.n	80008dc <__gesf2+0x70>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0ed      	beq.n	800089e <__gesf2+0x32>
 80008c2:	e00b      	b.n	80008dc <__gesf2+0x70>
 80008c4:	2301      	movs	r3, #1
 80008c6:	3901      	subs	r1, #1
 80008c8:	4399      	bics	r1, r3
 80008ca:	0008      	movs	r0, r1
 80008cc:	3001      	adds	r0, #1
 80008ce:	e7ea      	b.n	80008a6 <__gesf2+0x3a>
 80008d0:	2000      	movs	r0, #0
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d0e7      	beq.n	80008a6 <__gesf2+0x3a>
 80008d6:	e7e2      	b.n	800089e <__gesf2+0x32>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d1e7      	bne.n	80008ac <__gesf2+0x40>
 80008dc:	428b      	cmp	r3, r1
 80008de:	d1de      	bne.n	800089e <__gesf2+0x32>
 80008e0:	4294      	cmp	r4, r2
 80008e2:	dd05      	ble.n	80008f0 <__gesf2+0x84>
 80008e4:	2102      	movs	r1, #2
 80008e6:	1e58      	subs	r0, r3, #1
 80008e8:	4008      	ands	r0, r1
 80008ea:	3801      	subs	r0, #1
 80008ec:	e7db      	b.n	80008a6 <__gesf2+0x3a>
 80008ee:	2400      	movs	r4, #0
 80008f0:	42a2      	cmp	r2, r4
 80008f2:	dc04      	bgt.n	80008fe <__gesf2+0x92>
 80008f4:	42b5      	cmp	r5, r6
 80008f6:	d8d2      	bhi.n	800089e <__gesf2+0x32>
 80008f8:	2000      	movs	r0, #0
 80008fa:	42b5      	cmp	r5, r6
 80008fc:	d2d3      	bcs.n	80008a6 <__gesf2+0x3a>
 80008fe:	1e58      	subs	r0, r3, #1
 8000900:	2301      	movs	r3, #1
 8000902:	4398      	bics	r0, r3
 8000904:	3001      	adds	r0, #1
 8000906:	e7ce      	b.n	80008a6 <__gesf2+0x3a>

08000908 <__lesf2>:
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	0042      	lsls	r2, r0, #1
 800090c:	0244      	lsls	r4, r0, #9
 800090e:	024d      	lsls	r5, r1, #9
 8000910:	0fc3      	lsrs	r3, r0, #31
 8000912:	0048      	lsls	r0, r1, #1
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	0e12      	lsrs	r2, r2, #24
 8000918:	0a6d      	lsrs	r5, r5, #9
 800091a:	0e00      	lsrs	r0, r0, #24
 800091c:	0fc9      	lsrs	r1, r1, #31
 800091e:	2aff      	cmp	r2, #255	; 0xff
 8000920:	d012      	beq.n	8000948 <__lesf2+0x40>
 8000922:	28ff      	cmp	r0, #255	; 0xff
 8000924:	d00c      	beq.n	8000940 <__lesf2+0x38>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d112      	bne.n	8000950 <__lesf2+0x48>
 800092a:	2800      	cmp	r0, #0
 800092c:	d119      	bne.n	8000962 <__lesf2+0x5a>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d117      	bne.n	8000962 <__lesf2+0x5a>
 8000932:	2c00      	cmp	r4, #0
 8000934:	d02b      	beq.n	800098e <__lesf2+0x86>
 8000936:	2002      	movs	r0, #2
 8000938:	3b01      	subs	r3, #1
 800093a:	4018      	ands	r0, r3
 800093c:	3801      	subs	r0, #1
 800093e:	e026      	b.n	800098e <__lesf2+0x86>
 8000940:	2d00      	cmp	r5, #0
 8000942:	d0f0      	beq.n	8000926 <__lesf2+0x1e>
 8000944:	2002      	movs	r0, #2
 8000946:	e022      	b.n	800098e <__lesf2+0x86>
 8000948:	2c00      	cmp	r4, #0
 800094a:	d1fb      	bne.n	8000944 <__lesf2+0x3c>
 800094c:	28ff      	cmp	r0, #255	; 0xff
 800094e:	d01f      	beq.n	8000990 <__lesf2+0x88>
 8000950:	2800      	cmp	r0, #0
 8000952:	d11f      	bne.n	8000994 <__lesf2+0x8c>
 8000954:	2d00      	cmp	r5, #0
 8000956:	d11d      	bne.n	8000994 <__lesf2+0x8c>
 8000958:	2002      	movs	r0, #2
 800095a:	3b01      	subs	r3, #1
 800095c:	4018      	ands	r0, r3
 800095e:	3801      	subs	r0, #1
 8000960:	e015      	b.n	800098e <__lesf2+0x86>
 8000962:	2c00      	cmp	r4, #0
 8000964:	d00e      	beq.n	8000984 <__lesf2+0x7c>
 8000966:	428b      	cmp	r3, r1
 8000968:	d1e5      	bne.n	8000936 <__lesf2+0x2e>
 800096a:	2200      	movs	r2, #0
 800096c:	4290      	cmp	r0, r2
 800096e:	dc04      	bgt.n	800097a <__lesf2+0x72>
 8000970:	42ac      	cmp	r4, r5
 8000972:	d8e0      	bhi.n	8000936 <__lesf2+0x2e>
 8000974:	2000      	movs	r0, #0
 8000976:	42ac      	cmp	r4, r5
 8000978:	d209      	bcs.n	800098e <__lesf2+0x86>
 800097a:	1e58      	subs	r0, r3, #1
 800097c:	2301      	movs	r3, #1
 800097e:	4398      	bics	r0, r3
 8000980:	3001      	adds	r0, #1
 8000982:	e004      	b.n	800098e <__lesf2+0x86>
 8000984:	2301      	movs	r3, #1
 8000986:	3901      	subs	r1, #1
 8000988:	4399      	bics	r1, r3
 800098a:	0008      	movs	r0, r1
 800098c:	3001      	adds	r0, #1
 800098e:	bd30      	pop	{r4, r5, pc}
 8000990:	2d00      	cmp	r5, #0
 8000992:	d1d7      	bne.n	8000944 <__lesf2+0x3c>
 8000994:	428b      	cmp	r3, r1
 8000996:	d1ce      	bne.n	8000936 <__lesf2+0x2e>
 8000998:	4282      	cmp	r2, r0
 800099a:	dde7      	ble.n	800096c <__lesf2+0x64>
 800099c:	2102      	movs	r1, #2
 800099e:	1e58      	subs	r0, r3, #1
 80009a0:	4008      	ands	r0, r1
 80009a2:	3801      	subs	r0, #1
 80009a4:	e7f3      	b.n	800098e <__lesf2+0x86>
 80009a6:	46c0      	nop			; (mov r8, r8)

080009a8 <__aeabi_fsub>:
 80009a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009aa:	4647      	mov	r7, r8
 80009ac:	46ce      	mov	lr, r9
 80009ae:	0044      	lsls	r4, r0, #1
 80009b0:	0fc2      	lsrs	r2, r0, #31
 80009b2:	b580      	push	{r7, lr}
 80009b4:	0247      	lsls	r7, r0, #9
 80009b6:	0248      	lsls	r0, r1, #9
 80009b8:	0a40      	lsrs	r0, r0, #9
 80009ba:	4684      	mov	ip, r0
 80009bc:	4666      	mov	r6, ip
 80009be:	0048      	lsls	r0, r1, #1
 80009c0:	0a7f      	lsrs	r7, r7, #9
 80009c2:	0e24      	lsrs	r4, r4, #24
 80009c4:	00f6      	lsls	r6, r6, #3
 80009c6:	0025      	movs	r5, r4
 80009c8:	4690      	mov	r8, r2
 80009ca:	00fb      	lsls	r3, r7, #3
 80009cc:	0e00      	lsrs	r0, r0, #24
 80009ce:	0fc9      	lsrs	r1, r1, #31
 80009d0:	46b1      	mov	r9, r6
 80009d2:	28ff      	cmp	r0, #255	; 0xff
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fsub+0x30>
 80009d6:	e085      	b.n	8000ae4 <__aeabi_fsub+0x13c>
 80009d8:	2601      	movs	r6, #1
 80009da:	4071      	eors	r1, r6
 80009dc:	1a26      	subs	r6, r4, r0
 80009de:	4291      	cmp	r1, r2
 80009e0:	d057      	beq.n	8000a92 <__aeabi_fsub+0xea>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	dd43      	ble.n	8000a6e <__aeabi_fsub+0xc6>
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_fsub+0x44>
 80009ea:	e07f      	b.n	8000aec <__aeabi_fsub+0x144>
 80009ec:	4649      	mov	r1, r9
 80009ee:	2900      	cmp	r1, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x4c>
 80009f2:	e0aa      	b.n	8000b4a <__aeabi_fsub+0x1a2>
 80009f4:	3e01      	subs	r6, #1
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d000      	beq.n	80009fc <__aeabi_fsub+0x54>
 80009fa:	e0f7      	b.n	8000bec <__aeabi_fsub+0x244>
 80009fc:	1a5b      	subs	r3, r3, r1
 80009fe:	015a      	lsls	r2, r3, #5
 8000a00:	d400      	bmi.n	8000a04 <__aeabi_fsub+0x5c>
 8000a02:	e08b      	b.n	8000b1c <__aeabi_fsub+0x174>
 8000a04:	019b      	lsls	r3, r3, #6
 8000a06:	099c      	lsrs	r4, r3, #6
 8000a08:	0020      	movs	r0, r4
 8000a0a:	f000 fa3b 	bl	8000e84 <__clzsi2>
 8000a0e:	3805      	subs	r0, #5
 8000a10:	4084      	lsls	r4, r0
 8000a12:	4285      	cmp	r5, r0
 8000a14:	dd00      	ble.n	8000a18 <__aeabi_fsub+0x70>
 8000a16:	e0d3      	b.n	8000bc0 <__aeabi_fsub+0x218>
 8000a18:	1b45      	subs	r5, r0, r5
 8000a1a:	0023      	movs	r3, r4
 8000a1c:	2020      	movs	r0, #32
 8000a1e:	3501      	adds	r5, #1
 8000a20:	40eb      	lsrs	r3, r5
 8000a22:	1b45      	subs	r5, r0, r5
 8000a24:	40ac      	lsls	r4, r5
 8000a26:	1e62      	subs	r2, r4, #1
 8000a28:	4194      	sbcs	r4, r2
 8000a2a:	4323      	orrs	r3, r4
 8000a2c:	2407      	movs	r4, #7
 8000a2e:	2500      	movs	r5, #0
 8000a30:	401c      	ands	r4, r3
 8000a32:	2201      	movs	r2, #1
 8000a34:	4641      	mov	r1, r8
 8000a36:	400a      	ands	r2, r1
 8000a38:	2c00      	cmp	r4, #0
 8000a3a:	d004      	beq.n	8000a46 <__aeabi_fsub+0x9e>
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	4019      	ands	r1, r3
 8000a40:	2904      	cmp	r1, #4
 8000a42:	d000      	beq.n	8000a46 <__aeabi_fsub+0x9e>
 8000a44:	3304      	adds	r3, #4
 8000a46:	0159      	lsls	r1, r3, #5
 8000a48:	d400      	bmi.n	8000a4c <__aeabi_fsub+0xa4>
 8000a4a:	e080      	b.n	8000b4e <__aeabi_fsub+0x1a6>
 8000a4c:	3501      	adds	r5, #1
 8000a4e:	b2ec      	uxtb	r4, r5
 8000a50:	2dff      	cmp	r5, #255	; 0xff
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fsub+0xae>
 8000a54:	e0a3      	b.n	8000b9e <__aeabi_fsub+0x1f6>
 8000a56:	24ff      	movs	r4, #255	; 0xff
 8000a58:	2300      	movs	r3, #0
 8000a5a:	025b      	lsls	r3, r3, #9
 8000a5c:	05e4      	lsls	r4, r4, #23
 8000a5e:	0a58      	lsrs	r0, r3, #9
 8000a60:	07d2      	lsls	r2, r2, #31
 8000a62:	4320      	orrs	r0, r4
 8000a64:	4310      	orrs	r0, r2
 8000a66:	bc0c      	pop	{r2, r3}
 8000a68:	4690      	mov	r8, r2
 8000a6a:	4699      	mov	r9, r3
 8000a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d174      	bne.n	8000b5c <__aeabi_fsub+0x1b4>
 8000a72:	1c60      	adds	r0, r4, #1
 8000a74:	b2c0      	uxtb	r0, r0
 8000a76:	2801      	cmp	r0, #1
 8000a78:	dc00      	bgt.n	8000a7c <__aeabi_fsub+0xd4>
 8000a7a:	e0a7      	b.n	8000bcc <__aeabi_fsub+0x224>
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	1a9c      	subs	r4, r3, r2
 8000a80:	0162      	lsls	r2, r4, #5
 8000a82:	d500      	bpl.n	8000a86 <__aeabi_fsub+0xde>
 8000a84:	e0b6      	b.n	8000bf4 <__aeabi_fsub+0x24c>
 8000a86:	2c00      	cmp	r4, #0
 8000a88:	d1be      	bne.n	8000a08 <__aeabi_fsub+0x60>
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e7e3      	b.n	8000a5a <__aeabi_fsub+0xb2>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	dc00      	bgt.n	8000a98 <__aeabi_fsub+0xf0>
 8000a96:	e085      	b.n	8000ba4 <__aeabi_fsub+0x1fc>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d046      	beq.n	8000b2a <__aeabi_fsub+0x182>
 8000a9c:	2cff      	cmp	r4, #255	; 0xff
 8000a9e:	d049      	beq.n	8000b34 <__aeabi_fsub+0x18c>
 8000aa0:	2280      	movs	r2, #128	; 0x80
 8000aa2:	4648      	mov	r0, r9
 8000aa4:	04d2      	lsls	r2, r2, #19
 8000aa6:	4310      	orrs	r0, r2
 8000aa8:	4681      	mov	r9, r0
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2e1b      	cmp	r6, #27
 8000aae:	dc09      	bgt.n	8000ac4 <__aeabi_fsub+0x11c>
 8000ab0:	2020      	movs	r0, #32
 8000ab2:	464c      	mov	r4, r9
 8000ab4:	1b80      	subs	r0, r0, r6
 8000ab6:	4084      	lsls	r4, r0
 8000ab8:	464a      	mov	r2, r9
 8000aba:	0020      	movs	r0, r4
 8000abc:	40f2      	lsrs	r2, r6
 8000abe:	1e44      	subs	r4, r0, #1
 8000ac0:	41a0      	sbcs	r0, r4
 8000ac2:	4302      	orrs	r2, r0
 8000ac4:	189b      	adds	r3, r3, r2
 8000ac6:	015a      	lsls	r2, r3, #5
 8000ac8:	d528      	bpl.n	8000b1c <__aeabi_fsub+0x174>
 8000aca:	3501      	adds	r5, #1
 8000acc:	2dff      	cmp	r5, #255	; 0xff
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_fsub+0x12a>
 8000ad0:	e0a8      	b.n	8000c24 <__aeabi_fsub+0x27c>
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2407      	movs	r4, #7
 8000ad6:	4994      	ldr	r1, [pc, #592]	; (8000d28 <__aeabi_fsub+0x380>)
 8000ad8:	401a      	ands	r2, r3
 8000ada:	085b      	lsrs	r3, r3, #1
 8000adc:	400b      	ands	r3, r1
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	401c      	ands	r4, r3
 8000ae2:	e7a6      	b.n	8000a32 <__aeabi_fsub+0x8a>
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d000      	beq.n	8000aea <__aeabi_fsub+0x142>
 8000ae8:	e778      	b.n	80009dc <__aeabi_fsub+0x34>
 8000aea:	e775      	b.n	80009d8 <__aeabi_fsub+0x30>
 8000aec:	2cff      	cmp	r4, #255	; 0xff
 8000aee:	d054      	beq.n	8000b9a <__aeabi_fsub+0x1f2>
 8000af0:	2280      	movs	r2, #128	; 0x80
 8000af2:	4649      	mov	r1, r9
 8000af4:	04d2      	lsls	r2, r2, #19
 8000af6:	4311      	orrs	r1, r2
 8000af8:	4689      	mov	r9, r1
 8000afa:	2201      	movs	r2, #1
 8000afc:	2e1b      	cmp	r6, #27
 8000afe:	dc09      	bgt.n	8000b14 <__aeabi_fsub+0x16c>
 8000b00:	2120      	movs	r1, #32
 8000b02:	4648      	mov	r0, r9
 8000b04:	1b89      	subs	r1, r1, r6
 8000b06:	4088      	lsls	r0, r1
 8000b08:	464a      	mov	r2, r9
 8000b0a:	0001      	movs	r1, r0
 8000b0c:	40f2      	lsrs	r2, r6
 8000b0e:	1e48      	subs	r0, r1, #1
 8000b10:	4181      	sbcs	r1, r0
 8000b12:	430a      	orrs	r2, r1
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	015a      	lsls	r2, r3, #5
 8000b18:	d500      	bpl.n	8000b1c <__aeabi_fsub+0x174>
 8000b1a:	e773      	b.n	8000a04 <__aeabi_fsub+0x5c>
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4641      	mov	r1, r8
 8000b20:	400a      	ands	r2, r1
 8000b22:	0759      	lsls	r1, r3, #29
 8000b24:	d000      	beq.n	8000b28 <__aeabi_fsub+0x180>
 8000b26:	e789      	b.n	8000a3c <__aeabi_fsub+0x94>
 8000b28:	e011      	b.n	8000b4e <__aeabi_fsub+0x1a6>
 8000b2a:	4648      	mov	r0, r9
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d158      	bne.n	8000be2 <__aeabi_fsub+0x23a>
 8000b30:	2cff      	cmp	r4, #255	; 0xff
 8000b32:	d10c      	bne.n	8000b4e <__aeabi_fsub+0x1a6>
 8000b34:	08db      	lsrs	r3, r3, #3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fsub+0x194>
 8000b3a:	e78c      	b.n	8000a56 <__aeabi_fsub+0xae>
 8000b3c:	2080      	movs	r0, #128	; 0x80
 8000b3e:	03c0      	lsls	r0, r0, #15
 8000b40:	4303      	orrs	r3, r0
 8000b42:	025b      	lsls	r3, r3, #9
 8000b44:	0a5b      	lsrs	r3, r3, #9
 8000b46:	24ff      	movs	r4, #255	; 0xff
 8000b48:	e787      	b.n	8000a5a <__aeabi_fsub+0xb2>
 8000b4a:	2cff      	cmp	r4, #255	; 0xff
 8000b4c:	d025      	beq.n	8000b9a <__aeabi_fsub+0x1f2>
 8000b4e:	08db      	lsrs	r3, r3, #3
 8000b50:	2dff      	cmp	r5, #255	; 0xff
 8000b52:	d0f0      	beq.n	8000b36 <__aeabi_fsub+0x18e>
 8000b54:	025b      	lsls	r3, r3, #9
 8000b56:	0a5b      	lsrs	r3, r3, #9
 8000b58:	b2ec      	uxtb	r4, r5
 8000b5a:	e77e      	b.n	8000a5a <__aeabi_fsub+0xb2>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d04d      	beq.n	8000bfc <__aeabi_fsub+0x254>
 8000b60:	28ff      	cmp	r0, #255	; 0xff
 8000b62:	d018      	beq.n	8000b96 <__aeabi_fsub+0x1ee>
 8000b64:	2480      	movs	r4, #128	; 0x80
 8000b66:	04e4      	lsls	r4, r4, #19
 8000b68:	4272      	negs	r2, r6
 8000b6a:	4323      	orrs	r3, r4
 8000b6c:	2a1b      	cmp	r2, #27
 8000b6e:	dd00      	ble.n	8000b72 <__aeabi_fsub+0x1ca>
 8000b70:	e0c4      	b.n	8000cfc <__aeabi_fsub+0x354>
 8000b72:	001c      	movs	r4, r3
 8000b74:	2520      	movs	r5, #32
 8000b76:	40d4      	lsrs	r4, r2
 8000b78:	1aaa      	subs	r2, r5, r2
 8000b7a:	4093      	lsls	r3, r2
 8000b7c:	1e5a      	subs	r2, r3, #1
 8000b7e:	4193      	sbcs	r3, r2
 8000b80:	4323      	orrs	r3, r4
 8000b82:	464a      	mov	r2, r9
 8000b84:	0005      	movs	r5, r0
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	4688      	mov	r8, r1
 8000b8a:	e738      	b.n	80009fe <__aeabi_fsub+0x56>
 8000b8c:	1c72      	adds	r2, r6, #1
 8000b8e:	d0f8      	beq.n	8000b82 <__aeabi_fsub+0x1da>
 8000b90:	43f2      	mvns	r2, r6
 8000b92:	28ff      	cmp	r0, #255	; 0xff
 8000b94:	d1ea      	bne.n	8000b6c <__aeabi_fsub+0x1c4>
 8000b96:	000a      	movs	r2, r1
 8000b98:	464b      	mov	r3, r9
 8000b9a:	25ff      	movs	r5, #255	; 0xff
 8000b9c:	e7d7      	b.n	8000b4e <__aeabi_fsub+0x1a6>
 8000b9e:	019b      	lsls	r3, r3, #6
 8000ba0:	0a5b      	lsrs	r3, r3, #9
 8000ba2:	e75a      	b.n	8000a5a <__aeabi_fsub+0xb2>
 8000ba4:	2e00      	cmp	r6, #0
 8000ba6:	d141      	bne.n	8000c2c <__aeabi_fsub+0x284>
 8000ba8:	1c65      	adds	r5, r4, #1
 8000baa:	b2e9      	uxtb	r1, r5
 8000bac:	2901      	cmp	r1, #1
 8000bae:	dd45      	ble.n	8000c3c <__aeabi_fsub+0x294>
 8000bb0:	2dff      	cmp	r5, #255	; 0xff
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_fsub+0x20e>
 8000bb4:	e74f      	b.n	8000a56 <__aeabi_fsub+0xae>
 8000bb6:	2407      	movs	r4, #7
 8000bb8:	444b      	add	r3, r9
 8000bba:	085b      	lsrs	r3, r3, #1
 8000bbc:	401c      	ands	r4, r3
 8000bbe:	e738      	b.n	8000a32 <__aeabi_fsub+0x8a>
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	4b5a      	ldr	r3, [pc, #360]	; (8000d2c <__aeabi_fsub+0x384>)
 8000bc4:	1a2d      	subs	r5, r5, r0
 8000bc6:	4023      	ands	r3, r4
 8000bc8:	4014      	ands	r4, r2
 8000bca:	e732      	b.n	8000a32 <__aeabi_fsub+0x8a>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d11d      	bne.n	8000c0c <__aeabi_fsub+0x264>
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d17a      	bne.n	8000cca <__aeabi_fsub+0x322>
 8000bd4:	464b      	mov	r3, r9
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_fsub+0x234>
 8000bda:	e091      	b.n	8000d00 <__aeabi_fsub+0x358>
 8000bdc:	000a      	movs	r2, r1
 8000bde:	2500      	movs	r5, #0
 8000be0:	e7b5      	b.n	8000b4e <__aeabi_fsub+0x1a6>
 8000be2:	3e01      	subs	r6, #1
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d119      	bne.n	8000c1c <__aeabi_fsub+0x274>
 8000be8:	444b      	add	r3, r9
 8000bea:	e76c      	b.n	8000ac6 <__aeabi_fsub+0x11e>
 8000bec:	2cff      	cmp	r4, #255	; 0xff
 8000bee:	d184      	bne.n	8000afa <__aeabi_fsub+0x152>
 8000bf0:	25ff      	movs	r5, #255	; 0xff
 8000bf2:	e7ac      	b.n	8000b4e <__aeabi_fsub+0x1a6>
 8000bf4:	464a      	mov	r2, r9
 8000bf6:	4688      	mov	r8, r1
 8000bf8:	1ad4      	subs	r4, r2, r3
 8000bfa:	e705      	b.n	8000a08 <__aeabi_fsub+0x60>
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1c5      	bne.n	8000b8c <__aeabi_fsub+0x1e4>
 8000c00:	000a      	movs	r2, r1
 8000c02:	28ff      	cmp	r0, #255	; 0xff
 8000c04:	d0c8      	beq.n	8000b98 <__aeabi_fsub+0x1f0>
 8000c06:	0005      	movs	r5, r0
 8000c08:	464b      	mov	r3, r9
 8000c0a:	e7a0      	b.n	8000b4e <__aeabi_fsub+0x1a6>
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d149      	bne.n	8000ca4 <__aeabi_fsub+0x2fc>
 8000c10:	464b      	mov	r3, r9
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d077      	beq.n	8000d06 <__aeabi_fsub+0x35e>
 8000c16:	000a      	movs	r2, r1
 8000c18:	25ff      	movs	r5, #255	; 0xff
 8000c1a:	e798      	b.n	8000b4e <__aeabi_fsub+0x1a6>
 8000c1c:	2cff      	cmp	r4, #255	; 0xff
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_fsub+0x27a>
 8000c20:	e743      	b.n	8000aaa <__aeabi_fsub+0x102>
 8000c22:	e787      	b.n	8000b34 <__aeabi_fsub+0x18c>
 8000c24:	000a      	movs	r2, r1
 8000c26:	24ff      	movs	r4, #255	; 0xff
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e716      	b.n	8000a5a <__aeabi_fsub+0xb2>
 8000c2c:	2c00      	cmp	r4, #0
 8000c2e:	d115      	bne.n	8000c5c <__aeabi_fsub+0x2b4>
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d157      	bne.n	8000ce4 <__aeabi_fsub+0x33c>
 8000c34:	28ff      	cmp	r0, #255	; 0xff
 8000c36:	d1e6      	bne.n	8000c06 <__aeabi_fsub+0x25e>
 8000c38:	464b      	mov	r3, r9
 8000c3a:	e77b      	b.n	8000b34 <__aeabi_fsub+0x18c>
 8000c3c:	2c00      	cmp	r4, #0
 8000c3e:	d120      	bne.n	8000c82 <__aeabi_fsub+0x2da>
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d057      	beq.n	8000cf4 <__aeabi_fsub+0x34c>
 8000c44:	4649      	mov	r1, r9
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d053      	beq.n	8000cf2 <__aeabi_fsub+0x34a>
 8000c4a:	444b      	add	r3, r9
 8000c4c:	015a      	lsls	r2, r3, #5
 8000c4e:	d568      	bpl.n	8000d22 <__aeabi_fsub+0x37a>
 8000c50:	2407      	movs	r4, #7
 8000c52:	4a36      	ldr	r2, [pc, #216]	; (8000d2c <__aeabi_fsub+0x384>)
 8000c54:	401c      	ands	r4, r3
 8000c56:	2501      	movs	r5, #1
 8000c58:	4013      	ands	r3, r2
 8000c5a:	e6ea      	b.n	8000a32 <__aeabi_fsub+0x8a>
 8000c5c:	28ff      	cmp	r0, #255	; 0xff
 8000c5e:	d0eb      	beq.n	8000c38 <__aeabi_fsub+0x290>
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	04d2      	lsls	r2, r2, #19
 8000c64:	4276      	negs	r6, r6
 8000c66:	4313      	orrs	r3, r2
 8000c68:	2e1b      	cmp	r6, #27
 8000c6a:	dc53      	bgt.n	8000d14 <__aeabi_fsub+0x36c>
 8000c6c:	2520      	movs	r5, #32
 8000c6e:	1bad      	subs	r5, r5, r6
 8000c70:	001a      	movs	r2, r3
 8000c72:	40ab      	lsls	r3, r5
 8000c74:	40f2      	lsrs	r2, r6
 8000c76:	1e5c      	subs	r4, r3, #1
 8000c78:	41a3      	sbcs	r3, r4
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	444b      	add	r3, r9
 8000c7e:	0005      	movs	r5, r0
 8000c80:	e721      	b.n	8000ac6 <__aeabi_fsub+0x11e>
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0d8      	beq.n	8000c38 <__aeabi_fsub+0x290>
 8000c86:	4649      	mov	r1, r9
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_fsub+0x2e6>
 8000c8c:	e752      	b.n	8000b34 <__aeabi_fsub+0x18c>
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	03c9      	lsls	r1, r1, #15
 8000c92:	420f      	tst	r7, r1
 8000c94:	d100      	bne.n	8000c98 <__aeabi_fsub+0x2f0>
 8000c96:	e74d      	b.n	8000b34 <__aeabi_fsub+0x18c>
 8000c98:	4660      	mov	r0, ip
 8000c9a:	4208      	tst	r0, r1
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_fsub+0x2f8>
 8000c9e:	e749      	b.n	8000b34 <__aeabi_fsub+0x18c>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	e747      	b.n	8000b34 <__aeabi_fsub+0x18c>
 8000ca4:	4648      	mov	r0, r9
 8000ca6:	25ff      	movs	r5, #255	; 0xff
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d100      	bne.n	8000cae <__aeabi_fsub+0x306>
 8000cac:	e74f      	b.n	8000b4e <__aeabi_fsub+0x1a6>
 8000cae:	2280      	movs	r2, #128	; 0x80
 8000cb0:	03d2      	lsls	r2, r2, #15
 8000cb2:	4217      	tst	r7, r2
 8000cb4:	d004      	beq.n	8000cc0 <__aeabi_fsub+0x318>
 8000cb6:	4660      	mov	r0, ip
 8000cb8:	4210      	tst	r0, r2
 8000cba:	d101      	bne.n	8000cc0 <__aeabi_fsub+0x318>
 8000cbc:	464b      	mov	r3, r9
 8000cbe:	4688      	mov	r8, r1
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4641      	mov	r1, r8
 8000cc4:	25ff      	movs	r5, #255	; 0xff
 8000cc6:	400a      	ands	r2, r1
 8000cc8:	e741      	b.n	8000b4e <__aeabi_fsub+0x1a6>
 8000cca:	4648      	mov	r0, r9
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d01f      	beq.n	8000d10 <__aeabi_fsub+0x368>
 8000cd0:	1a1a      	subs	r2, r3, r0
 8000cd2:	0150      	lsls	r0, r2, #5
 8000cd4:	d520      	bpl.n	8000d18 <__aeabi_fsub+0x370>
 8000cd6:	464a      	mov	r2, r9
 8000cd8:	2407      	movs	r4, #7
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	401c      	ands	r4, r3
 8000cde:	4688      	mov	r8, r1
 8000ce0:	2500      	movs	r5, #0
 8000ce2:	e6a6      	b.n	8000a32 <__aeabi_fsub+0x8a>
 8000ce4:	1c74      	adds	r4, r6, #1
 8000ce6:	d0c9      	beq.n	8000c7c <__aeabi_fsub+0x2d4>
 8000ce8:	43f6      	mvns	r6, r6
 8000cea:	28ff      	cmp	r0, #255	; 0xff
 8000cec:	d1bc      	bne.n	8000c68 <__aeabi_fsub+0x2c0>
 8000cee:	464b      	mov	r3, r9
 8000cf0:	e720      	b.n	8000b34 <__aeabi_fsub+0x18c>
 8000cf2:	4699      	mov	r9, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	2500      	movs	r5, #0
 8000cf8:	08db      	lsrs	r3, r3, #3
 8000cfa:	e72b      	b.n	8000b54 <__aeabi_fsub+0x1ac>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e740      	b.n	8000b82 <__aeabi_fsub+0x1da>
 8000d00:	2200      	movs	r2, #0
 8000d02:	2300      	movs	r3, #0
 8000d04:	e6a9      	b.n	8000a5a <__aeabi_fsub+0xb2>
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	2200      	movs	r2, #0
 8000d0a:	03db      	lsls	r3, r3, #15
 8000d0c:	24ff      	movs	r4, #255	; 0xff
 8000d0e:	e6a4      	b.n	8000a5a <__aeabi_fsub+0xb2>
 8000d10:	2500      	movs	r5, #0
 8000d12:	e71c      	b.n	8000b4e <__aeabi_fsub+0x1a6>
 8000d14:	2301      	movs	r3, #1
 8000d16:	e7b1      	b.n	8000c7c <__aeabi_fsub+0x2d4>
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	d0f1      	beq.n	8000d00 <__aeabi_fsub+0x358>
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	2500      	movs	r5, #0
 8000d20:	e6fc      	b.n	8000b1c <__aeabi_fsub+0x174>
 8000d22:	2500      	movs	r5, #0
 8000d24:	e6fa      	b.n	8000b1c <__aeabi_fsub+0x174>
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	7dffffff 	.word	0x7dffffff
 8000d2c:	fbffffff 	.word	0xfbffffff

08000d30 <__aeabi_f2iz>:
 8000d30:	0241      	lsls	r1, r0, #9
 8000d32:	0042      	lsls	r2, r0, #1
 8000d34:	0fc3      	lsrs	r3, r0, #31
 8000d36:	0a49      	lsrs	r1, r1, #9
 8000d38:	0e12      	lsrs	r2, r2, #24
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	2a7e      	cmp	r2, #126	; 0x7e
 8000d3e:	d90d      	bls.n	8000d5c <__aeabi_f2iz+0x2c>
 8000d40:	2a9d      	cmp	r2, #157	; 0x9d
 8000d42:	d80c      	bhi.n	8000d5e <__aeabi_f2iz+0x2e>
 8000d44:	2080      	movs	r0, #128	; 0x80
 8000d46:	0400      	lsls	r0, r0, #16
 8000d48:	4301      	orrs	r1, r0
 8000d4a:	2a95      	cmp	r2, #149	; 0x95
 8000d4c:	dc0a      	bgt.n	8000d64 <__aeabi_f2iz+0x34>
 8000d4e:	2096      	movs	r0, #150	; 0x96
 8000d50:	1a82      	subs	r2, r0, r2
 8000d52:	40d1      	lsrs	r1, r2
 8000d54:	4248      	negs	r0, r1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_f2iz+0x2c>
 8000d5a:	0008      	movs	r0, r1
 8000d5c:	4770      	bx	lr
 8000d5e:	4a03      	ldr	r2, [pc, #12]	; (8000d6c <__aeabi_f2iz+0x3c>)
 8000d60:	1898      	adds	r0, r3, r2
 8000d62:	e7fb      	b.n	8000d5c <__aeabi_f2iz+0x2c>
 8000d64:	3a96      	subs	r2, #150	; 0x96
 8000d66:	4091      	lsls	r1, r2
 8000d68:	e7f4      	b.n	8000d54 <__aeabi_f2iz+0x24>
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	7fffffff 	.word	0x7fffffff

08000d70 <__aeabi_i2f>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d03d      	beq.n	8000df2 <__aeabi_i2f+0x82>
 8000d76:	17c3      	asrs	r3, r0, #31
 8000d78:	18c5      	adds	r5, r0, r3
 8000d7a:	405d      	eors	r5, r3
 8000d7c:	0fc4      	lsrs	r4, r0, #31
 8000d7e:	0028      	movs	r0, r5
 8000d80:	f000 f880 	bl	8000e84 <__clzsi2>
 8000d84:	229e      	movs	r2, #158	; 0x9e
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	2a96      	cmp	r2, #150	; 0x96
 8000d8a:	dc07      	bgt.n	8000d9c <__aeabi_i2f+0x2c>
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	2808      	cmp	r0, #8
 8000d90:	dd33      	ble.n	8000dfa <__aeabi_i2f+0x8a>
 8000d92:	3808      	subs	r0, #8
 8000d94:	4085      	lsls	r5, r0
 8000d96:	0268      	lsls	r0, r5, #9
 8000d98:	0a40      	lsrs	r0, r0, #9
 8000d9a:	e023      	b.n	8000de4 <__aeabi_i2f+0x74>
 8000d9c:	2a99      	cmp	r2, #153	; 0x99
 8000d9e:	dd0b      	ble.n	8000db8 <__aeabi_i2f+0x48>
 8000da0:	2305      	movs	r3, #5
 8000da2:	0029      	movs	r1, r5
 8000da4:	1a1b      	subs	r3, r3, r0
 8000da6:	40d9      	lsrs	r1, r3
 8000da8:	0003      	movs	r3, r0
 8000daa:	331b      	adds	r3, #27
 8000dac:	409d      	lsls	r5, r3
 8000dae:	002b      	movs	r3, r5
 8000db0:	1e5d      	subs	r5, r3, #1
 8000db2:	41ab      	sbcs	r3, r5
 8000db4:	4319      	orrs	r1, r3
 8000db6:	000d      	movs	r5, r1
 8000db8:	2805      	cmp	r0, #5
 8000dba:	dd01      	ble.n	8000dc0 <__aeabi_i2f+0x50>
 8000dbc:	1f43      	subs	r3, r0, #5
 8000dbe:	409d      	lsls	r5, r3
 8000dc0:	002b      	movs	r3, r5
 8000dc2:	490f      	ldr	r1, [pc, #60]	; (8000e00 <__aeabi_i2f+0x90>)
 8000dc4:	400b      	ands	r3, r1
 8000dc6:	076e      	lsls	r6, r5, #29
 8000dc8:	d009      	beq.n	8000dde <__aeabi_i2f+0x6e>
 8000dca:	260f      	movs	r6, #15
 8000dcc:	4035      	ands	r5, r6
 8000dce:	2d04      	cmp	r5, #4
 8000dd0:	d005      	beq.n	8000dde <__aeabi_i2f+0x6e>
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	015d      	lsls	r5, r3, #5
 8000dd6:	d502      	bpl.n	8000dde <__aeabi_i2f+0x6e>
 8000dd8:	229f      	movs	r2, #159	; 0x9f
 8000dda:	400b      	ands	r3, r1
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	019b      	lsls	r3, r3, #6
 8000de0:	0a58      	lsrs	r0, r3, #9
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	0240      	lsls	r0, r0, #9
 8000de6:	05d2      	lsls	r2, r2, #23
 8000de8:	0a40      	lsrs	r0, r0, #9
 8000dea:	07e4      	lsls	r4, r4, #31
 8000dec:	4310      	orrs	r0, r2
 8000dee:	4320      	orrs	r0, r4
 8000df0:	bd70      	pop	{r4, r5, r6, pc}
 8000df2:	2400      	movs	r4, #0
 8000df4:	2200      	movs	r2, #0
 8000df6:	2000      	movs	r0, #0
 8000df8:	e7f4      	b.n	8000de4 <__aeabi_i2f+0x74>
 8000dfa:	0268      	lsls	r0, r5, #9
 8000dfc:	0a40      	lsrs	r0, r0, #9
 8000dfe:	e7f1      	b.n	8000de4 <__aeabi_i2f+0x74>
 8000e00:	fbffffff 	.word	0xfbffffff

08000e04 <__aeabi_ui2f>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	1e04      	subs	r4, r0, #0
 8000e08:	d034      	beq.n	8000e74 <__aeabi_ui2f+0x70>
 8000e0a:	f000 f83b 	bl	8000e84 <__clzsi2>
 8000e0e:	229e      	movs	r2, #158	; 0x9e
 8000e10:	1a12      	subs	r2, r2, r0
 8000e12:	2a96      	cmp	r2, #150	; 0x96
 8000e14:	dc07      	bgt.n	8000e26 <__aeabi_ui2f+0x22>
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	2808      	cmp	r0, #8
 8000e1a:	dd2e      	ble.n	8000e7a <__aeabi_ui2f+0x76>
 8000e1c:	3808      	subs	r0, #8
 8000e1e:	4084      	lsls	r4, r0
 8000e20:	0260      	lsls	r0, r4, #9
 8000e22:	0a40      	lsrs	r0, r0, #9
 8000e24:	e021      	b.n	8000e6a <__aeabi_ui2f+0x66>
 8000e26:	2a99      	cmp	r2, #153	; 0x99
 8000e28:	dd09      	ble.n	8000e3e <__aeabi_ui2f+0x3a>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	0021      	movs	r1, r4
 8000e2e:	331b      	adds	r3, #27
 8000e30:	4099      	lsls	r1, r3
 8000e32:	1e4b      	subs	r3, r1, #1
 8000e34:	4199      	sbcs	r1, r3
 8000e36:	2305      	movs	r3, #5
 8000e38:	1a1b      	subs	r3, r3, r0
 8000e3a:	40dc      	lsrs	r4, r3
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	2805      	cmp	r0, #5
 8000e40:	dd01      	ble.n	8000e46 <__aeabi_ui2f+0x42>
 8000e42:	1f43      	subs	r3, r0, #5
 8000e44:	409c      	lsls	r4, r3
 8000e46:	0023      	movs	r3, r4
 8000e48:	490d      	ldr	r1, [pc, #52]	; (8000e80 <__aeabi_ui2f+0x7c>)
 8000e4a:	400b      	ands	r3, r1
 8000e4c:	0765      	lsls	r5, r4, #29
 8000e4e:	d009      	beq.n	8000e64 <__aeabi_ui2f+0x60>
 8000e50:	250f      	movs	r5, #15
 8000e52:	402c      	ands	r4, r5
 8000e54:	2c04      	cmp	r4, #4
 8000e56:	d005      	beq.n	8000e64 <__aeabi_ui2f+0x60>
 8000e58:	3304      	adds	r3, #4
 8000e5a:	015c      	lsls	r4, r3, #5
 8000e5c:	d502      	bpl.n	8000e64 <__aeabi_ui2f+0x60>
 8000e5e:	229f      	movs	r2, #159	; 0x9f
 8000e60:	400b      	ands	r3, r1
 8000e62:	1a12      	subs	r2, r2, r0
 8000e64:	019b      	lsls	r3, r3, #6
 8000e66:	0a58      	lsrs	r0, r3, #9
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	0240      	lsls	r0, r0, #9
 8000e6c:	05d2      	lsls	r2, r2, #23
 8000e6e:	0a40      	lsrs	r0, r0, #9
 8000e70:	4310      	orrs	r0, r2
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
 8000e74:	2200      	movs	r2, #0
 8000e76:	2000      	movs	r0, #0
 8000e78:	e7f7      	b.n	8000e6a <__aeabi_ui2f+0x66>
 8000e7a:	0260      	lsls	r0, r4, #9
 8000e7c:	0a40      	lsrs	r0, r0, #9
 8000e7e:	e7f4      	b.n	8000e6a <__aeabi_ui2f+0x66>
 8000e80:	fbffffff 	.word	0xfbffffff

08000e84 <__clzsi2>:
 8000e84:	211c      	movs	r1, #28
 8000e86:	2301      	movs	r3, #1
 8000e88:	041b      	lsls	r3, r3, #16
 8000e8a:	4298      	cmp	r0, r3
 8000e8c:	d301      	bcc.n	8000e92 <__clzsi2+0xe>
 8000e8e:	0c00      	lsrs	r0, r0, #16
 8000e90:	3910      	subs	r1, #16
 8000e92:	0a1b      	lsrs	r3, r3, #8
 8000e94:	4298      	cmp	r0, r3
 8000e96:	d301      	bcc.n	8000e9c <__clzsi2+0x18>
 8000e98:	0a00      	lsrs	r0, r0, #8
 8000e9a:	3908      	subs	r1, #8
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	4298      	cmp	r0, r3
 8000ea0:	d301      	bcc.n	8000ea6 <__clzsi2+0x22>
 8000ea2:	0900      	lsrs	r0, r0, #4
 8000ea4:	3904      	subs	r1, #4
 8000ea6:	a202      	add	r2, pc, #8	; (adr r2, 8000eb0 <__clzsi2+0x2c>)
 8000ea8:	5c10      	ldrb	r0, [r2, r0]
 8000eaa:	1840      	adds	r0, r0, r1
 8000eac:	4770      	bx	lr
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	02020304 	.word	0x02020304
 8000eb4:	01010101 	.word	0x01010101
	...

08000ec0 <delay>:
	//		ITM_SendChar((*ptr++));
	return len;
}

void delay (uint16_t time)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	1dbb      	adds	r3, r7, #6
 8000eca:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <delay+0x2c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<time);
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <delay+0x2c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000edc:	1dbb      	adds	r3, r7, #6
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d3f8      	bcc.n	8000ed6 <delay+0x16>
}
 8000ee4:	46c0      	nop			; (mov r8, r8)
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200000dc 	.word	0x200000dc

08000ef0 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	000a      	movs	r2, r1
 8000efa:	1cbb      	adds	r3, r7, #2
 8000efc:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	240c      	movs	r4, #12
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	0018      	movs	r0, r3
 8000f04:	2314      	movs	r3, #20
 8000f06:	001a      	movs	r2, r3
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f005 ff4f 	bl	8006dac <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f0e:	1cbb      	adds	r3, r7, #2
 8000f10:	881a      	ldrh	r2, [r3, #0]
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2201      	movs	r2, #1
 8000f1a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f22:	193a      	adds	r2, r7, r4
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	0011      	movs	r1, r2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f003 fbbd 	bl	80046a8 <HAL_GPIO_Init>
}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b009      	add	sp, #36	; 0x24
 8000f34:	bd90      	pop	{r4, r7, pc}

08000f36 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f36:	b590      	push	{r4, r7, lr}
 8000f38:	b089      	sub	sp, #36	; 0x24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	000a      	movs	r2, r1
 8000f40:	1cbb      	adds	r3, r7, #2
 8000f42:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	240c      	movs	r4, #12
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	0018      	movs	r0, r3
 8000f4a:	2314      	movs	r3, #20
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f005 ff2c 	bl	8006dac <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f54:	1cbb      	adds	r3, r7, #2
 8000f56:	881a      	ldrh	r2, [r3, #0]
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	2201      	movs	r2, #1
 8000f66:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f68:	193a      	adds	r2, r7, r4
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	0011      	movs	r1, r2
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f003 fb9a 	bl	80046a8 <HAL_GPIO_Init>
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b009      	add	sp, #36	; 0x24
 8000f7a:	bd90      	pop	{r4, r7, pc}

08000f7c <DS_MilkWater_Start>:

/*********************************** DS18B20 FUNCTIONS ****************************************/

uint8_t DS_MilkWater_Start (void)     // Start for First Sensor 0
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin);   // set the pin as output
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <DS_MilkWater_Start+0x7c>)
 8000f8e:	0019      	movs	r1, r3
 8000f90:	0010      	movs	r0, r2
 8000f92:	f7ff ffad 	bl	8000ef0 <Set_Pin_Output>
	HAL_GPIO_WritePin (Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin, RESET);  // pull the pin low
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <DS_MilkWater_Start+0x7c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	0019      	movs	r1, r3
 8000fa0:	f003 fd0f 	bl	80049c2 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8000fa4:	23f0      	movs	r3, #240	; 0xf0
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ff89 	bl	8000ec0 <delay>

	Set_Pin_Input(Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin);    // set the pin as input
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <DS_MilkWater_Start+0x7c>)
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	0010      	movs	r0, r2
 8000fb8:	f7ff ffbd 	bl	8000f36 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8000fbc:	2050      	movs	r0, #80	; 0x50
 8000fbe:	f7ff ff7f 	bl	8000ec0 <delay>

	if (!(HAL_GPIO_ReadPin (Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <DS_MilkWater_Start+0x7c>)
 8000fc8:	0019      	movs	r1, r3
 8000fca:	0010      	movs	r0, r2
 8000fcc:	f003 fcdc 	bl	8004988 <HAL_GPIO_ReadPin>
 8000fd0:	1e03      	subs	r3, r0, #0
 8000fd2:	d103      	bne.n	8000fdc <DS_MilkWater_Start+0x60>
 8000fd4:	1dfb      	adds	r3, r7, #7
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e002      	b.n	8000fe2 <DS_MilkWater_Start+0x66>
	else Response = -1;
 8000fdc:	1dfb      	adds	r3, r7, #7
 8000fde:	22ff      	movs	r2, #255	; 0xff
 8000fe0:	701a      	strb	r2, [r3, #0]

	delay (400); // 480 us delay totally.
 8000fe2:	23c8      	movs	r3, #200	; 0xc8
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f7ff ff6a 	bl	8000ec0 <delay>

	return Response;
 8000fec:	1dfb      	adds	r3, r7, #7
 8000fee:	781b      	ldrb	r3, [r3, #0]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	48000800 	.word	0x48000800

08000ffc <DS_MilkWater_Read>:


uint8_t DS_MilkWater_Read (void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]

	Set_Pin_Input(Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin);
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <DS_MilkWater_Read+0x98>)
 800100e:	0019      	movs	r1, r3
 8001010:	0010      	movs	r0, r2
 8001012:	f7ff ff90 	bl	8000f36 <Set_Pin_Input>


	for (int i=0;i<8;i++)
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	e032      	b.n	8001082 <DS_MilkWater_Read+0x86>
	{
		Set_Pin_Output(Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin);   // set as output
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <DS_MilkWater_Read+0x98>)
 8001022:	0019      	movs	r1, r3
 8001024:	0010      	movs	r0, r2
 8001026:	f7ff ff63 	bl	8000ef0 <Set_Pin_Output>

		HAL_GPIO_WritePin (Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin, RESET);  // pull the data pin LOW
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4819      	ldr	r0, [pc, #100]	; (8001094 <DS_MilkWater_Read+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	0019      	movs	r1, r3
 8001034:	f003 fcc5 	bl	80049c2 <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff ff41 	bl	8000ec0 <delay>

		Set_Pin_Input(Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin);  // set as input
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <DS_MilkWater_Read+0x98>)
 8001044:	0019      	movs	r1, r3
 8001046:	0010      	movs	r0, r2
 8001048:	f7ff ff75 	bl	8000f36 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin))  // if the pin is HIGH
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4a10      	ldr	r2, [pc, #64]	; (8001094 <DS_MilkWater_Read+0x98>)
 8001052:	0019      	movs	r1, r3
 8001054:	0010      	movs	r0, r2
 8001056:	f003 fc97 	bl	8004988 <HAL_GPIO_ReadPin>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d00b      	beq.n	8001076 <DS_MilkWater_Read+0x7a>
		{
			value |= 1<<i;  // read = 1
 800105e:	2201      	movs	r2, #1
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	409a      	lsls	r2, r3
 8001064:	0013      	movs	r3, r2
 8001066:	b25a      	sxtb	r2, r3
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b25a      	sxtb	r2, r3
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	701a      	strb	r2, [r3, #0]
		}
		delay (50);  // wait for 60 us
 8001076:	2032      	movs	r0, #50	; 0x32
 8001078:	f7ff ff22 	bl	8000ec0 <delay>
	for (int i=0;i<8;i++)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	2b07      	cmp	r3, #7
 8001086:	ddc9      	ble.n	800101c <DS_MilkWater_Read+0x20>
	}
	return value;
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b002      	add	sp, #8
 8001092:	bd80      	pop	{r7, pc}
 8001094:	48000800 	.word	0x48000800

08001098 <DS_MilkWater_Write>:


void DS_MilkWater_Write (uint8_t data)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	0002      	movs	r2, r0
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin);  // set as output
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4a26      	ldr	r2, [pc, #152]	; (8001144 <DS_MilkWater_Write+0xac>)
 80010aa:	0019      	movs	r1, r3
 80010ac:	0010      	movs	r0, r2
 80010ae:	f7ff ff1f 	bl	8000ef0 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	e03e      	b.n	8001136 <DS_MilkWater_Write+0x9e>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	411a      	asrs	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	2201      	movs	r2, #1
 80010c4:	4013      	ands	r3, r2
 80010c6:	d01b      	beq.n	8001100 <DS_MilkWater_Write+0x68>
		{
			// write 1

			Set_Pin_Output(Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin);  // set as output
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <DS_MilkWater_Write+0xac>)
 80010ce:	0019      	movs	r1, r3
 80010d0:	0010      	movs	r0, r2
 80010d2:	f7ff ff0d 	bl	8000ef0 <Set_Pin_Output>
			HAL_GPIO_WritePin (Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin, RESET);  // pull the pin LOW
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	481a      	ldr	r0, [pc, #104]	; (8001144 <DS_MilkWater_Write+0xac>)
 80010dc:	2200      	movs	r2, #0
 80010de:	0019      	movs	r1, r3
 80010e0:	f003 fc6f 	bl	80049c2 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff feeb 	bl	8000ec0 <delay>

			Set_Pin_Input(Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin);  // set as input
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <DS_MilkWater_Write+0xac>)
 80010f0:	0019      	movs	r1, r3
 80010f2:	0010      	movs	r0, r2
 80010f4:	f7ff ff1f 	bl	8000f36 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 80010f8:	2032      	movs	r0, #50	; 0x32
 80010fa:	f7ff fee1 	bl	8000ec0 <delay>
 80010fe:	e017      	b.n	8001130 <DS_MilkWater_Write+0x98>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin);
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <DS_MilkWater_Write+0xac>)
 8001106:	0019      	movs	r1, r3
 8001108:	0010      	movs	r0, r2
 800110a:	f7ff fef1 	bl	8000ef0 <Set_Pin_Output>
			HAL_GPIO_WritePin (Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin, RESET);  // pull the pin LOW
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <DS_MilkWater_Write+0xac>)
 8001114:	2200      	movs	r2, #0
 8001116:	0019      	movs	r1, r3
 8001118:	f003 fc53 	bl	80049c2 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 800111c:	2032      	movs	r0, #50	; 0x32
 800111e:	f7ff fecf 	bl	8000ec0 <delay>

			Set_Pin_Input(Digital_Temperature_Sensor_MilkWater_GPIO_Port, Digital_Temperature_Sensor_MilkWater_Pin);
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <DS_MilkWater_Write+0xac>)
 8001128:	0019      	movs	r1, r3
 800112a:	0010      	movs	r0, r2
 800112c:	f7ff ff03 	bl	8000f36 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3301      	adds	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b07      	cmp	r3, #7
 800113a:	ddbd      	ble.n	80010b8 <DS_MilkWater_Write+0x20>
		}
	}
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b004      	add	sp, #16
 8001142:	bd80      	pop	{r7, pc}
 8001144:	48000800 	.word	0x48000800

08001148 <DS_Milk_Start>:



uint8_t DS_Milk_Start (void)     // Start for First Sensor 0
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin);   // set the pin as output
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	021a      	lsls	r2, r3, #8
 8001158:	2390      	movs	r3, #144	; 0x90
 800115a:	05db      	lsls	r3, r3, #23
 800115c:	0011      	movs	r1, r2
 800115e:	0018      	movs	r0, r3
 8001160:	f7ff fec6 	bl	8000ef0 <Set_Pin_Output>
	HAL_GPIO_WritePin (Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin, RESET);  // pull the pin low
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	0219      	lsls	r1, r3, #8
 8001168:	2390      	movs	r3, #144	; 0x90
 800116a:	05db      	lsls	r3, r3, #23
 800116c:	2200      	movs	r2, #0
 800116e:	0018      	movs	r0, r3
 8001170:	f003 fc27 	bl	80049c2 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8001174:	23f0      	movs	r3, #240	; 0xf0
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff fea1 	bl	8000ec0 <delay>

	Set_Pin_Input(Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin);    // set the pin as input
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	021a      	lsls	r2, r3, #8
 8001182:	2390      	movs	r3, #144	; 0x90
 8001184:	05db      	lsls	r3, r3, #23
 8001186:	0011      	movs	r1, r2
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff fed4 	bl	8000f36 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 800118e:	2050      	movs	r0, #80	; 0x50
 8001190:	f7ff fe96 	bl	8000ec0 <delay>

	if (!(HAL_GPIO_ReadPin (Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	021a      	lsls	r2, r3, #8
 8001198:	2390      	movs	r3, #144	; 0x90
 800119a:	05db      	lsls	r3, r3, #23
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f003 fbf2 	bl	8004988 <HAL_GPIO_ReadPin>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d103      	bne.n	80011b0 <DS_Milk_Start+0x68>
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	e002      	b.n	80011b6 <DS_Milk_Start+0x6e>
	else Response = -1;
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	701a      	strb	r2, [r3, #0]

	delay (400); // 480 us delay totally.
 80011b6:	23c8      	movs	r3, #200	; 0xc8
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff fe80 	bl	8000ec0 <delay>

	return Response;
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	781b      	ldrb	r3, [r3, #0]
}
 80011c4:	0018      	movs	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}

080011cc <DS_Milk_Read>:


uint8_t DS_Milk_Read (void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]

	Set_Pin_Input(Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin);
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	021a      	lsls	r2, r3, #8
 80011dc:	2390      	movs	r3, #144	; 0x90
 80011de:	05db      	lsls	r3, r3, #23
 80011e0:	0011      	movs	r1, r2
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff fea7 	bl	8000f36 <Set_Pin_Input>


	for (int i=0;i<8;i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	e036      	b.n	800125c <DS_Milk_Read+0x90>
	{
		Set_Pin_Output(Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin);   // set as output
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	021a      	lsls	r2, r3, #8
 80011f2:	2390      	movs	r3, #144	; 0x90
 80011f4:	05db      	lsls	r3, r3, #23
 80011f6:	0011      	movs	r1, r2
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff fe79 	bl	8000ef0 <Set_Pin_Output>

		HAL_GPIO_WritePin (Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin, RESET);  // pull the data pin LOW
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	0219      	lsls	r1, r3, #8
 8001202:	2390      	movs	r3, #144	; 0x90
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	2200      	movs	r2, #0
 8001208:	0018      	movs	r0, r3
 800120a:	f003 fbda 	bl	80049c2 <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff fe56 	bl	8000ec0 <delay>

		Set_Pin_Input(Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin);  // set as input
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	021a      	lsls	r2, r3, #8
 8001218:	2390      	movs	r3, #144	; 0x90
 800121a:	05db      	lsls	r3, r3, #23
 800121c:	0011      	movs	r1, r2
 800121e:	0018      	movs	r0, r3
 8001220:	f7ff fe89 	bl	8000f36 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin))  // if the pin is HIGH
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	021a      	lsls	r2, r3, #8
 8001228:	2390      	movs	r3, #144	; 0x90
 800122a:	05db      	lsls	r3, r3, #23
 800122c:	0011      	movs	r1, r2
 800122e:	0018      	movs	r0, r3
 8001230:	f003 fbaa 	bl	8004988 <HAL_GPIO_ReadPin>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d00b      	beq.n	8001250 <DS_Milk_Read+0x84>
		{
			value |= 1<<i;  // read = 1
 8001238:	2201      	movs	r2, #1
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	409a      	lsls	r2, r3
 800123e:	0013      	movs	r3, r2
 8001240:	b25a      	sxtb	r2, r3
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b25b      	sxtb	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b25a      	sxtb	r2, r3
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	701a      	strb	r2, [r3, #0]
		}
		delay (50);  // wait for 60 us
 8001250:	2032      	movs	r0, #50	; 0x32
 8001252:	f7ff fe35 	bl	8000ec0 <delay>
	for (int i=0;i<8;i++)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b07      	cmp	r3, #7
 8001260:	ddc5      	ble.n	80011ee <DS_Milk_Read+0x22>
	}
	return value;
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}

0800126e <DS_Milk_Write>:

void DS_Milk_Write (uint8_t data)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	0002      	movs	r2, r0
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin);  // set as output
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	021a      	lsls	r2, r3, #8
 800127e:	2390      	movs	r3, #144	; 0x90
 8001280:	05db      	lsls	r3, r3, #23
 8001282:	0011      	movs	r1, r2
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff fe33 	bl	8000ef0 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	e044      	b.n	800131a <DS_Milk_Write+0xac>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	411a      	asrs	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	2201      	movs	r2, #1
 800129c:	4013      	ands	r3, r2
 800129e:	d01e      	beq.n	80012de <DS_Milk_Write+0x70>
		{
			// write 1

			Set_Pin_Output(Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin);  // set as output
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	021a      	lsls	r2, r3, #8
 80012a4:	2390      	movs	r3, #144	; 0x90
 80012a6:	05db      	lsls	r3, r3, #23
 80012a8:	0011      	movs	r1, r2
 80012aa:	0018      	movs	r0, r3
 80012ac:	f7ff fe20 	bl	8000ef0 <Set_Pin_Output>
			HAL_GPIO_WritePin (Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin, RESET);  // pull the pin LOW
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	0219      	lsls	r1, r3, #8
 80012b4:	2390      	movs	r3, #144	; 0x90
 80012b6:	05db      	lsls	r3, r3, #23
 80012b8:	2200      	movs	r2, #0
 80012ba:	0018      	movs	r0, r3
 80012bc:	f003 fb81 	bl	80049c2 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fdfd 	bl	8000ec0 <delay>

			Set_Pin_Input(Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin);  // set as input
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	021a      	lsls	r2, r3, #8
 80012ca:	2390      	movs	r3, #144	; 0x90
 80012cc:	05db      	lsls	r3, r3, #23
 80012ce:	0011      	movs	r1, r2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff fe30 	bl	8000f36 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 80012d6:	2032      	movs	r0, #50	; 0x32
 80012d8:	f7ff fdf2 	bl	8000ec0 <delay>
 80012dc:	e01a      	b.n	8001314 <DS_Milk_Write+0xa6>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin);
 80012de:	2380      	movs	r3, #128	; 0x80
 80012e0:	021a      	lsls	r2, r3, #8
 80012e2:	2390      	movs	r3, #144	; 0x90
 80012e4:	05db      	lsls	r3, r3, #23
 80012e6:	0011      	movs	r1, r2
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fe01 	bl	8000ef0 <Set_Pin_Output>
			HAL_GPIO_WritePin (Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin, RESET);  // pull the pin LOW
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	0219      	lsls	r1, r3, #8
 80012f2:	2390      	movs	r3, #144	; 0x90
 80012f4:	05db      	lsls	r3, r3, #23
 80012f6:	2200      	movs	r2, #0
 80012f8:	0018      	movs	r0, r3
 80012fa:	f003 fb62 	bl	80049c2 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 80012fe:	2032      	movs	r0, #50	; 0x32
 8001300:	f7ff fdde 	bl	8000ec0 <delay>

			Set_Pin_Input(Digital_Temperature_Sensor_Milk_GPIO_Port, Digital_Temperature_Sensor_Milk_Pin);
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	021a      	lsls	r2, r3, #8
 8001308:	2390      	movs	r3, #144	; 0x90
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	0011      	movs	r1, r2
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff fe11 	bl	8000f36 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b07      	cmp	r3, #7
 800131e:	ddb7      	ble.n	8001290 <DS_Milk_Write+0x22>
		}
	}
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b004      	add	sp, #16
 8001326:	bd80      	pop	{r7, pc}

08001328 <DS_Water_Start>:

uint8_t DS_Water_Start (void)     // Start for First Sensor 0
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin);   // set the pin as output
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <DS_Water_Start+0x7c>)
 800133a:	0019      	movs	r1, r3
 800133c:	0010      	movs	r0, r2
 800133e:	f7ff fdd7 	bl	8000ef0 <Set_Pin_Output>
	HAL_GPIO_WritePin (Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin, RESET);  // pull the pin low
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4817      	ldr	r0, [pc, #92]	; (80013a4 <DS_Water_Start+0x7c>)
 8001348:	2200      	movs	r2, #0
 800134a:	0019      	movs	r1, r3
 800134c:	f003 fb39 	bl	80049c2 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8001350:	23f0      	movs	r3, #240	; 0xf0
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	0018      	movs	r0, r3
 8001356:	f7ff fdb3 	bl	8000ec0 <delay>

	Set_Pin_Input(Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin);    // set the pin as input
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <DS_Water_Start+0x7c>)
 8001360:	0019      	movs	r1, r3
 8001362:	0010      	movs	r0, r2
 8001364:	f7ff fde7 	bl	8000f36 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8001368:	2050      	movs	r0, #80	; 0x50
 800136a:	f7ff fda9 	bl	8000ec0 <delay>

	if (!(HAL_GPIO_ReadPin (Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <DS_Water_Start+0x7c>)
 8001374:	0019      	movs	r1, r3
 8001376:	0010      	movs	r0, r2
 8001378:	f003 fb06 	bl	8004988 <HAL_GPIO_ReadPin>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d103      	bne.n	8001388 <DS_Water_Start+0x60>
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	e002      	b.n	800138e <DS_Water_Start+0x66>
	else Response = -1;
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	22ff      	movs	r2, #255	; 0xff
 800138c:	701a      	strb	r2, [r3, #0]

	delay (400); // 480 us delay totally.
 800138e:	23c8      	movs	r3, #200	; 0xc8
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	0018      	movs	r0, r3
 8001394:	f7ff fd94 	bl	8000ec0 <delay>

	return Response;
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	48000800 	.word	0x48000800

080013a8 <DS_Water_Write>:




void DS_Water_Write (uint8_t data)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	0002      	movs	r2, r0
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	701a      	strb	r2, [r3, #0]
	Set_Pin_Output(Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin);  // set as output
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	4a26      	ldr	r2, [pc, #152]	; (8001454 <DS_Water_Write+0xac>)
 80013ba:	0019      	movs	r1, r3
 80013bc:	0010      	movs	r0, r2
 80013be:	f7ff fd97 	bl	8000ef0 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	e03e      	b.n	8001446 <DS_Water_Write+0x9e>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	411a      	asrs	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	2201      	movs	r2, #1
 80013d4:	4013      	ands	r3, r2
 80013d6:	d01b      	beq.n	8001410 <DS_Water_Write+0x68>
		{
			// write 1

			Set_Pin_Output(Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin);  // set as output
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <DS_Water_Write+0xac>)
 80013de:	0019      	movs	r1, r3
 80013e0:	0010      	movs	r0, r2
 80013e2:	f7ff fd85 	bl	8000ef0 <Set_Pin_Output>
			HAL_GPIO_WritePin (Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin, RESET);  // pull the pin LOW
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	481a      	ldr	r0, [pc, #104]	; (8001454 <DS_Water_Write+0xac>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	0019      	movs	r1, r3
 80013f0:	f003 fae7 	bl	80049c2 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fd63 	bl	8000ec0 <delay>

			Set_Pin_Input(Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin);  // set as input
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	011b      	lsls	r3, r3, #4
 80013fe:	4a15      	ldr	r2, [pc, #84]	; (8001454 <DS_Water_Write+0xac>)
 8001400:	0019      	movs	r1, r3
 8001402:	0010      	movs	r0, r2
 8001404:	f7ff fd97 	bl	8000f36 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8001408:	2032      	movs	r0, #50	; 0x32
 800140a:	f7ff fd59 	bl	8000ec0 <delay>
 800140e:	e017      	b.n	8001440 <DS_Water_Write+0x98>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin);
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <DS_Water_Write+0xac>)
 8001416:	0019      	movs	r1, r3
 8001418:	0010      	movs	r0, r2
 800141a:	f7ff fd69 	bl	8000ef0 <Set_Pin_Output>
			HAL_GPIO_WritePin (Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin, RESET);  // pull the pin LOW
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <DS_Water_Write+0xac>)
 8001424:	2200      	movs	r2, #0
 8001426:	0019      	movs	r1, r3
 8001428:	f003 facb 	bl	80049c2 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 800142c:	2032      	movs	r0, #50	; 0x32
 800142e:	f7ff fd47 	bl	8000ec0 <delay>

			Set_Pin_Input(Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin);
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4a07      	ldr	r2, [pc, #28]	; (8001454 <DS_Water_Write+0xac>)
 8001438:	0019      	movs	r1, r3
 800143a:	0010      	movs	r0, r2
 800143c:	f7ff fd7b 	bl	8000f36 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b07      	cmp	r3, #7
 800144a:	ddbd      	ble.n	80013c8 <DS_Water_Write+0x20>
		}
	}
}
 800144c:	46c0      	nop			; (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b004      	add	sp, #16
 8001452:	bd80      	pop	{r7, pc}
 8001454:	48000800 	.word	0x48000800

08001458 <DS_Water_Read>:



uint8_t DS_Water_Read (void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]

	Set_Pin_Input(Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin);
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <DS_Water_Read+0x98>)
 800146a:	0019      	movs	r1, r3
 800146c:	0010      	movs	r0, r2
 800146e:	f7ff fd62 	bl	8000f36 <Set_Pin_Input>


	for (int i=0;i<8;i++)
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	e032      	b.n	80014de <DS_Water_Read+0x86>
	{
		Set_Pin_Output(Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin);   // set as output
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <DS_Water_Read+0x98>)
 800147e:	0019      	movs	r1, r3
 8001480:	0010      	movs	r0, r2
 8001482:	f7ff fd35 	bl	8000ef0 <Set_Pin_Output>

		HAL_GPIO_WritePin (Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin, RESET);  // pull the data pin LOW
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	4819      	ldr	r0, [pc, #100]	; (80014f0 <DS_Water_Read+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	0019      	movs	r1, r3
 8001490:	f003 fa97 	bl	80049c2 <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fd13 	bl	8000ec0 <delay>

		Set_Pin_Input(Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin);  // set as input
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <DS_Water_Read+0x98>)
 80014a0:	0019      	movs	r1, r3
 80014a2:	0010      	movs	r0, r2
 80014a4:	f7ff fd47 	bl	8000f36 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (Digital_Temperature_Sensor_Water_GPIO_Port, Digital_Temperature_Sensor_Water_Pin))  // if the pin is HIGH
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4a10      	ldr	r2, [pc, #64]	; (80014f0 <DS_Water_Read+0x98>)
 80014ae:	0019      	movs	r1, r3
 80014b0:	0010      	movs	r0, r2
 80014b2:	f003 fa69 	bl	8004988 <HAL_GPIO_ReadPin>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d00b      	beq.n	80014d2 <DS_Water_Read+0x7a>
		{
			value |= 1<<i;  // read = 1
 80014ba:	2201      	movs	r2, #1
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	b25a      	sxtb	r2, r3
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b25a      	sxtb	r2, r3
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	701a      	strb	r2, [r3, #0]
		}
		delay (50);  // wait for 60 us
 80014d2:	2032      	movs	r0, #50	; 0x32
 80014d4:	f7ff fcf4 	bl	8000ec0 <delay>
	for (int i=0;i<8;i++)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b07      	cmp	r3, #7
 80014e2:	ddc9      	ble.n	8001478 <DS_Water_Read+0x20>
	}
	return value;
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	781b      	ldrb	r3, [r3, #0]
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	48000800 	.word	0x48000800

080014f4 <DigitalSensor_Read_MilkWater>:



float DigitalSensor_Read_MilkWater()
{
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
	float T0 = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
	uint8_t Sensor_available = 0;
 80014fe:	250b      	movs	r5, #11
 8001500:	197b      	adds	r3, r7, r5
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
	uint8_t T0_byte1, T0_byte2;
	uint16_t TEMP0;


	Sensor_available = DS_MilkWater_Start ();
 8001506:	197c      	adds	r4, r7, r5
 8001508:	f7ff fd38 	bl	8000f7c <DS_MilkWater_Start>
 800150c:	0003      	movs	r3, r0
 800150e:	7023      	strb	r3, [r4, #0]
	HAL_Delay (1);
 8001510:	2001      	movs	r0, #1
 8001512:	f002 fd4d 	bl	8003fb0 <HAL_Delay>
	DS_MilkWater_Write (0xCC);  // skip ROM
 8001516:	20cc      	movs	r0, #204	; 0xcc
 8001518:	f7ff fdbe 	bl	8001098 <DS_MilkWater_Write>
	DS_MilkWater_Write (0x44);  // convert t
 800151c:	2044      	movs	r0, #68	; 0x44
 800151e:	f7ff fdbb 	bl	8001098 <DS_MilkWater_Write>
	HAL_Delay (10);
 8001522:	200a      	movs	r0, #10
 8001524:	f002 fd44 	bl	8003fb0 <HAL_Delay>

	Sensor_available = DS_MilkWater_Start ();
 8001528:	197c      	adds	r4, r7, r5
 800152a:	f7ff fd27 	bl	8000f7c <DS_MilkWater_Start>
 800152e:	0003      	movs	r3, r0
 8001530:	7023      	strb	r3, [r4, #0]
	HAL_Delay(1);
 8001532:	2001      	movs	r0, #1
 8001534:	f002 fd3c 	bl	8003fb0 <HAL_Delay>
	DS_MilkWater_Write (0xCC);
 8001538:	20cc      	movs	r0, #204	; 0xcc
 800153a:	f7ff fdad 	bl	8001098 <DS_MilkWater_Write>
	DS_MilkWater_Write (0xBE);
 800153e:	20be      	movs	r0, #190	; 0xbe
 8001540:	f7ff fdaa 	bl	8001098 <DS_MilkWater_Write>

	T0_byte1 = DS_MilkWater_Read();
 8001544:	250a      	movs	r5, #10
 8001546:	197c      	adds	r4, r7, r5
 8001548:	f7ff fd58 	bl	8000ffc <DS_MilkWater_Read>
 800154c:	0003      	movs	r3, r0
 800154e:	7023      	strb	r3, [r4, #0]
	T0_byte2 = DS_MilkWater_Read();
 8001550:	2609      	movs	r6, #9
 8001552:	19bc      	adds	r4, r7, r6
 8001554:	f7ff fd52 	bl	8000ffc <DS_MilkWater_Read>
 8001558:	0003      	movs	r3, r0
 800155a:	7023      	strb	r3, [r4, #0]
	TEMP0 = (T0_byte2<<8)|T0_byte1;
 800155c:	19bb      	adds	r3, r7, r6
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	197b      	adds	r3, r7, r5
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b21a      	sxth	r2, r3
 800156e:	1dbb      	adds	r3, r7, #6
 8001570:	801a      	strh	r2, [r3, #0]
	T0 = (float)TEMP0/16;
 8001572:	1dbb      	adds	r3, r7, #6
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff fc44 	bl	8000e04 <__aeabi_ui2f>
 800157c:	1c03      	adds	r3, r0, #0
 800157e:	2183      	movs	r1, #131	; 0x83
 8001580:	05c9      	lsls	r1, r1, #23
 8001582:	1c18      	adds	r0, r3, #0
 8001584:	f7ff f838 	bl	80005f8 <__aeabi_fdiv>
 8001588:	1c03      	adds	r3, r0, #0
 800158a:	60fb      	str	r3, [r7, #12]

	return T0;
 800158c:	68fb      	ldr	r3, [r7, #12]
}
 800158e:	1c18      	adds	r0, r3, #0
 8001590:	46bd      	mov	sp, r7
 8001592:	b005      	add	sp, #20
 8001594:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001596 <DigitalSensor_Read_Water>:


float DigitalSensor_Read_Water()
{
 8001596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
	float T0 = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
	uint8_t Sensor_available = 0;
 80015a0:	250b      	movs	r5, #11
 80015a2:	197b      	adds	r3, r7, r5
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
	uint8_t T0_byte1, T0_byte2;
	uint16_t TEMP0;


	Sensor_available = DS_Water_Start ();
 80015a8:	197c      	adds	r4, r7, r5
 80015aa:	f7ff febd 	bl	8001328 <DS_Water_Start>
 80015ae:	0003      	movs	r3, r0
 80015b0:	7023      	strb	r3, [r4, #0]
	HAL_Delay (1);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f002 fcfc 	bl	8003fb0 <HAL_Delay>
	DS_Water_Write (0xCC);
 80015b8:	20cc      	movs	r0, #204	; 0xcc
 80015ba:	f7ff fef5 	bl	80013a8 <DS_Water_Write>
	DS_Water_Write (0x44);
 80015be:	2044      	movs	r0, #68	; 0x44
 80015c0:	f7ff fef2 	bl	80013a8 <DS_Water_Write>
	HAL_Delay (10);
 80015c4:	200a      	movs	r0, #10
 80015c6:	f002 fcf3 	bl	8003fb0 <HAL_Delay>

	Sensor_available = DS_Water_Start ();
 80015ca:	197c      	adds	r4, r7, r5
 80015cc:	f7ff feac 	bl	8001328 <DS_Water_Start>
 80015d0:	0003      	movs	r3, r0
 80015d2:	7023      	strb	r3, [r4, #0]
	HAL_Delay(1);
 80015d4:	2001      	movs	r0, #1
 80015d6:	f002 fceb 	bl	8003fb0 <HAL_Delay>
	DS_Water_Write (0xCC);
 80015da:	20cc      	movs	r0, #204	; 0xcc
 80015dc:	f7ff fee4 	bl	80013a8 <DS_Water_Write>
	DS_Water_Write (0xBE);
 80015e0:	20be      	movs	r0, #190	; 0xbe
 80015e2:	f7ff fee1 	bl	80013a8 <DS_Water_Write>

	T0_byte1 = DS_Water_Read();
 80015e6:	250a      	movs	r5, #10
 80015e8:	197c      	adds	r4, r7, r5
 80015ea:	f7ff ff35 	bl	8001458 <DS_Water_Read>
 80015ee:	0003      	movs	r3, r0
 80015f0:	7023      	strb	r3, [r4, #0]
	T0_byte2 = DS_Water_Read();
 80015f2:	2609      	movs	r6, #9
 80015f4:	19bc      	adds	r4, r7, r6
 80015f6:	f7ff ff2f 	bl	8001458 <DS_Water_Read>
 80015fa:	0003      	movs	r3, r0
 80015fc:	7023      	strb	r3, [r4, #0]
	TEMP0 = (T0_byte2<<8)|T0_byte1;
 80015fe:	19bb      	adds	r3, r7, r6
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	197b      	adds	r3, r7, r5
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21a      	sxth	r2, r3
 8001610:	1dbb      	adds	r3, r7, #6
 8001612:	801a      	strh	r2, [r3, #0]
	T0 = (float)TEMP0/16;
 8001614:	1dbb      	adds	r3, r7, #6
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff fbf3 	bl	8000e04 <__aeabi_ui2f>
 800161e:	1c03      	adds	r3, r0, #0
 8001620:	2183      	movs	r1, #131	; 0x83
 8001622:	05c9      	lsls	r1, r1, #23
 8001624:	1c18      	adds	r0, r3, #0
 8001626:	f7fe ffe7 	bl	80005f8 <__aeabi_fdiv>
 800162a:	1c03      	adds	r3, r0, #0
 800162c:	60fb      	str	r3, [r7, #12]

	return T0;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	1c18      	adds	r0, r3, #0
 8001632:	46bd      	mov	sp, r7
 8001634:	b005      	add	sp, #20
 8001636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001638 <DigitalSensor_Read_Milk>:


float DigitalSensor_Read_Milk()
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
	float T0 = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
	uint8_t Sensor_available = 0;
 8001642:	250b      	movs	r5, #11
 8001644:	197b      	adds	r3, r7, r5
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
	uint8_t T0_byte1, T0_byte2;
	uint16_t TEMP0;


	Sensor_available = DS_Milk_Start ();
 800164a:	197c      	adds	r4, r7, r5
 800164c:	f7ff fd7c 	bl	8001148 <DS_Milk_Start>
 8001650:	0003      	movs	r3, r0
 8001652:	7023      	strb	r3, [r4, #0]
	HAL_Delay (1);
 8001654:	2001      	movs	r0, #1
 8001656:	f002 fcab 	bl	8003fb0 <HAL_Delay>
	DS_Milk_Write (0xCC);
 800165a:	20cc      	movs	r0, #204	; 0xcc
 800165c:	f7ff fe07 	bl	800126e <DS_Milk_Write>
	DS_Milk_Write (0x44);
 8001660:	2044      	movs	r0, #68	; 0x44
 8001662:	f7ff fe04 	bl	800126e <DS_Milk_Write>
	HAL_Delay (10);
 8001666:	200a      	movs	r0, #10
 8001668:	f002 fca2 	bl	8003fb0 <HAL_Delay>

	Sensor_available = DS_Milk_Start ();
 800166c:	197c      	adds	r4, r7, r5
 800166e:	f7ff fd6b 	bl	8001148 <DS_Milk_Start>
 8001672:	0003      	movs	r3, r0
 8001674:	7023      	strb	r3, [r4, #0]
	HAL_Delay(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f002 fc9a 	bl	8003fb0 <HAL_Delay>
	DS_Milk_Write (0xCC);
 800167c:	20cc      	movs	r0, #204	; 0xcc
 800167e:	f7ff fdf6 	bl	800126e <DS_Milk_Write>
	DS_Milk_Write (0xBE);
 8001682:	20be      	movs	r0, #190	; 0xbe
 8001684:	f7ff fdf3 	bl	800126e <DS_Milk_Write>

	T0_byte1 = DS_Milk_Read();
 8001688:	250a      	movs	r5, #10
 800168a:	197c      	adds	r4, r7, r5
 800168c:	f7ff fd9e 	bl	80011cc <DS_Milk_Read>
 8001690:	0003      	movs	r3, r0
 8001692:	7023      	strb	r3, [r4, #0]
	T0_byte2 = DS_Milk_Read();
 8001694:	2609      	movs	r6, #9
 8001696:	19bc      	adds	r4, r7, r6
 8001698:	f7ff fd98 	bl	80011cc <DS_Milk_Read>
 800169c:	0003      	movs	r3, r0
 800169e:	7023      	strb	r3, [r4, #0]
	TEMP0 = (T0_byte2<<8)|T0_byte1;
 80016a0:	19bb      	adds	r3, r7, r6
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	197b      	adds	r3, r7, r5
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	1dbb      	adds	r3, r7, #6
 80016b4:	801a      	strh	r2, [r3, #0]
	T0 = (float)TEMP0/16;
 80016b6:	1dbb      	adds	r3, r7, #6
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff fba2 	bl	8000e04 <__aeabi_ui2f>
 80016c0:	1c03      	adds	r3, r0, #0
 80016c2:	2183      	movs	r1, #131	; 0x83
 80016c4:	05c9      	lsls	r1, r1, #23
 80016c6:	1c18      	adds	r0, r3, #0
 80016c8:	f7fe ff96 	bl	80005f8 <__aeabi_fdiv>
 80016cc:	1c03      	adds	r3, r0, #0
 80016ce:	60fb      	str	r3, [r7, #12]

	return T0;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	1c18      	adds	r0, r3, #0
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b005      	add	sp, #20
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e0:	f002 fc02 	bl	8003ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e4:	f000 f85c 	bl	80017a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e8:	f000 fa0c 	bl	8001b04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016ec:	f000 f9da 	bl	8001aa4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80016f0:	f000 f902 	bl	80018f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80016f4:	f000 f95a 	bl	80019ac <MX_TIM3_Init>
  MX_ADC_Init();
 80016f8:	f000 f8a2 	bl	8001840 <MX_ADC_Init>
	//  Motor_Milk_Stop();
	//
	//  HAL_GPIO_WritePin(Capacitive_Reset_GPIO_Port, Capacitive_Reset_Pin, SET);


	HAL_TIM_Base_Start_IT(&htim1);
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <main+0xa8>)
 80016fe:	0018      	movs	r0, r3
 8001700:	f003 fe38 	bl	8005374 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <main+0xac>)
 8001706:	0018      	movs	r0, r3
 8001708:	f003 fe12 	bl	8005330 <HAL_TIM_Base_Start>

	//  HAL_GPIO_WritePin(Capacitive_Reset_GPIO_Port, Capacitive_Reset_Pin, SET);
	//  HAL_Delay(100);

	Process.Variables.InitProcess = Idle;
 800170c:	4a1f      	ldr	r2, [pc, #124]	; (800178c <main+0xb0>)
 800170e:	23c8      	movs	r3, #200	; 0xc8
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2106      	movs	r1, #6
 8001714:	54d1      	strb	r1, [r2, r3]
	//  TestProcess();		// Only for Testing Purpose

	// Change milk pin with milkwater pin on board
//	  Motor_MilkWater_Clkwise();			//
//	  HAL_Delay(5000);
	Motor_MilkWater_Stop();
 8001716:	f001 fef5 	bl	8003504 <Motor_MilkWater_Stop>

	//  Motor_Milk_Clkwise();
//	  Motor_Milk_AntiClkwise();
//	  HAL_Delay(5000);
	Motor_Milk_Stop();
 800171a:	f001 fecb 	bl	80034b4 <Motor_Milk_Stop>

//	  Motor_Water_Clkwise();
//	  HAL_Delay(5000);
	Motor_Water_Stop();
 800171e:	f001 ff1b 	bl	8003558 <Motor_Water_Stop>

//	  Motor_CleaningWater_Clkwise();		// Cleaning
//	  HAL_Delay(5000);
	Motor_CleaningWater_Stop();
 8001722:	f001 ff45 	bl	80035b0 <Motor_CleaningWater_Stop>

//	  Motor_Stirrer_Clkwise();
//	  HAL_Delay(5000);
	Motor_Stirrer_Stop();
 8001726:	f001 ff81 	bl	800362c <Motor_Stirrer_Stop>

//	  Motor_HotWater_Clkwise();
//	  HAL_Delay(5000);
	Motor_HotWater_Stop();
 800172a:	f001 ffa8 	bl	800367e <Motor_HotWater_Stop>

//	  SSRHeater_ON_MilkWater();			// Interchange the pins on board
//	  HAL_Delay(5000);
	SSRHeater_OFF_MilkWater();
 800172e:	f001 ffc8 	bl	80036c2 <SSRHeater_OFF_MilkWater>

//	  SSRHeater_ON_Water();
//	  HAL_Delay(5000);
	SSRHeater_OFF_Water();
 8001732:	f001 ffe1 	bl	80036f8 <SSRHeater_OFF_Water>

	HAL_GPIO_WritePin(Stirrer_Motor_NF_GPIO_Port, Stirrer_Motor_NF_Pin, SET);
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <main+0xb4>)
 8001738:	2201      	movs	r2, #1
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	0018      	movs	r0, r3
 800173e:	f003 f940 	bl	80049c2 <HAL_GPIO_WritePin>

//	  Motor_Stirrer_Clkwise();
//	  HAL_Delay(5000);
	  Motor_Stirrer_Stop();
 8001742:	f001 ff73 	bl	800362c <Motor_Stirrer_Stop>



	Temperature_PreviousValue_Milk		= 	DigitalSensor_Read_Milk();
 8001746:	f7ff ff77 	bl	8001638 <DigitalSensor_Read_Milk>
 800174a:	1c03      	adds	r3, r0, #0
 800174c:	1c18      	adds	r0, r3, #0
 800174e:	f7ff faef 	bl	8000d30 <__aeabi_f2iz>
 8001752:	0002      	movs	r2, r0
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <main+0xb8>)
 8001756:	601a      	str	r2, [r3, #0]
	Temperature_PreviousValue_MilkWater = 	DigitalSensor_Read_MilkWater();
 8001758:	f7ff fecc 	bl	80014f4 <DigitalSensor_Read_MilkWater>
 800175c:	1c03      	adds	r3, r0, #0
 800175e:	1c18      	adds	r0, r3, #0
 8001760:	f7ff fae6 	bl	8000d30 <__aeabi_f2iz>
 8001764:	0002      	movs	r2, r0
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <main+0xbc>)
 8001768:	601a      	str	r2, [r3, #0]
	Temperature_PreviousValue_Water 	= 	DigitalSensor_Read_Water();
 800176a:	f7ff ff14 	bl	8001596 <DigitalSensor_Read_Water>
 800176e:	1c03      	adds	r3, r0, #0
 8001770:	1c18      	adds	r0, r3, #0
 8001772:	f7ff fadd 	bl	8000d30 <__aeabi_f2iz>
 8001776:	0002      	movs	r2, r0
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <main+0xc0>)
 800177a:	601a      	str	r2, [r3, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		StartProcess();
 800177c:	f000 ff7e 	bl	800267c <StartProcess>
 8001780:	e7fc      	b.n	800177c <main+0xa0>
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	20000310 	.word	0x20000310
 8001788:	200000dc 	.word	0x200000dc
 800178c:	20000120 	.word	0x20000120
 8001790:	48000800 	.word	0x48000800
 8001794:	200000bc 	.word	0x200000bc
 8001798:	200000b8 	.word	0x200000b8
 800179c:	2000011c 	.word	0x2000011c

080017a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b091      	sub	sp, #68	; 0x44
 80017a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017a6:	2410      	movs	r4, #16
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	0018      	movs	r0, r3
 80017ac:	2330      	movs	r3, #48	; 0x30
 80017ae:	001a      	movs	r2, r3
 80017b0:	2100      	movs	r1, #0
 80017b2:	f005 fafb 	bl	8006dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b6:	003b      	movs	r3, r7
 80017b8:	0018      	movs	r0, r3
 80017ba:	2310      	movs	r3, #16
 80017bc:	001a      	movs	r2, r3
 80017be:	2100      	movs	r1, #0
 80017c0:	f005 faf4 	bl	8006dac <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80017c4:	0021      	movs	r1, r4
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	2212      	movs	r2, #18
 80017ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	2201      	movs	r2, #1
 80017d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2201      	movs	r2, #1
 80017d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2210      	movs	r2, #16
 80017dc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	2210      	movs	r2, #16
 80017e2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	2202      	movs	r2, #2
 80017e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	22a0      	movs	r2, #160	; 0xa0
 80017f4:	0392      	lsls	r2, r2, #14
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	2200      	movs	r2, #0
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	0018      	movs	r0, r3
 8001802:	f003 f8fb 	bl	80049fc <HAL_RCC_OscConfig>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800180a:	f000 fac7 	bl	8001d9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180e:	003b      	movs	r3, r7
 8001810:	2207      	movs	r2, #7
 8001812:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001814:	003b      	movs	r3, r7
 8001816:	2202      	movs	r2, #2
 8001818:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181a:	003b      	movs	r3, r7
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001820:	003b      	movs	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001826:	003b      	movs	r3, r7
 8001828:	2101      	movs	r1, #1
 800182a:	0018      	movs	r0, r3
 800182c:	f003 fc02 	bl	8005034 <HAL_RCC_ClockConfig>
 8001830:	1e03      	subs	r3, r0, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001834:	f000 fab2 	bl	8001d9c <Error_Handler>
  }
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b011      	add	sp, #68	; 0x44
 800183e:	bd90      	pop	{r4, r7, pc}

08001840 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	0018      	movs	r0, r3
 800184a:	230c      	movs	r3, #12
 800184c:	001a      	movs	r2, r3
 800184e:	2100      	movs	r1, #0
 8001850:	f005 faac 	bl	8006dac <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <MX_ADC_Init+0xb0>)
 8001856:	4a27      	ldr	r2, [pc, #156]	; (80018f4 <MX_ADC_Init+0xb4>)
 8001858:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <MX_ADC_Init+0xb0>)
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <MX_ADC_Init+0xb0>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <MX_ADC_Init+0xb0>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <MX_ADC_Init+0xb0>)
 800186e:	2201      	movs	r2, #1
 8001870:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <MX_ADC_Init+0xb0>)
 8001874:	2204      	movs	r2, #4
 8001876:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_ADC_Init+0xb0>)
 800187a:	2200      	movs	r2, #0
 800187c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_ADC_Init+0xb0>)
 8001880:	2200      	movs	r2, #0
 8001882:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_ADC_Init+0xb0>)
 8001886:	2200      	movs	r2, #0
 8001888:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_ADC_Init+0xb0>)
 800188c:	2200      	movs	r2, #0
 800188e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_ADC_Init+0xb0>)
 8001892:	22c2      	movs	r2, #194	; 0xc2
 8001894:	32ff      	adds	r2, #255	; 0xff
 8001896:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_ADC_Init+0xb0>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_ADC_Init+0xb0>)
 80018a0:	2224      	movs	r2, #36	; 0x24
 80018a2:	2100      	movs	r1, #0
 80018a4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_ADC_Init+0xb0>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <MX_ADC_Init+0xb0>)
 80018ae:	0018      	movs	r0, r3
 80018b0:	f002 fba0 	bl	8003ff4 <HAL_ADC_Init>
 80018b4:	1e03      	subs	r3, r0, #0
 80018b6:	d001      	beq.n	80018bc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80018b8:	f000 fa70 	bl	8001d9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	0152      	lsls	r2, r2, #5
 80018c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	0552      	lsls	r2, r2, #21
 80018d0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80018d2:	1d3a      	adds	r2, r7, #4
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_ADC_Init+0xb0>)
 80018d6:	0011      	movs	r1, r2
 80018d8:	0018      	movs	r0, r3
 80018da:	f002 fccb 	bl	8004274 <HAL_ADC_ConfigChannel>
 80018de:	1e03      	subs	r3, r0, #0
 80018e0:	d001      	beq.n	80018e6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80018e2:	f000 fa5b 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	200003d4 	.word	0x200003d4
 80018f4:	40012400 	.word	0x40012400

080018f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	2308      	movs	r3, #8
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	0018      	movs	r0, r3
 8001904:	2310      	movs	r3, #16
 8001906:	001a      	movs	r2, r3
 8001908:	2100      	movs	r1, #0
 800190a:	f005 fa4f 	bl	8006dac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190e:	003b      	movs	r3, r7
 8001910:	0018      	movs	r0, r3
 8001912:	2308      	movs	r3, #8
 8001914:	001a      	movs	r2, r3
 8001916:	2100      	movs	r1, #0
 8001918:	f005 fa48 	bl	8006dac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <MX_TIM1_Init+0xa4>)
 800191e:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <MX_TIM1_Init+0xa8>)
 8001920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <MX_TIM1_Init+0xa4>)
 8001924:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <MX_TIM1_Init+0xac>)
 8001926:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <MX_TIM1_Init+0xa4>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <MX_TIM1_Init+0xa4>)
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <MX_TIM1_Init+0xb0>)
 8001932:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <MX_TIM1_Init+0xa4>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <MX_TIM1_Init+0xa4>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <MX_TIM1_Init+0xa4>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <MX_TIM1_Init+0xa4>)
 8001948:	0018      	movs	r0, r3
 800194a:	f003 fcc5 	bl	80052d8 <HAL_TIM_Base_Init>
 800194e:	1e03      	subs	r3, r0, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001952:	f000 fa23 	bl	8001d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001956:	2108      	movs	r1, #8
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2280      	movs	r2, #128	; 0x80
 800195c:	0152      	lsls	r2, r2, #5
 800195e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001960:	187a      	adds	r2, r7, r1
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_TIM1_Init+0xa4>)
 8001964:	0011      	movs	r1, r2
 8001966:	0018      	movs	r0, r3
 8001968:	f003 febe 	bl	80056e8 <HAL_TIM_ConfigClockSource>
 800196c:	1e03      	subs	r3, r0, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001970:	f000 fa14 	bl	8001d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001974:	003b      	movs	r3, r7
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197a:	003b      	movs	r3, r7
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001980:	003a      	movs	r2, r7
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_TIM1_Init+0xa4>)
 8001984:	0011      	movs	r1, r2
 8001986:	0018      	movs	r0, r3
 8001988:	f004 fa98 	bl	8005ebc <HAL_TIMEx_MasterConfigSynchronization>
 800198c:	1e03      	subs	r3, r0, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001990:	f000 fa04 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b006      	add	sp, #24
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000310 	.word	0x20000310
 80019a0:	40012c00 	.word	0x40012c00
 80019a4:	000003e7 	.word	0x000003e7
 80019a8:	000012bf 	.word	0x000012bf

080019ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	; 0x38
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b2:	2328      	movs	r3, #40	; 0x28
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	0018      	movs	r0, r3
 80019b8:	2310      	movs	r3, #16
 80019ba:	001a      	movs	r2, r3
 80019bc:	2100      	movs	r1, #0
 80019be:	f005 f9f5 	bl	8006dac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c2:	2320      	movs	r3, #32
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	0018      	movs	r0, r3
 80019c8:	2308      	movs	r3, #8
 80019ca:	001a      	movs	r2, r3
 80019cc:	2100      	movs	r1, #0
 80019ce:	f005 f9ed 	bl	8006dac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	0018      	movs	r0, r3
 80019d6:	231c      	movs	r3, #28
 80019d8:	001a      	movs	r2, r3
 80019da:	2100      	movs	r1, #0
 80019dc:	f005 f9e6 	bl	8006dac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <MX_TIM3_Init+0xec>)
 80019e2:	4a2e      	ldr	r2, [pc, #184]	; (8001a9c <MX_TIM3_Init+0xf0>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80019e6:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <MX_TIM3_Init+0xec>)
 80019e8:	222f      	movs	r2, #47	; 0x2f
 80019ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <MX_TIM3_Init+0xec>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF-1;
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <MX_TIM3_Init+0xec>)
 80019f4:	4a2a      	ldr	r2, [pc, #168]	; (8001aa0 <MX_TIM3_Init+0xf4>)
 80019f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <MX_TIM3_Init+0xec>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <MX_TIM3_Init+0xec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <MX_TIM3_Init+0xec>)
 8001a06:	0018      	movs	r0, r3
 8001a08:	f003 fc66 	bl	80052d8 <HAL_TIM_Base_Init>
 8001a0c:	1e03      	subs	r3, r0, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a10:	f000 f9c4 	bl	8001d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a14:	2128      	movs	r1, #40	; 0x28
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	0152      	lsls	r2, r2, #5
 8001a1c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a1e:	187a      	adds	r2, r7, r1
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_TIM3_Init+0xec>)
 8001a22:	0011      	movs	r1, r2
 8001a24:	0018      	movs	r0, r3
 8001a26:	f003 fe5f 	bl	80056e8 <HAL_TIM_ConfigClockSource>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001a2e:	f000 f9b5 	bl	8001d9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_TIM3_Init+0xec>)
 8001a34:	0018      	movs	r0, r3
 8001a36:	f003 fcbf 	bl	80053b8 <HAL_TIM_OC_Init>
 8001a3a:	1e03      	subs	r3, r0, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001a3e:	f000 f9ad 	bl	8001d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a42:	2120      	movs	r1, #32
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a50:	187a      	adds	r2, r7, r1
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_TIM3_Init+0xec>)
 8001a54:	0011      	movs	r1, r2
 8001a56:	0018      	movs	r0, r3
 8001a58:	f004 fa30 	bl	8005ebc <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	1e03      	subs	r3, r0, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001a60:	f000 f99c 	bl	8001d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a7c:	1d39      	adds	r1, r7, #4
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_TIM3_Init+0xec>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	0018      	movs	r0, r3
 8001a84:	f003 fde2 	bl	800564c <HAL_TIM_OC_ConfigChannel>
 8001a88:	1e03      	subs	r3, r0, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001a8c:	f000 f986 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b00e      	add	sp, #56	; 0x38
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200000dc 	.word	0x200000dc
 8001a9c:	40000400 	.word	0x40000400
 8001aa0:	0000fffe 	.word	0x0000fffe

08001aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001aaa:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <MX_USART2_UART_Init+0x5c>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ab0:	22e1      	movs	r2, #225	; 0xe1
 8001ab2:	0252      	lsls	r2, r2, #9
 8001ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <MX_USART2_UART_Init+0x58>)
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f004 fa4f 	bl	8005f8c <HAL_UART_Init>
 8001aee:	1e03      	subs	r3, r0, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001af2:	f000 f953 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000354 	.word	0x20000354
 8001b00:	40004400 	.word	0x40004400

08001b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b08b      	sub	sp, #44	; 0x2c
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	2414      	movs	r4, #20
 8001b0c:	193b      	adds	r3, r7, r4
 8001b0e:	0018      	movs	r0, r3
 8001b10:	2314      	movs	r3, #20
 8001b12:	001a      	movs	r2, r3
 8001b14:	2100      	movs	r1, #0
 8001b16:	f005 f949 	bl	8006dac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	4b98      	ldr	r3, [pc, #608]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	4b97      	ldr	r3, [pc, #604]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	0309      	lsls	r1, r1, #12
 8001b24:	430a      	orrs	r2, r1
 8001b26:	615a      	str	r2, [r3, #20]
 8001b28:	4b94      	ldr	r3, [pc, #592]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	031b      	lsls	r3, r3, #12
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b36:	4b91      	ldr	r3, [pc, #580]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	4b90      	ldr	r3, [pc, #576]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	03c9      	lsls	r1, r1, #15
 8001b40:	430a      	orrs	r2, r1
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	4b8d      	ldr	r3, [pc, #564]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	03db      	lsls	r3, r3, #15
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b8a      	ldr	r3, [pc, #552]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	4b89      	ldr	r3, [pc, #548]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	0289      	lsls	r1, r1, #10
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	615a      	str	r2, [r3, #20]
 8001b60:	4b86      	ldr	r3, [pc, #536]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	029b      	lsls	r3, r3, #10
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b83      	ldr	r3, [pc, #524]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	4b82      	ldr	r3, [pc, #520]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b74:	2180      	movs	r1, #128	; 0x80
 8001b76:	02c9      	lsls	r1, r1, #11
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <MX_GPIO_Init+0x278>)
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	02db      	lsls	r3, r3, #11
 8001b84:	4013      	ands	r3, r2
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART_DE_Pin|Capacitive_Reset_Pin|HotWater_Motor_IN2_Pin|HotWater_Motor_IN1_Pin 
 8001b8a:	497d      	ldr	r1, [pc, #500]	; (8001d80 <MX_GPIO_Init+0x27c>)
 8001b8c:	2390      	movs	r3, #144	; 0x90
 8001b8e:	05db      	lsls	r3, r3, #23
 8001b90:	2200      	movs	r2, #0
 8001b92:	0018      	movs	r0, r3
 8001b94:	f002 ff15 	bl	80049c2 <HAL_GPIO_WritePin>
                          |SSRHeater_MilkWater_Pin|Digital_Temperature_Sensor_Milk_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Milk_Motor_IN1_Pin|Milk_Motor_IN2_Pin|Stirrer_Motor_NF_Pin|Stirrer_Motor_IN1_Pin 
 8001b98:	23df      	movs	r3, #223	; 0xdf
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	4879      	ldr	r0, [pc, #484]	; (8001d84 <MX_GPIO_Init+0x280>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	f002 ff0e 	bl	80049c2 <HAL_GPIO_WritePin>
                          |Stirrer_Motor_IN2_Pin|Digital_Temperature_Sensor_MilkWater_Pin|Digital_Temperature_Sensor_Water_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MilkWater_Motor_IN1_Pin|MilkWater_Motor_IN2_Pin|Water_Motor_IN1_Pin|Water_Motor_IN2_Pin 
 8001ba6:	4978      	ldr	r1, [pc, #480]	; (8001d88 <MX_GPIO_Init+0x284>)
 8001ba8:	4b78      	ldr	r3, [pc, #480]	; (8001d8c <MX_GPIO_Init+0x288>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	0018      	movs	r0, r3
 8001bae:	f002 ff08 	bl	80049c2 <HAL_GPIO_WritePin>
                          |CleaningWater_Motor_IN1_Pin|CleaningWater_Motor_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SSRHeater_Water_Pin|Solenoid_Valve_Pin, GPIO_PIN_RESET);
 8001bb2:	4b77      	ldr	r3, [pc, #476]	; (8001d90 <MX_GPIO_Init+0x28c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	21c0      	movs	r1, #192	; 0xc0
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f002 ff02 	bl	80049c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART_DE_Pin Capacitive_Reset_Pin HotWater_Motor_IN2_Pin HotWater_Motor_IN1_Pin 
                           Digital_Temperature_Sensor_Milk_Pin */
  GPIO_InitStruct.Pin = USART_DE_Pin|Capacitive_Reset_Pin|HotWater_Motor_IN2_Pin|HotWater_Motor_IN1_Pin 
 8001bbe:	193b      	adds	r3, r7, r4
 8001bc0:	4a74      	ldr	r2, [pc, #464]	; (8001d94 <MX_GPIO_Init+0x290>)
 8001bc2:	601a      	str	r2, [r3, #0]
                          |Digital_Temperature_Sensor_Milk_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	193b      	adds	r3, r7, r4
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	193a      	adds	r2, r7, r4
 8001bd8:	2390      	movs	r3, #144	; 0x90
 8001bda:	05db      	lsls	r3, r3, #23
 8001bdc:	0011      	movs	r1, r2
 8001bde:	0018      	movs	r0, r3
 8001be0:	f002 fd62 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Milk_Motor_NF_Pin */
  GPIO_InitStruct.Pin = Milk_Motor_NF_Pin;
 8001be4:	193b      	adds	r3, r7, r4
 8001be6:	2210      	movs	r2, #16
 8001be8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	193b      	adds	r3, r7, r4
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Milk_Motor_NF_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	193b      	adds	r3, r7, r4
 8001bf8:	4a65      	ldr	r2, [pc, #404]	; (8001d90 <MX_GPIO_Init+0x28c>)
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	f002 fd53 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Balloff_Read_Pin */
  GPIO_InitStruct.Pin = Balloff_Read_Pin;
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	2220      	movs	r2, #32
 8001c06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c08:	193b      	adds	r3, r7, r4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0e:	193b      	adds	r3, r7, r4
 8001c10:	2201      	movs	r2, #1
 8001c12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Balloff_Read_GPIO_Port, &GPIO_InitStruct);
 8001c14:	193b      	adds	r3, r7, r4
 8001c16:	4a5e      	ldr	r2, [pc, #376]	; (8001d90 <MX_GPIO_Init+0x28c>)
 8001c18:	0019      	movs	r1, r3
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	f002 fd44 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Capacitive_Input_Pin Milk_LevelSensor_OpampProtection_Pin Water_LevelSensor_Pin */
  GPIO_InitStruct.Pin = Capacitive_Input_Pin|Milk_LevelSensor_OpampProtection_Pin|Water_LevelSensor_Pin;
 8001c20:	193b      	adds	r3, r7, r4
 8001c22:	22c2      	movs	r2, #194	; 0xc2
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c28:	193b      	adds	r3, r7, r4
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	2201      	movs	r2, #1
 8001c32:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	193a      	adds	r2, r7, r4
 8001c36:	2390      	movs	r3, #144	; 0x90
 8001c38:	05db      	lsls	r3, r3, #23
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f002 fd33 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Milk_Motor_IN1_Pin Milk_Motor_IN2_Pin Stirrer_Motor_NF_Pin Stirrer_Motor_IN1_Pin 
                           Stirrer_Motor_IN2_Pin Digital_Temperature_Sensor_MilkWater_Pin Digital_Temperature_Sensor_Water_Pin */
  GPIO_InitStruct.Pin = Milk_Motor_IN1_Pin|Milk_Motor_IN2_Pin|Stirrer_Motor_NF_Pin|Stirrer_Motor_IN1_Pin 
 8001c42:	0021      	movs	r1, r4
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	22df      	movs	r2, #223	; 0xdf
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	601a      	str	r2, [r3, #0]
                          |Stirrer_Motor_IN2_Pin|Digital_Temperature_Sensor_MilkWater_Pin|Digital_Temperature_Sensor_Water_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	2201      	movs	r2, #1
 8001c50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	000c      	movs	r4, r1
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	4a48      	ldr	r2, [pc, #288]	; (8001d84 <MX_GPIO_Init+0x280>)
 8001c64:	0019      	movs	r1, r3
 8001c66:	0010      	movs	r0, r2
 8001c68:	f002 fd1e 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MilkWater_Motor_NF_Pin Water_Motor_NF_Pin CleaningWater_Motor_NF_Pin Flow_Sensor_Water_Pin 
                           Flow_Sensor_MilkWater_Pin CAP_READ_Pin */
  GPIO_InitStruct.Pin = MilkWater_Motor_NF_Pin|Water_Motor_NF_Pin|CleaningWater_Motor_NF_Pin|Flow_Sensor_Water_Pin 
 8001c6c:	0021      	movs	r1, r4
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	4a49      	ldr	r2, [pc, #292]	; (8001d98 <MX_GPIO_Init+0x294>)
 8001c72:	601a      	str	r2, [r3, #0]
                          |Flow_Sensor_MilkWater_Pin|CAP_READ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	000c      	movs	r4, r1
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	4a41      	ldr	r2, [pc, #260]	; (8001d8c <MX_GPIO_Init+0x288>)
 8001c86:	0019      	movs	r1, r3
 8001c88:	0010      	movs	r0, r2
 8001c8a:	f002 fd0d 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MilkWater_Motor_IN1_Pin MilkWater_Motor_IN2_Pin Water_Motor_IN1_Pin Water_Motor_IN2_Pin 
                           CleaningWater_Motor_IN1_Pin CleaningWater_Motor_IN2_Pin */
  GPIO_InitStruct.Pin = MilkWater_Motor_IN1_Pin|MilkWater_Motor_IN2_Pin|Water_Motor_IN1_Pin|Water_Motor_IN2_Pin 
 8001c8e:	0021      	movs	r1, r4
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	4a3d      	ldr	r2, [pc, #244]	; (8001d88 <MX_GPIO_Init+0x284>)
 8001c94:	601a      	str	r2, [r3, #0]
                          |CleaningWater_Motor_IN1_Pin|CleaningWater_Motor_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c96:	187b      	adds	r3, r7, r1
 8001c98:	2201      	movs	r2, #1
 8001c9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	000c      	movs	r4, r1
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <MX_GPIO_Init+0x288>)
 8001cae:	0019      	movs	r1, r3
 8001cb0:	0010      	movs	r0, r2
 8001cb2:	f002 fcf9 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HotWater_Motor_NF_Pin */
  GPIO_InitStruct.Pin = HotWater_Motor_NF_Pin;
 8001cb6:	0021      	movs	r1, r4
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HotWater_Motor_NF_GPIO_Port, &GPIO_InitStruct);
 8001ccc:	000c      	movs	r4, r1
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <MX_GPIO_Init+0x280>)
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	0010      	movs	r0, r2
 8001cd6:	f002 fce7 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SSRHeater_MilkWater_Pin */
  GPIO_InitStruct.Pin = SSRHeater_MilkWater_Pin;
 8001cda:	0021      	movs	r1, r4
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	0152      	lsls	r2, r2, #5
 8001ce2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	2211      	movs	r2, #17
 8001ce8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2201      	movs	r2, #1
 8001cee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SSRHeater_MilkWater_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	000c      	movs	r4, r1
 8001cf8:	187a      	adds	r2, r7, r1
 8001cfa:	2390      	movs	r3, #144	; 0x90
 8001cfc:	05db      	lsls	r3, r3, #23
 8001cfe:	0011      	movs	r1, r2
 8001d00:	0018      	movs	r0, r3
 8001d02:	f002 fcd1 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SSRHeater_Water_Pin Solenoid_Valve_Pin */
  GPIO_InitStruct.Pin = SSRHeater_Water_Pin|Solenoid_Valve_Pin;
 8001d06:	0021      	movs	r1, r4
 8001d08:	187b      	adds	r3, r7, r1
 8001d0a:	22c0      	movs	r2, #192	; 0xc0
 8001d0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	2201      	movs	r2, #1
 8001d12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d20:	000c      	movs	r4, r1
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <MX_GPIO_Init+0x28c>)
 8001d26:	0019      	movs	r1, r3
 8001d28:	0010      	movs	r0, r2
 8001d2a:	f002 fcbd 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MilkWater_Level_Pin */
  GPIO_InitStruct.Pin = MilkWater_Level_Pin;
 8001d2e:	0021      	movs	r1, r4
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	2280      	movs	r2, #128	; 0x80
 8001d34:	0152      	lsls	r2, r2, #5
 8001d36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	2201      	movs	r2, #1
 8001d42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MilkWater_Level_GPIO_Port, &GPIO_InitStruct);
 8001d44:	000c      	movs	r4, r1
 8001d46:	187b      	adds	r3, r7, r1
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <MX_GPIO_Init+0x280>)
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	0010      	movs	r0, r2
 8001d4e:	f002 fcab 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Milk_FloatSensor_Pin */
  GPIO_InitStruct.Pin = Milk_FloatSensor_Pin;
 8001d52:	0021      	movs	r1, r4
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	2201      	movs	r2, #1
 8001d66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Milk_FloatSensor_GPIO_Port, &GPIO_InitStruct);
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <MX_GPIO_Init+0x288>)
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	0010      	movs	r0, r2
 8001d70:	f002 fc9a 	bl	80046a8 <HAL_GPIO_Init>

}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b00b      	add	sp, #44	; 0x2c
 8001d7a:	bd90      	pop	{r4, r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	00009382 	.word	0x00009382
 8001d84:	48000800 	.word	0x48000800
 8001d88:	0000d806 	.word	0x0000d806
 8001d8c:	48000400 	.word	0x48000400
 8001d90:	48001400 	.word	0x48001400
 8001d94:	00008382 	.word	0x00008382
 8001d98:	00002471 	.word	0x00002471

08001d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_UART_CpltCallback>:
// ***************************	 UART CallBack	******************************************** //
// ********************************************************************************************* //

//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
void HAL_UART_CpltCallback(void)
{
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	af00      	add	r7, sp, #0

	if (Process.Flags.UART_Enable == SET)
 8001dac:	4aec      	ldr	r2, [pc, #944]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001dae:	23f2      	movs	r3, #242	; 0xf2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	2201      	movs	r2, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d100      	bne.n	8001dc0 <HAL_UART_CpltCallback+0x18>
 8001dbe:	e287      	b.n	80022d0 <HAL_UART_CpltCallback+0x528>
	{

		Process.Flags.UART_Enable = RESET;
 8001dc0:	4ae7      	ldr	r2, [pc, #924]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001dc2:	23f2      	movs	r3, #242	; 0xf2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	5cd1      	ldrb	r1, [r2, r3]
 8001dc8:	2001      	movs	r0, #1
 8001dca:	4381      	bics	r1, r0
 8001dcc:	54d1      	strb	r1, [r2, r3]

		if (Process.Variables.ReceivedData[1] == Two)			// Milk Water Process Enable
 8001dce:	4ae4      	ldr	r2, [pc, #912]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001dd0:	2394      	movs	r3, #148	; 0x94
 8001dd2:	33ff      	adds	r3, #255	; 0xff
 8001dd4:	5cd3      	ldrb	r3, [r2, r3]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d16a      	bne.n	8001eb0 <HAL_UART_CpltCallback+0x108>
		{

			Process.Variables.Milk.Temperature.RxInitTemp			=	(Process.Variables.ReceivedData[4]<<8)  + Process.Variables.ReceivedData[5];
 8001dda:	4ae1      	ldr	r2, [pc, #900]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001ddc:	23cb      	movs	r3, #203	; 0xcb
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	5cd3      	ldrb	r3, [r2, r3]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	49de      	ldr	r1, [pc, #888]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001de6:	2298      	movs	r2, #152	; 0x98
 8001de8:	32ff      	adds	r2, #255	; 0xff
 8001dea:	5c8a      	ldrb	r2, [r1, r2]
 8001dec:	189b      	adds	r3, r3, r2
 8001dee:	001a      	movs	r2, r3
 8001df0:	4bdb      	ldr	r3, [pc, #876]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001df2:	60da      	str	r2, [r3, #12]
			Process.Variables.MilkWater.Temperature.RxInitTemp		=	(Process.Variables.ReceivedData[6]<<8)  + Process.Variables.ReceivedData[7];
 8001df4:	4ada      	ldr	r2, [pc, #872]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001df6:	23cc      	movs	r3, #204	; 0xcc
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	5cd3      	ldrb	r3, [r2, r3]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	49d8      	ldr	r1, [pc, #864]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e00:	229a      	movs	r2, #154	; 0x9a
 8001e02:	32ff      	adds	r2, #255	; 0xff
 8001e04:	5c8a      	ldrb	r2, [r1, r2]
 8001e06:	189b      	adds	r3, r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	4bd5      	ldr	r3, [pc, #852]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e0c:	22c8      	movs	r2, #200	; 0xc8
 8001e0e:	5099      	str	r1, [r3, r2]

			Process.Variables.Milk.Temperature.RxLowValue			=	(Process.Variables.ReceivedData[8]<<8)  + Process.Variables.ReceivedData[9];
 8001e10:	4ad3      	ldr	r2, [pc, #844]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e12:	23cd      	movs	r3, #205	; 0xcd
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	49d1      	ldr	r1, [pc, #836]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e1c:	229c      	movs	r2, #156	; 0x9c
 8001e1e:	32ff      	adds	r2, #255	; 0xff
 8001e20:	5c8a      	ldrb	r2, [r1, r2]
 8001e22:	189b      	adds	r3, r3, r2
 8001e24:	001a      	movs	r2, r3
 8001e26:	4bce      	ldr	r3, [pc, #824]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e28:	619a      	str	r2, [r3, #24]
			Process.Variables.Milk.Temperature.RxMiddleValue		=	(Process.Variables.ReceivedData[10]<<8) + Process.Variables.ReceivedData[11];
 8001e2a:	4acd      	ldr	r2, [pc, #820]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e2c:	23ce      	movs	r3, #206	; 0xce
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	5cd3      	ldrb	r3, [r2, r3]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	49ca      	ldr	r1, [pc, #808]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e36:	229e      	movs	r2, #158	; 0x9e
 8001e38:	32ff      	adds	r2, #255	; 0xff
 8001e3a:	5c8a      	ldrb	r2, [r1, r2]
 8001e3c:	189b      	adds	r3, r3, r2
 8001e3e:	001a      	movs	r2, r3
 8001e40:	4bc7      	ldr	r3, [pc, #796]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e42:	615a      	str	r2, [r3, #20]
//			Process.Variables.Milk.Temperature.RxHighValue			=	(Process.Variables.ReceivedData[12]<<8) + Process.Variables.ReceivedData[13];

			Process.Variables.MilkWater.Temperature.RxLowValue		=	(Process.Variables.ReceivedData[14]<<8) + Process.Variables.ReceivedData[15];
 8001e44:	4ac6      	ldr	r2, [pc, #792]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e46:	23d0      	movs	r3, #208	; 0xd0
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	5cd3      	ldrb	r3, [r2, r3]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	49c4      	ldr	r1, [pc, #784]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e50:	22a2      	movs	r2, #162	; 0xa2
 8001e52:	32ff      	adds	r2, #255	; 0xff
 8001e54:	5c8a      	ldrb	r2, [r1, r2]
 8001e56:	189b      	adds	r3, r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	4bc1      	ldr	r3, [pc, #772]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e5c:	22c4      	movs	r2, #196	; 0xc4
 8001e5e:	5099      	str	r1, [r3, r2]
			Process.Variables.MilkWater.Temperature.RxMiddleValue	=	(Process.Variables.ReceivedData[16]<<8) + Process.Variables.ReceivedData[17];
 8001e60:	4abf      	ldr	r2, [pc, #764]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e62:	23d1      	movs	r3, #209	; 0xd1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	49bd      	ldr	r1, [pc, #756]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e6c:	22a4      	movs	r2, #164	; 0xa4
 8001e6e:	32ff      	adds	r2, #255	; 0xff
 8001e70:	5c8a      	ldrb	r2, [r1, r2]
 8001e72:	189b      	adds	r3, r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	4bba      	ldr	r3, [pc, #744]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e78:	22c0      	movs	r2, #192	; 0xc0
 8001e7a:	5099      	str	r1, [r3, r2]
			Process.Variables.MilkWater.Temperature.RxHighValue		=	(Process.Variables.ReceivedData[18]<<8) + Process.Variables.ReceivedData[19];
 8001e7c:	4ab8      	ldr	r2, [pc, #736]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e7e:	23d2      	movs	r3, #210	; 0xd2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	5cd3      	ldrb	r3, [r2, r3]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	49b6      	ldr	r1, [pc, #728]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e88:	22a6      	movs	r2, #166	; 0xa6
 8001e8a:	32ff      	adds	r2, #255	; 0xff
 8001e8c:	5c8a      	ldrb	r2, [r1, r2]
 8001e8e:	189b      	adds	r3, r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	4bb3      	ldr	r3, [pc, #716]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e94:	22bc      	movs	r2, #188	; 0xbc
 8001e96:	5099      	str	r1, [r3, r2]

			Process.Flags.MilkWater.ProcessEnable 					=	SET;
 8001e98:	4ab1      	ldr	r2, [pc, #708]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001e9a:	23ea      	movs	r3, #234	; 0xea
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	5cd1      	ldrb	r1, [r2, r3]
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	4301      	orrs	r1, r0
 8001ea4:	54d1      	strb	r1, [r2, r3]

			Process.Flags.MilkWater.ProcessEnable 					=	SET;

#endif

			SendAckowledgement(Two , 0);
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2002      	movs	r0, #2
 8001eaa:	f001 f953 	bl	8003154 <SendAckowledgement>
 8001eae:	e202      	b.n	80022b6 <HAL_UART_CpltCallback+0x50e>
		}


		else if (Process.Variables.ReceivedData[1] == One)		// Water Process Enable
 8001eb0:	4aab      	ldr	r2, [pc, #684]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001eb2:	2394      	movs	r3, #148	; 0x94
 8001eb4:	33ff      	adds	r3, #255	; 0xff
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d135      	bne.n	8001f28 <HAL_UART_CpltCallback+0x180>
		{
			Process.Variables.Water.Temperature.RxValue				=	(Process.Variables.ReceivedData[4]<<8) + Process.Variables.ReceivedData[5];
 8001ebc:	4aa8      	ldr	r2, [pc, #672]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001ebe:	23cb      	movs	r3, #203	; 0xcb
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	49a6      	ldr	r1, [pc, #664]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001ec8:	2298      	movs	r2, #152	; 0x98
 8001eca:	32ff      	adds	r2, #255	; 0xff
 8001ecc:	5c8a      	ldrb	r2, [r1, r2]
 8001ece:	189b      	adds	r3, r3, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	4ba3      	ldr	r3, [pc, #652]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001ed4:	22fc      	movs	r2, #252	; 0xfc
 8001ed6:	5099      	str	r1, [r3, r2]

			if	(	Process.Variables.ReceivedData[10] == One	)
 8001ed8:	4aa1      	ldr	r2, [pc, #644]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001eda:	23ce      	movs	r3, #206	; 0xce
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d115      	bne.n	8001f10 <HAL_UART_CpltCallback+0x168>
			{
				Process.Variables.Water.Temperature.RxMilkWaterValue	=	(Process.Variables.ReceivedData[11]<<8) + Process.Variables.ReceivedData[12];
 8001ee4:	4a9e      	ldr	r2, [pc, #632]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001ee6:	239e      	movs	r3, #158	; 0x9e
 8001ee8:	33ff      	adds	r3, #255	; 0xff
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	499c      	ldr	r1, [pc, #624]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001ef0:	22cf      	movs	r2, #207	; 0xcf
 8001ef2:	0052      	lsls	r2, r2, #1
 8001ef4:	5c8a      	ldrb	r2, [r1, r2]
 8001ef6:	189b      	adds	r3, r3, r2
 8001ef8:	0019      	movs	r1, r3
 8001efa:	4a99      	ldr	r2, [pc, #612]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	50d1      	str	r1, [r2, r3]
				Process.Flags.Water.ProcessEnableMilkWater			=	SET;
 8001f02:	4a97      	ldr	r2, [pc, #604]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001f04:	23ec      	movs	r3, #236	; 0xec
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	5cd1      	ldrb	r1, [r2, r3]
 8001f0a:	2004      	movs	r0, #4
 8001f0c:	4301      	orrs	r1, r0
 8001f0e:	54d1      	strb	r1, [r2, r3]
			}

			Process.Flags.Water.ProcessEnable						=	SET;
 8001f10:	4a93      	ldr	r2, [pc, #588]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001f12:	23ec      	movs	r3, #236	; 0xec
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	5cd1      	ldrb	r1, [r2, r3]
 8001f18:	2002      	movs	r0, #2
 8001f1a:	4301      	orrs	r1, r0
 8001f1c:	54d1      	strb	r1, [r2, r3]

			SendAckowledgement(One, 0);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2001      	movs	r0, #1
 8001f22:	f001 f917 	bl	8003154 <SendAckowledgement>
 8001f26:	e1c6      	b.n	80022b6 <HAL_UART_CpltCallback+0x50e>
		}


		else if (Process.Variables.ReceivedData[1] == Three)	// Cleaning Process Enable
 8001f28:	4a8d      	ldr	r2, [pc, #564]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001f2a:	2394      	movs	r3, #148	; 0x94
 8001f2c:	33ff      	adds	r3, #255	; 0xff
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d000      	beq.n	8001f36 <HAL_UART_CpltCallback+0x18e>
 8001f34:	e179      	b.n	800222a <HAL_UART_CpltCallback+0x482>
		{
			//			Process.Flags.Water.ProcessEnable						=	RESET;

			if (not(Process.Flags.Cleaning.ProcessBusy))
 8001f36:	4a8a      	ldr	r2, [pc, #552]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001f38:	23ee      	movs	r3, #238	; 0xee
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	4013      	ands	r3, r2
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d12d      	bne.n	8001fa4 <HAL_UART_CpltCallback+0x1fc>
			{
				Process.Flags.Cleaning.ProcessBusy				=	SET;
 8001f48:	4a85      	ldr	r2, [pc, #532]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001f4a:	23ee      	movs	r3, #238	; 0xee
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	5cd1      	ldrb	r1, [r2, r3]
 8001f50:	2004      	movs	r0, #4
 8001f52:	4301      	orrs	r1, r0
 8001f54:	54d1      	strb	r1, [r2, r3]
				Process.Flags.Cleaning.ProcessOngoing_Pril		=	RESET;
 8001f56:	4a82      	ldr	r2, [pc, #520]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001f58:	23ee      	movs	r3, #238	; 0xee
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	5cd1      	ldrb	r1, [r2, r3]
 8001f5e:	2038      	movs	r0, #56	; 0x38
 8001f60:	4381      	bics	r1, r0
 8001f62:	54d1      	strb	r1, [r2, r3]
				Process.Flags.Cleaning.ProcessOngoing_Water		=	RESET;
 8001f64:	4a7e      	ldr	r2, [pc, #504]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001f66:	23ee      	movs	r3, #238	; 0xee
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	5ad1      	ldrh	r1, [r2, r3]
 8001f6c:	487d      	ldr	r0, [pc, #500]	; (8002164 <HAL_UART_CpltCallback+0x3bc>)
 8001f6e:	4001      	ands	r1, r0
 8001f70:	52d1      	strh	r1, [r2, r3]
				Process.Variables.Cleaning.ProcessExeCounts++;					// counting the cycle executing
 8001f72:	4a7b      	ldr	r2, [pc, #492]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001f74:	239a      	movs	r3, #154	; 0x9a
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	58d3      	ldr	r3, [r2, r3]
 8001f7a:	1c59      	adds	r1, r3, #1
 8001f7c:	4a78      	ldr	r2, [pc, #480]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001f7e:	239a      	movs	r3, #154	; 0x9a
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	50d1      	str	r1, [r2, r3]

				Process.Flags.Cleaning.ProcessCompleted_Pril	= 	RESET;
 8001f84:	4a76      	ldr	r2, [pc, #472]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001f86:	23ee      	movs	r3, #238	; 0xee
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	18d3      	adds	r3, r2, r3
 8001f8c:	785a      	ldrb	r2, [r3, #1]
 8001f8e:	2102      	movs	r1, #2
 8001f90:	438a      	bics	r2, r1
 8001f92:	705a      	strb	r2, [r3, #1]
				Process.Flags.Cleaning.ProcessCompleted_Water	= 	RESET;
 8001f94:	4a72      	ldr	r2, [pc, #456]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001f96:	23ee      	movs	r3, #238	; 0xee
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	18d3      	adds	r3, r2, r3
 8001f9c:	785a      	ldrb	r2, [r3, #1]
 8001f9e:	2104      	movs	r1, #4
 8001fa0:	438a      	bics	r2, r1
 8001fa2:	705a      	strb	r2, [r3, #1]
			}


			switch (Process.Variables.ReceivedData[4])
 8001fa4:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001fa6:	23cb      	movs	r3, #203	; 0xcb
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d003      	beq.n	8001fb8 <HAL_UART_CpltCallback+0x210>
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d100      	bne.n	8001fb6 <HAL_UART_CpltCallback+0x20e>
 8001fb4:	e095      	b.n	80020e2 <HAL_UART_CpltCallback+0x33a>
					break;
				}
			}

			default:
				break;
 8001fb6:	e117      	b.n	80021e8 <HAL_UART_CpltCallback+0x440>
				Process.Variables.Cleaning.InitProcess 								=	PrilCleaning;
 8001fb8:	4a69      	ldr	r2, [pc, #420]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001fba:	2398      	movs	r3, #152	; 0x98
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	50d1      	str	r1, [r2, r3]
				Process.Variables.Cleaning.ProcessExecution							=	CheckForLevel;
 8001fc2:	4a67      	ldr	r2, [pc, #412]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001fc4:	239c      	movs	r3, #156	; 0x9c
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	2103      	movs	r1, #3
 8001fca:	50d1      	str	r1, [r2, r3]
				switch(Process.Variables.ReceivedData[5])
 8001fcc:	4a64      	ldr	r2, [pc, #400]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001fce:	2398      	movs	r3, #152	; 0x98
 8001fd0:	33ff      	adds	r3, #255	; 0xff
 8001fd2:	5cd3      	ldrb	r3, [r2, r3]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d002      	beq.n	8001fde <HAL_UART_CpltCallback+0x236>
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d041      	beq.n	8002060 <HAL_UART_CpltCallback+0x2b8>
					break;
 8001fdc:	e080      	b.n	80020e0 <HAL_UART_CpltCallback+0x338>
					Process.Variables.Cleaning.RxLevelUp_Pril						=	((Process.Variables.ReceivedData[6]<<8)  + Process.Variables.ReceivedData[7])  * TimerMultiplicationFactor;				// How much pril level goes up
 8001fde:	4a60      	ldr	r2, [pc, #384]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001fe0:	23cc      	movs	r3, #204	; 0xcc
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	5cd3      	ldrb	r3, [r2, r3]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	495d      	ldr	r1, [pc, #372]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8001fea:	229a      	movs	r2, #154	; 0x9a
 8001fec:	32ff      	adds	r2, #255	; 0xff
 8001fee:	5c8a      	ldrb	r2, [r1, r2]
 8001ff0:	189b      	adds	r3, r3, r2
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	189b      	adds	r3, r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	4a58      	ldr	r2, [pc, #352]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8002000:	23b0      	movs	r3, #176	; 0xb0
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	50d1      	str	r1, [r2, r3]
					Process.Variables.Cleaning.RxStirrerOnTimePrilFirstCycle		=	((Process.Variables.ReceivedData[10]<<8) + Process.Variables.ReceivedData[11]) * TimerMultiplicationFactor * Minutes;	// How much time Pril Stirrer rotate in first cycle in (in Mins)
 8002006:	4a56      	ldr	r2, [pc, #344]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8002008:	23ce      	movs	r3, #206	; 0xce
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	5cd3      	ldrb	r3, [r2, r3]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	4953      	ldr	r1, [pc, #332]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8002012:	229e      	movs	r2, #158	; 0x9e
 8002014:	32ff      	adds	r2, #255	; 0xff
 8002016:	5c8a      	ldrb	r2, [r1, r2]
 8002018:	189b      	adds	r3, r3, r2
 800201a:	001a      	movs	r2, r3
 800201c:	0013      	movs	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	189b      	adds	r3, r3, r2
 8002022:	011a      	lsls	r2, r3, #4
 8002024:	1ad2      	subs	r2, r2, r3
 8002026:	00d3      	lsls	r3, r2, #3
 8002028:	001a      	movs	r2, r3
 800202a:	0011      	movs	r1, r2
 800202c:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 800202e:	23bc      	movs	r3, #188	; 0xbc
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	50d1      	str	r1, [r2, r3]
					Process.Variables.Cleaning.RxTotalCycles						= 	((Process.Variables.ReceivedData[12]<<8) + Process.Variables.ReceivedData[13]);	// Total Number of Cycles needs to be processed
 8002034:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8002036:	23a0      	movs	r3, #160	; 0xa0
 8002038:	33ff      	adds	r3, #255	; 0xff
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	1c1a      	adds	r2, r3, #0
 800203e:	2303      	movs	r3, #3
 8002040:	4013      	ands	r3, r2
 8002042:	b2d9      	uxtb	r1, r3
 8002044:	4a46      	ldr	r2, [pc, #280]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8002046:	23c2      	movs	r3, #194	; 0xc2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2003      	movs	r0, #3
 800204c:	4001      	ands	r1, r0
 800204e:	000c      	movs	r4, r1
 8002050:	5cd1      	ldrb	r1, [r2, r3]
 8002052:	2003      	movs	r0, #3
 8002054:	4381      	bics	r1, r0
 8002056:	1c08      	adds	r0, r1, #0
 8002058:	1c21      	adds	r1, r4, #0
 800205a:	4301      	orrs	r1, r0
 800205c:	54d1      	strb	r1, [r2, r3]
					break;
 800205e:	e03f      	b.n	80020e0 <HAL_UART_CpltCallback+0x338>
					Process.Variables.Cleaning.RxLevelUp_Pril						=	((Process.Variables.ReceivedData[6]<<8)  + Process.Variables.ReceivedData[7])  * TimerMultiplicationFactor;;				// How much pril level goes up
 8002060:	4a3f      	ldr	r2, [pc, #252]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8002062:	23cc      	movs	r3, #204	; 0xcc
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	5cd3      	ldrb	r3, [r2, r3]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	493d      	ldr	r1, [pc, #244]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 800206c:	229a      	movs	r2, #154	; 0x9a
 800206e:	32ff      	adds	r2, #255	; 0xff
 8002070:	5c8a      	ldrb	r2, [r1, r2]
 8002072:	189b      	adds	r3, r3, r2
 8002074:	001a      	movs	r2, r3
 8002076:	0013      	movs	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	189b      	adds	r3, r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	0019      	movs	r1, r3
 8002080:	4a37      	ldr	r2, [pc, #220]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8002082:	23b0      	movs	r3, #176	; 0xb0
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	50d1      	str	r1, [r2, r3]
					Process.Variables.Cleaning.RxTimePrilDrainOut					=	((Process.Variables.ReceivedData[8]<<8)  + Process.Variables.ReceivedData[9])  * TimerMultiplicationFactor;				// How much pril level goes out in drain out
 8002088:	4a35      	ldr	r2, [pc, #212]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 800208a:	23cd      	movs	r3, #205	; 0xcd
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	4933      	ldr	r1, [pc, #204]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8002094:	229c      	movs	r2, #156	; 0x9c
 8002096:	32ff      	adds	r2, #255	; 0xff
 8002098:	5c8a      	ldrb	r2, [r1, r2]
 800209a:	189b      	adds	r3, r3, r2
 800209c:	001a      	movs	r2, r3
 800209e:	0013      	movs	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	189b      	adds	r3, r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	0019      	movs	r1, r3
 80020a8:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 80020aa:	23b6      	movs	r3, #182	; 0xb6
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	50d1      	str	r1, [r2, r3]
					Process.Variables.Cleaning.RxStirrerOnTimePrilSecondCycle		=	((Process.Variables.ReceivedData[12]<<8) + Process.Variables.ReceivedData[13]) * TimerMultiplicationFactor * Minutes;	// How much time Pril Stirrer rotate in second cycle (in Mins)
 80020b0:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 80020b2:	23cf      	movs	r3, #207	; 0xcf
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	4929      	ldr	r1, [pc, #164]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 80020bc:	22a0      	movs	r2, #160	; 0xa0
 80020be:	32ff      	adds	r2, #255	; 0xff
 80020c0:	5c8a      	ldrb	r2, [r1, r2]
 80020c2:	189b      	adds	r3, r3, r2
 80020c4:	001a      	movs	r2, r3
 80020c6:	0013      	movs	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	189b      	adds	r3, r3, r2
 80020cc:	011a      	lsls	r2, r3, #4
 80020ce:	1ad2      	subs	r2, r2, r3
 80020d0:	00d3      	lsls	r3, r2, #3
 80020d2:	001a      	movs	r2, r3
 80020d4:	0011      	movs	r1, r2
 80020d6:	4a22      	ldr	r2, [pc, #136]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 80020d8:	23be      	movs	r3, #190	; 0xbe
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	50d1      	str	r1, [r2, r3]
					break;
 80020de:	46c0      	nop			; (mov r8, r8)
				break;
 80020e0:	e083      	b.n	80021ea <HAL_UART_CpltCallback+0x442>
				Process.Variables.Cleaning.InitProcess 								=	WaterCleaning;
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 80020e4:	2398      	movs	r3, #152	; 0x98
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2102      	movs	r1, #2
 80020ea:	50d1      	str	r1, [r2, r3]
				Process.Variables.Cleaning.ProcessExecution							=	CheckForLevel;
 80020ec:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 80020ee:	239c      	movs	r3, #156	; 0x9c
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2103      	movs	r1, #3
 80020f4:	50d1      	str	r1, [r2, r3]
				switch(Process.Variables.ReceivedData[5])
 80020f6:	4a1a      	ldr	r2, [pc, #104]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 80020f8:	2398      	movs	r3, #152	; 0x98
 80020fa:	33ff      	adds	r3, #255	; 0xff
 80020fc:	5cd3      	ldrb	r3, [r2, r3]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d002      	beq.n	8002108 <HAL_UART_CpltCallback+0x360>
 8002102:	2b02      	cmp	r3, #2
 8002104:	d030      	beq.n	8002168 <HAL_UART_CpltCallback+0x3c0>
					break;
 8002106:	e06f      	b.n	80021e8 <HAL_UART_CpltCallback+0x440>
					Process.Variables.Cleaning.RxLevelUp_Water						=	((Process.Variables.ReceivedData[6]<<8)  + Process.Variables.ReceivedData[7])  * TimerMultiplicationFactor;				// How much water level goes up
 8002108:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 800210a:	23cc      	movs	r3, #204	; 0xcc
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	4913      	ldr	r1, [pc, #76]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8002114:	229a      	movs	r2, #154	; 0x9a
 8002116:	32ff      	adds	r2, #255	; 0xff
 8002118:	5c8a      	ldrb	r2, [r1, r2]
 800211a:	189b      	adds	r3, r3, r2
 800211c:	001a      	movs	r2, r3
 800211e:	0013      	movs	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	189b      	adds	r3, r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	0019      	movs	r1, r3
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 800212a:	23b2      	movs	r3, #178	; 0xb2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	50d1      	str	r1, [r2, r3]
					Process.Variables.Cleaning.RxStirrerOnTimeWaterCycle			=	((Process.Variables.ReceivedData[8]<<8)	 + Process.Variables.ReceivedData[9])  * TimerMultiplicationFactor * Minutes;	// How much time Water Stirrer rotate (in Mins)
 8002130:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8002132:	23cd      	movs	r3, #205	; 0xcd
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	4909      	ldr	r1, [pc, #36]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 800213c:	229c      	movs	r2, #156	; 0x9c
 800213e:	32ff      	adds	r2, #255	; 0xff
 8002140:	5c8a      	ldrb	r2, [r1, r2]
 8002142:	189b      	adds	r3, r3, r2
 8002144:	001a      	movs	r2, r3
 8002146:	0013      	movs	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	189b      	adds	r3, r3, r2
 800214c:	011a      	lsls	r2, r3, #4
 800214e:	1ad2      	subs	r2, r2, r3
 8002150:	00d3      	lsls	r3, r2, #3
 8002152:	001a      	movs	r2, r3
 8002154:	0011      	movs	r1, r2
 8002156:	4a02      	ldr	r2, [pc, #8]	; (8002160 <HAL_UART_CpltCallback+0x3b8>)
 8002158:	23c0      	movs	r3, #192	; 0xc0
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	50d1      	str	r1, [r2, r3]
					break;
 800215e:	e043      	b.n	80021e8 <HAL_UART_CpltCallback+0x440>
 8002160:	20000120 	.word	0x20000120
 8002164:	fffffe3f 	.word	0xfffffe3f
					Process.Variables.Cleaning.RxLevelUp_Water						=	((Process.Variables.ReceivedData[6]<<8)  + Process.Variables.ReceivedData[7])  * TimerMultiplicationFactor;				// How much water level goes up
 8002168:	4a5b      	ldr	r2, [pc, #364]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 800216a:	23cc      	movs	r3, #204	; 0xcc
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	4959      	ldr	r1, [pc, #356]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 8002174:	229a      	movs	r2, #154	; 0x9a
 8002176:	32ff      	adds	r2, #255	; 0xff
 8002178:	5c8a      	ldrb	r2, [r1, r2]
 800217a:	189b      	adds	r3, r3, r2
 800217c:	001a      	movs	r2, r3
 800217e:	0013      	movs	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	189b      	adds	r3, r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	0019      	movs	r1, r3
 8002188:	4a53      	ldr	r2, [pc, #332]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 800218a:	23b2      	movs	r3, #178	; 0xb2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	50d1      	str	r1, [r2, r3]
					Process.Variables.Cleaning.RxTimeWaterDrainOut					=	((Process.Variables.ReceivedData[8]<<8)  + Process.Variables.ReceivedData[9])  * TimerMultiplicationFactor;				// How much water level goes out in drain out
 8002190:	4a51      	ldr	r2, [pc, #324]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 8002192:	23cd      	movs	r3, #205	; 0xcd
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	494f      	ldr	r1, [pc, #316]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 800219c:	229c      	movs	r2, #156	; 0x9c
 800219e:	32ff      	adds	r2, #255	; 0xff
 80021a0:	5c8a      	ldrb	r2, [r1, r2]
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	001a      	movs	r2, r3
 80021a6:	0013      	movs	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	0019      	movs	r1, r3
 80021b0:	4a49      	ldr	r2, [pc, #292]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 80021b2:	23b8      	movs	r3, #184	; 0xb8
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	50d1      	str	r1, [r2, r3]
					Process.Variables.Cleaning.RxStirrerOnTimeWaterCycle			=	((Process.Variables.ReceivedData[10]<<8) + Process.Variables.ReceivedData[11]) * TimerMultiplicationFactor * Minutes;	// How much time Water Stirrer rotate (in Mins)
 80021b8:	4a47      	ldr	r2, [pc, #284]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 80021ba:	23ce      	movs	r3, #206	; 0xce
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	4945      	ldr	r1, [pc, #276]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 80021c4:	229e      	movs	r2, #158	; 0x9e
 80021c6:	32ff      	adds	r2, #255	; 0xff
 80021c8:	5c8a      	ldrb	r2, [r1, r2]
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	001a      	movs	r2, r3
 80021ce:	0013      	movs	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	189b      	adds	r3, r3, r2
 80021d4:	011a      	lsls	r2, r3, #4
 80021d6:	1ad2      	subs	r2, r2, r3
 80021d8:	00d3      	lsls	r3, r2, #3
 80021da:	001a      	movs	r2, r3
 80021dc:	0011      	movs	r1, r2
 80021de:	4a3e      	ldr	r2, [pc, #248]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 80021e0:	23c0      	movs	r3, #192	; 0xc0
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	50d1      	str	r1, [r2, r3]
					break;
 80021e6:	46c0      	nop			; (mov r8, r8)
				break;
 80021e8:	46c0      	nop			; (mov r8, r8)

			}

			Process.Flags.Cleaning.ProcessEnable					=	SET;
 80021ea:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 80021ec:	23ee      	movs	r3, #238	; 0xee
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	5cd1      	ldrb	r1, [r2, r3]
 80021f2:	2002      	movs	r0, #2
 80021f4:	4301      	orrs	r1, r0
 80021f6:	54d1      	strb	r1, [r2, r3]
			Process.Variables.InitProcess							= 	Cleaning;
 80021f8:	4a37      	ldr	r2, [pc, #220]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 80021fa:	23c8      	movs	r3, #200	; 0xc8
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2104      	movs	r1, #4
 8002200:	54d1      	strb	r1, [r2, r3]

			Process.Flags.Water.ProcessEnable						=	SET;
 8002202:	4a35      	ldr	r2, [pc, #212]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 8002204:	23ec      	movs	r3, #236	; 0xec
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	5cd1      	ldrb	r1, [r2, r3]
 800220a:	2002      	movs	r0, #2
 800220c:	4301      	orrs	r1, r0
 800220e:	54d1      	strb	r1, [r2, r3]
			Process.Variables.Water.Temperature.RxValue				=	90;
 8002210:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 8002212:	22fc      	movs	r2, #252	; 0xfc
 8002214:	215a      	movs	r1, #90	; 0x5a
 8002216:	5099      	str	r1, [r3, r2]

			SendAckowledgement(Three, Process.Variables.ReceivedData[4]);
 8002218:	4a2f      	ldr	r2, [pc, #188]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 800221a:	23cb      	movs	r3, #203	; 0xcb
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	0019      	movs	r1, r3
 8002222:	2003      	movs	r0, #3
 8002224:	f000 ff96 	bl	8003154 <SendAckowledgement>
 8002228:	e045      	b.n	80022b6 <HAL_UART_CpltCallback+0x50e>



		}

		else if (Process.Variables.ReceivedData[1] == Four)		// Hot Water Process Enable
 800222a:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 800222c:	2394      	movs	r3, #148	; 0x94
 800222e:	33ff      	adds	r3, #255	; 0xff
 8002230:	5cd3      	ldrb	r3, [r2, r3]
 8002232:	2b04      	cmp	r3, #4
 8002234:	d121      	bne.n	800227a <HAL_UART_CpltCallback+0x4d2>
		{
			Process.Variables.HotWater.RxOnTime			=	((Process.Variables.ReceivedData[4]<<8) + Process.Variables.ReceivedData[5]);
 8002236:	4a28      	ldr	r2, [pc, #160]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 8002238:	23cb      	movs	r3, #203	; 0xcb
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	4925      	ldr	r1, [pc, #148]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 8002242:	2298      	movs	r2, #152	; 0x98
 8002244:	32ff      	adds	r2, #255	; 0xff
 8002246:	5c8a      	ldrb	r2, [r1, r2]
 8002248:	189b      	adds	r3, r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 800224e:	23c6      	movs	r3, #198	; 0xc6
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	50d1      	str	r1, [r2, r3]
			Process.Flags.HotWater.ProcessEnable		=	SET;
 8002254:	4a20      	ldr	r2, [pc, #128]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 8002256:	23f0      	movs	r3, #240	; 0xf0
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	5cd1      	ldrb	r1, [r2, r3]
 800225c:	2002      	movs	r0, #2
 800225e:	4301      	orrs	r1, r0
 8002260:	54d1      	strb	r1, [r2, r3]
			Process.Flags.HotWater.ProcessCompleted		=	RESET;
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 8002264:	23f0      	movs	r3, #240	; 0xf0
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	5cd1      	ldrb	r1, [r2, r3]
 800226a:	2004      	movs	r0, #4
 800226c:	4381      	bics	r1, r0
 800226e:	54d1      	strb	r1, [r2, r3]

			SendAckowledgement(Four, 0);
 8002270:	2100      	movs	r1, #0
 8002272:	2004      	movs	r0, #4
 8002274:	f000 ff6e 	bl	8003154 <SendAckowledgement>
 8002278:	e01d      	b.n	80022b6 <HAL_UART_CpltCallback+0x50e>
		}

		else if (	(Process.Variables.ReceivedData[1] 	== StatusID)
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 800227c:	2394      	movs	r3, #148	; 0x94
 800227e:	33ff      	adds	r3, #255	; 0xff
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	2b05      	cmp	r3, #5
 8002284:	d005      	beq.n	8002292 <HAL_UART_CpltCallback+0x4ea>
				or (Process.Variables.ReceivedData[1] 	== CleaningStatusID)	)
 8002286:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 8002288:	2394      	movs	r3, #148	; 0x94
 800228a:	33ff      	adds	r3, #255	; 0xff
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	2b06      	cmp	r3, #6
 8002290:	d102      	bne.n	8002298 <HAL_UART_CpltCallback+0x4f0>
		{
			SendStatus();
 8002292:	f000 ff95 	bl	80031c0 <SendStatus>
 8002296:	e00e      	b.n	80022b6 <HAL_UART_CpltCallback+0x50e>
		}


		else if (Process.Variables.ReceivedData[1] == StopCommand)
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 800229a:	2394      	movs	r3, #148	; 0x94
 800229c:	33ff      	adds	r3, #255	; 0xff
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	2b07      	cmp	r3, #7
 80022a2:	d108      	bne.n	80022b6 <HAL_UART_CpltCallback+0x50e>
		{
			SendStatus();
 80022a4:	f000 ff8c 	bl	80031c0 <SendStatus>
			Process.Flags.StopInitiated = SET;
 80022a8:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <HAL_UART_CpltCallback+0x530>)
 80022aa:	23f6      	movs	r3, #246	; 0xf6
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	5cd1      	ldrb	r1, [r2, r3]
 80022b0:	2001      	movs	r0, #1
 80022b2:	4301      	orrs	r1, r0
 80022b4:	54d1      	strb	r1, [r2, r3]
		}


		HAL_GPIO_WritePin(USART_DE_GPIO_Port, USART_DE_Pin, RESET);
 80022b6:	2390      	movs	r3, #144	; 0x90
 80022b8:	05db      	lsls	r3, r3, #23
 80022ba:	2200      	movs	r2, #0
 80022bc:	2102      	movs	r1, #2
 80022be:	0018      	movs	r0, r3
 80022c0:	f002 fb7f 	bl	80049c2 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart2, Process.Variables.ReceivedData, sizeof(Process.Variables.ReceivedData));
 80022c4:	4905      	ldr	r1, [pc, #20]	; (80022dc <HAL_UART_CpltCallback+0x534>)
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_UART_CpltCallback+0x538>)
 80022c8:	2240      	movs	r2, #64	; 0x40
 80022ca:	0018      	movs	r0, r3
 80022cc:	f003 ff5a 	bl	8006184 <HAL_UART_Receive_IT>
	}
}
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bdb0      	pop	{r4, r5, r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	20000120 	.word	0x20000120
 80022dc:	200002b2 	.word	0x200002b2
 80022e0:	20000354 	.word	0x20000354

080022e4 <HAL_TIM_PeriodElapsedCallback>:
// ********************************************************************************************* //

int Val = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

	// ********************************************************************************************* //
	// **********************  Fill More Than the Required Level  ****************************** //
	// ********************************************************************************************* //

	if (Process.Flags.Cleaning.TimerEnable_Pril)
 80022ec:	4ac6      	ldr	r2, [pc, #792]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80022ee:	23de      	movs	r3, #222	; 0xde
 80022f0:	33ff      	adds	r3, #255	; 0xff
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	2208      	movs	r2, #8
 80022f6:	4013      	ands	r3, r2
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		Process.Variables.Cleaning.TimerCounts_MotorLevelUp++;
 80022fe:	4ac2      	ldr	r2, [pc, #776]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002300:	23a0      	movs	r3, #160	; 0xa0
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	58d3      	ldr	r3, [r2, r3]
 8002306:	1c59      	adds	r1, r3, #1
 8002308:	4abf      	ldr	r2, [pc, #764]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800230a:	23a0      	movs	r3, #160	; 0xa0
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	50d1      	str	r1, [r2, r3]
 8002310:	e181      	b.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>
	}


	else if (Process.Flags.Cleaning.TimerEnable_Water)
 8002312:	4abd      	ldr	r2, [pc, #756]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002314:	23de      	movs	r3, #222	; 0xde
 8002316:	33ff      	adds	r3, #255	; 0xff
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	227f      	movs	r2, #127	; 0x7f
 800231c:	4393      	bics	r3, r2
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		Process.Variables.Cleaning.TimerCounts_MotorLevelUp++;
 8002324:	4ab8      	ldr	r2, [pc, #736]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002326:	23a0      	movs	r3, #160	; 0xa0
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	58d3      	ldr	r3, [r2, r3]
 800232c:	1c59      	adds	r1, r3, #1
 800232e:	4ab6      	ldr	r2, [pc, #728]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002330:	23a0      	movs	r3, #160	; 0xa0
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	50d1      	str	r1, [r2, r3]
 8002336:	e16e      	b.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>

	// ********************************************************************************************* //
	// **********************  Stirrer Motor Enable  *************************************** //
	// ********************************************************************************************* //

	else if (Process.Flags.Cleaning.TimerEnable_StirrerPril)
 8002338:	4ab3      	ldr	r2, [pc, #716]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800233a:	23ef      	movs	r3, #239	; 0xef
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	2220      	movs	r2, #32
 8002342:	4013      	ands	r3, r2
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d100      	bne.n	800234c <HAL_TIM_PeriodElapsedCallback+0x68>
 800234a:	e079      	b.n	8002440 <HAL_TIM_PeriodElapsedCallback+0x15c>
	{

		if	( (Process.Variables.Cleaning.TimerCounts_StirrerPril % (2 * TimerMultiplicationFactor * Minutes))	==  RESET	)		// for every even minutes -> Stirrer Toggles
 800234c:	4aae      	ldr	r2, [pc, #696]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800234e:	23a8      	movs	r3, #168	; 0xa8
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	58d2      	ldr	r2, [r2, r3]
 8002354:	2396      	movs	r3, #150	; 0x96
 8002356:	00d9      	lsls	r1, r3, #3
 8002358:	0010      	movs	r0, r2
 800235a:	f7fd ff5b 	bl	8000214 <__aeabi_uidivmod>
 800235e:	1e0b      	subs	r3, r1, #0
 8002360:	d108      	bne.n	8002374 <HAL_TIM_PeriodElapsedCallback+0x90>
		{
			Process.Flags.Cleaning.StirrerDirectionToggle	= 	SET;
 8002362:	4aa9      	ldr	r2, [pc, #676]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002364:	23ee      	movs	r3, #238	; 0xee
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	18d3      	adds	r3, r2, r3
 800236a:	789a      	ldrb	r2, [r3, #2]
 800236c:	2110      	movs	r1, #16
 800236e:	430a      	orrs	r2, r1
 8002370:	709a      	strb	r2, [r3, #2]
 8002372:	e012      	b.n	800239a <HAL_TIM_PeriodElapsedCallback+0xb6>
		}

		else if (	(Process.Variables.Cleaning.TimerCounts_StirrerPril % (1 * TimerMultiplicationFactor * Minutes))	==  RESET)		// in every odd minutes -> Stirrer Same Direction
 8002374:	4aa4      	ldr	r2, [pc, #656]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002376:	23a8      	movs	r3, #168	; 0xa8
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	58d2      	ldr	r2, [r2, r3]
 800237c:	2396      	movs	r3, #150	; 0x96
 800237e:	0099      	lsls	r1, r3, #2
 8002380:	0010      	movs	r0, r2
 8002382:	f7fd ff47 	bl	8000214 <__aeabi_uidivmod>
 8002386:	1e0b      	subs	r3, r1, #0
 8002388:	d107      	bne.n	800239a <HAL_TIM_PeriodElapsedCallback+0xb6>
		{
			Process.Flags.Cleaning.StirrerDirectionToggle	= 	RESET;
 800238a:	4a9f      	ldr	r2, [pc, #636]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800238c:	23ee      	movs	r3, #238	; 0xee
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	18d3      	adds	r3, r2, r3
 8002392:	789a      	ldrb	r2, [r3, #2]
 8002394:	2110      	movs	r1, #16
 8002396:	438a      	bics	r2, r1
 8002398:	709a      	strb	r2, [r3, #2]
		}


		Process.Variables.Cleaning.TimerCounts_StirrerPril++;
 800239a:	4a9b      	ldr	r2, [pc, #620]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800239c:	23a8      	movs	r3, #168	; 0xa8
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	58d3      	ldr	r3, [r2, r3]
 80023a2:	1c59      	adds	r1, r3, #1
 80023a4:	4a98      	ldr	r2, [pc, #608]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80023a6:	23a8      	movs	r3, #168	; 0xa8
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	50d1      	str	r1, [r2, r3]
		//		Process.Variables.Cleaning.TimerCounts_StirrerToggling = 2 * TimerMultiplicationFactor;

		switch(Process.Flags.Cleaning.StirrerDirectionToggle)
 80023ac:	4a96      	ldr	r2, [pc, #600]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80023ae:	23ef      	movs	r3, #239	; 0xef
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	06db      	lsls	r3, r3, #27
 80023b6:	0fdb      	lsrs	r3, r3, #31
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d03d      	beq.n	800243a <HAL_TIM_PeriodElapsedCallback+0x156>
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d000      	beq.n	80023c4 <HAL_TIM_PeriodElapsedCallback+0xe0>
			Motor_Stirrer_AntiClkwise();
			break;
		}

		default:
			break;
 80023c2:	e128      	b.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>
			counts++;
 80023c4:	4b91      	ldr	r3, [pc, #580]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	4b90      	ldr	r3, [pc, #576]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 80023cc:	601a      	str	r2, [r3, #0]
			if (	(counts > 0) 		and	(counts <= 20)	)
 80023ce:	4b8f      	ldr	r3, [pc, #572]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	dd06      	ble.n	80023e4 <HAL_TIM_PeriodElapsedCallback+0x100>
 80023d6:	4b8d      	ldr	r3, [pc, #564]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b14      	cmp	r3, #20
 80023dc:	dc02      	bgt.n	80023e4 <HAL_TIM_PeriodElapsedCallback+0x100>
				Motor_Stirrer_Clkwise();
 80023de:	f001 f8fd 	bl	80035dc <Motor_Stirrer_Clkwise>
 80023e2:	e029      	b.n	8002438 <HAL_TIM_PeriodElapsedCallback+0x154>
			else if ((	counts > 20) 	and (counts <= 30)	)
 80023e4:	4b89      	ldr	r3, [pc, #548]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b14      	cmp	r3, #20
 80023ea:	dd06      	ble.n	80023fa <HAL_TIM_PeriodElapsedCallback+0x116>
 80023ec:	4b87      	ldr	r3, [pc, #540]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b1e      	cmp	r3, #30
 80023f2:	dc02      	bgt.n	80023fa <HAL_TIM_PeriodElapsedCallback+0x116>
				Motor_Stirrer_Stop();
 80023f4:	f001 f91a 	bl	800362c <Motor_Stirrer_Stop>
 80023f8:	e01e      	b.n	8002438 <HAL_TIM_PeriodElapsedCallback+0x154>
			else if ((	counts > 30) 	and (counts <= 50)	)
 80023fa:	4b84      	ldr	r3, [pc, #528]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b1e      	cmp	r3, #30
 8002400:	dd06      	ble.n	8002410 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8002402:	4b82      	ldr	r3, [pc, #520]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b32      	cmp	r3, #50	; 0x32
 8002408:	dc02      	bgt.n	8002410 <HAL_TIM_PeriodElapsedCallback+0x12c>
				Motor_Stirrer_AntiClkwise();
 800240a:	f001 f8fb 	bl	8003604 <Motor_Stirrer_AntiClkwise>
 800240e:	e013      	b.n	8002438 <HAL_TIM_PeriodElapsedCallback+0x154>
			else if ((	counts > 50) 	and (counts <= 60)	)
 8002410:	4b7e      	ldr	r3, [pc, #504]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b32      	cmp	r3, #50	; 0x32
 8002416:	dd06      	ble.n	8002426 <HAL_TIM_PeriodElapsedCallback+0x142>
 8002418:	4b7c      	ldr	r3, [pc, #496]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b3c      	cmp	r3, #60	; 0x3c
 800241e:	dc02      	bgt.n	8002426 <HAL_TIM_PeriodElapsedCallback+0x142>
				Motor_Stirrer_Stop();
 8002420:	f001 f904 	bl	800362c <Motor_Stirrer_Stop>
 8002424:	e008      	b.n	8002438 <HAL_TIM_PeriodElapsedCallback+0x154>
			else if ( counts > 60	)
 8002426:	4b79      	ldr	r3, [pc, #484]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b3c      	cmp	r3, #60	; 0x3c
 800242c:	dc00      	bgt.n	8002430 <HAL_TIM_PeriodElapsedCallback+0x14c>
 800242e:	e0e8      	b.n	8002602 <HAL_TIM_PeriodElapsedCallback+0x31e>
				counts = RESET;
 8002430:	4b76      	ldr	r3, [pc, #472]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
			break;
 8002436:	e0e4      	b.n	8002602 <HAL_TIM_PeriodElapsedCallback+0x31e>
 8002438:	e0e3      	b.n	8002602 <HAL_TIM_PeriodElapsedCallback+0x31e>
			Motor_Stirrer_AntiClkwise();
 800243a:	f001 f8e3 	bl	8003604 <Motor_Stirrer_AntiClkwise>
			break;
 800243e:	e0ea      	b.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>
		}

	}


	else if (Process.Flags.Cleaning.TimerEnable_StirrerWater)
 8002440:	4a71      	ldr	r2, [pc, #452]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002442:	23ef      	movs	r3, #239	; 0xef
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	5cd3      	ldrb	r3, [r2, r3]
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	4013      	ands	r3, r2
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d100      	bne.n	8002454 <HAL_TIM_PeriodElapsedCallback+0x170>
 8002452:	e078      	b.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x262>
	{
		if		(	(Process.Variables.Cleaning.TimerCounts_StirrerWater %	(2 * TimerMultiplicationFactor * Minutes))	==  RESET)		// for every even minutes -> Stirrer Toggles
 8002454:	4a6c      	ldr	r2, [pc, #432]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002456:	23aa      	movs	r3, #170	; 0xaa
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	58d2      	ldr	r2, [r2, r3]
 800245c:	2396      	movs	r3, #150	; 0x96
 800245e:	00d9      	lsls	r1, r3, #3
 8002460:	0010      	movs	r0, r2
 8002462:	f7fd fed7 	bl	8000214 <__aeabi_uidivmod>
 8002466:	1e0b      	subs	r3, r1, #0
 8002468:	d108      	bne.n	800247c <HAL_TIM_PeriodElapsedCallback+0x198>
		{
			Process.Flags.Cleaning.StirrerDirectionToggle	= 	SET;
 800246a:	4a67      	ldr	r2, [pc, #412]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800246c:	23ee      	movs	r3, #238	; 0xee
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	18d3      	adds	r3, r2, r3
 8002472:	789a      	ldrb	r2, [r3, #2]
 8002474:	2110      	movs	r1, #16
 8002476:	430a      	orrs	r2, r1
 8002478:	709a      	strb	r2, [r3, #2]
 800247a:	e012      	b.n	80024a2 <HAL_TIM_PeriodElapsedCallback+0x1be>
		}

		else if (	(Process.Variables.Cleaning.TimerCounts_StirrerWater %	(1 * TimerMultiplicationFactor * Minutes))	==  RESET)		// in every odd minutes -> Stirrer Same Direction
 800247c:	4a62      	ldr	r2, [pc, #392]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800247e:	23aa      	movs	r3, #170	; 0xaa
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	58d2      	ldr	r2, [r2, r3]
 8002484:	2396      	movs	r3, #150	; 0x96
 8002486:	0099      	lsls	r1, r3, #2
 8002488:	0010      	movs	r0, r2
 800248a:	f7fd fec3 	bl	8000214 <__aeabi_uidivmod>
 800248e:	1e0b      	subs	r3, r1, #0
 8002490:	d107      	bne.n	80024a2 <HAL_TIM_PeriodElapsedCallback+0x1be>
		{
			Process.Flags.Cleaning.StirrerDirectionToggle	= 	RESET;
 8002492:	4a5d      	ldr	r2, [pc, #372]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002494:	23ee      	movs	r3, #238	; 0xee
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	18d3      	adds	r3, r2, r3
 800249a:	789a      	ldrb	r2, [r3, #2]
 800249c:	2110      	movs	r1, #16
 800249e:	438a      	bics	r2, r1
 80024a0:	709a      	strb	r2, [r3, #2]
		}


		Process.Variables.Cleaning.TimerCounts_StirrerWater++;
 80024a2:	4a59      	ldr	r2, [pc, #356]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80024a4:	23aa      	movs	r3, #170	; 0xaa
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	58d3      	ldr	r3, [r2, r3]
 80024aa:	1c59      	adds	r1, r3, #1
 80024ac:	4a56      	ldr	r2, [pc, #344]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80024ae:	23aa      	movs	r3, #170	; 0xaa
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	50d1      	str	r1, [r2, r3]


		switch(Process.Flags.Cleaning.StirrerDirectionToggle)
 80024b4:	4a54      	ldr	r2, [pc, #336]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80024b6:	23ef      	movs	r3, #239	; 0xef
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	06db      	lsls	r3, r3, #27
 80024be:	0fdb      	lsrs	r3, r3, #31
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d03c      	beq.n	8002540 <HAL_TIM_PeriodElapsedCallback+0x25c>
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d000      	beq.n	80024cc <HAL_TIM_PeriodElapsedCallback+0x1e8>
			Motor_Stirrer_AntiClkwise();
			break;
		}

		default:
			break;
 80024ca:	e0a4      	b.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>
			counts++;
 80024cc:	4b50      	ldr	r3, [pc, #320]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	4b4f      	ldr	r3, [pc, #316]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80024d4:	601a      	str	r2, [r3, #0]
			if (	(counts > 0) 		and		(counts <= 20)	)
 80024d6:	4b4e      	ldr	r3, [pc, #312]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	dd06      	ble.n	80024ec <HAL_TIM_PeriodElapsedCallback+0x208>
 80024de:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b14      	cmp	r3, #20
 80024e4:	dc02      	bgt.n	80024ec <HAL_TIM_PeriodElapsedCallback+0x208>
				Motor_Stirrer_Clkwise();
 80024e6:	f001 f879 	bl	80035dc <Motor_Stirrer_Clkwise>
 80024ea:	e028      	b.n	800253e <HAL_TIM_PeriodElapsedCallback+0x25a>
			else if ((	counts > 20) 	and 	(counts <= 30)	)
 80024ec:	4b48      	ldr	r3, [pc, #288]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b14      	cmp	r3, #20
 80024f2:	dd06      	ble.n	8002502 <HAL_TIM_PeriodElapsedCallback+0x21e>
 80024f4:	4b46      	ldr	r3, [pc, #280]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b1e      	cmp	r3, #30
 80024fa:	dc02      	bgt.n	8002502 <HAL_TIM_PeriodElapsedCallback+0x21e>
				Motor_Stirrer_Stop();
 80024fc:	f001 f896 	bl	800362c <Motor_Stirrer_Stop>
 8002500:	e01d      	b.n	800253e <HAL_TIM_PeriodElapsedCallback+0x25a>
			else if ((	counts > 30) 	and 	(counts <= 50)	)
 8002502:	4b43      	ldr	r3, [pc, #268]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b1e      	cmp	r3, #30
 8002508:	dd06      	ble.n	8002518 <HAL_TIM_PeriodElapsedCallback+0x234>
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b32      	cmp	r3, #50	; 0x32
 8002510:	dc02      	bgt.n	8002518 <HAL_TIM_PeriodElapsedCallback+0x234>
				Motor_Stirrer_AntiClkwise();
 8002512:	f001 f877 	bl	8003604 <Motor_Stirrer_AntiClkwise>
 8002516:	e012      	b.n	800253e <HAL_TIM_PeriodElapsedCallback+0x25a>
			else if ((	counts > 50) 	and 	(counts <= 60)	)
 8002518:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b32      	cmp	r3, #50	; 0x32
 800251e:	dd06      	ble.n	800252e <HAL_TIM_PeriodElapsedCallback+0x24a>
 8002520:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b3c      	cmp	r3, #60	; 0x3c
 8002526:	dc02      	bgt.n	800252e <HAL_TIM_PeriodElapsedCallback+0x24a>
				Motor_Stirrer_Stop();
 8002528:	f001 f880 	bl	800362c <Motor_Stirrer_Stop>
 800252c:	e007      	b.n	800253e <HAL_TIM_PeriodElapsedCallback+0x25a>
			else if ( counts > 60	)
 800252e:	4b38      	ldr	r3, [pc, #224]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b3c      	cmp	r3, #60	; 0x3c
 8002534:	dd6e      	ble.n	8002614 <HAL_TIM_PeriodElapsedCallback+0x330>
				counts = RESET;
 8002536:	4b36      	ldr	r3, [pc, #216]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
			break;
 800253c:	e06a      	b.n	8002614 <HAL_TIM_PeriodElapsedCallback+0x330>
 800253e:	e069      	b.n	8002614 <HAL_TIM_PeriodElapsedCallback+0x330>
			Motor_Stirrer_AntiClkwise();
 8002540:	f001 f860 	bl	8003604 <Motor_Stirrer_AntiClkwise>
			break;
 8002544:	e067      	b.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>

	// ********************************************************************************************* //
	// *****************  Drain Out Water from Cleaning Pipe  *********************************** //
	// ********************************************************************************************* //

	else if (Process.Flags.Cleaning.TimerEnable_DrainOut_Pril)
 8002546:	4a30      	ldr	r2, [pc, #192]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002548:	23ef      	movs	r3, #239	; 0xef
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	5cd3      	ldrb	r3, [r2, r3]
 800254e:	2201      	movs	r2, #1
 8002550:	4013      	ands	r3, r2
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d025      	beq.n	80025a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>
	{
		Process.Variables.Cleaning.TimerCounts_DrainOut_Pril++;
 8002558:	4a2b      	ldr	r2, [pc, #172]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800255a:	23ac      	movs	r3, #172	; 0xac
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	58d3      	ldr	r3, [r2, r3]
 8002560:	1c59      	adds	r1, r3, #1
 8002562:	4a29      	ldr	r2, [pc, #164]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002564:	23ac      	movs	r3, #172	; 0xac
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	50d1      	str	r1, [r2, r3]

		if(Process.Variables.Cleaning.TimerCounts_DrainOut_Pril >= 	Process.Variables.Cleaning.RxTimePrilDrainOut)
 800256a:	4a27      	ldr	r2, [pc, #156]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800256c:	23ac      	movs	r3, #172	; 0xac
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	58d2      	ldr	r2, [r2, r3]
 8002572:	4925      	ldr	r1, [pc, #148]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002574:	23b6      	movs	r3, #182	; 0xb6
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	58cb      	ldr	r3, [r1, r3]
 800257a:	429a      	cmp	r2, r3
 800257c:	d34b      	bcc.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>
		{
			Process.Flags.Cleaning.LevelEmptied					= 	SET;
 800257e:	4a22      	ldr	r2, [pc, #136]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002580:	23ee      	movs	r3, #238	; 0xee
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	18d3      	adds	r3, r2, r3
 8002586:	785a      	ldrb	r2, [r3, #1]
 8002588:	2110      	movs	r1, #16
 800258a:	430a      	orrs	r2, r1
 800258c:	705a      	strb	r2, [r3, #1]
			Process.Flags.Cleaning.TimerEnable_DrainOut_Pril 	=	RESET;
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002590:	23ee      	movs	r3, #238	; 0xee
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	18d3      	adds	r3, r2, r3
 8002596:	789a      	ldrb	r2, [r3, #2]
 8002598:	2101      	movs	r1, #1
 800259a:	438a      	bics	r2, r1
 800259c:	709a      	strb	r2, [r3, #2]
			Motor_Milk_Stop();
 800259e:	f000 ff89 	bl	80034b4 <Motor_Milk_Stop>
 80025a2:	e038      	b.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>
		}
	}


	else if (Process.Flags.Cleaning.TimerEnable_DrainOut_Water)
 80025a4:	4a18      	ldr	r2, [pc, #96]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80025a6:	23ef      	movs	r3, #239	; 0xef
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	2202      	movs	r2, #2
 80025ae:	4013      	ands	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d02f      	beq.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>
	{

		Process.Variables.Cleaning.TimerCounts_DrainOut_Water++;
 80025b6:	4a14      	ldr	r2, [pc, #80]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80025b8:	23ae      	movs	r3, #174	; 0xae
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	58d3      	ldr	r3, [r2, r3]
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	4a11      	ldr	r2, [pc, #68]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80025c2:	23ae      	movs	r3, #174	; 0xae
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	50d1      	str	r1, [r2, r3]

		if (Process.Variables.Cleaning.TimerCounts_DrainOut_Water >= Process.Variables.Cleaning.RxTimeWaterDrainOut)
 80025c8:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80025ca:	23ae      	movs	r3, #174	; 0xae
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	58d2      	ldr	r2, [r2, r3]
 80025d0:	490d      	ldr	r1, [pc, #52]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80025d2:	23b8      	movs	r3, #184	; 0xb8
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	58cb      	ldr	r3, [r1, r3]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d31c      	bcc.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>
		{
			Motor_Milk_Stop();
 80025dc:	f000 ff6a 	bl	80034b4 <Motor_Milk_Stop>
			Process.Flags.Cleaning.LevelEmptied 				=	SET;
 80025e0:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80025e2:	23ee      	movs	r3, #238	; 0xee
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	18d3      	adds	r3, r2, r3
 80025e8:	785a      	ldrb	r2, [r3, #1]
 80025ea:	2110      	movs	r1, #16
 80025ec:	430a      	orrs	r2, r1
 80025ee:	705a      	strb	r2, [r3, #1]
			Process.Flags.Cleaning.TimerEnable_DrainOut_Water 	= 	RESET;
 80025f0:	4a05      	ldr	r2, [pc, #20]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80025f2:	23ee      	movs	r3, #238	; 0xee
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	18d3      	adds	r3, r2, r3
 80025f8:	789a      	ldrb	r2, [r3, #2]
 80025fa:	2102      	movs	r1, #2
 80025fc:	438a      	bics	r2, r1
 80025fe:	709a      	strb	r2, [r3, #2]
 8002600:	e009      	b.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>
			break;
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	e007      	b.n	8002616 <HAL_TIM_PeriodElapsedCallback+0x332>
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	20000120 	.word	0x20000120
 800260c:	200000a8 	.word	0x200000a8
 8002610:	200000ac 	.word	0x200000ac
			break;
 8002614:	46c0      	nop			; (mov r8, r8)

	// ********************************************************************************************* //
	// *************************  Hot Water Counts  *********************************** //
	// ********************************************************************************************* //

	if (Process.Flags.HotWater.TimerEnable)
 8002616:	4a18      	ldr	r2, [pc, #96]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8002618:	23f0      	movs	r3, #240	; 0xf0
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	5cd3      	ldrb	r3, [r2, r3]
 800261e:	2208      	movs	r2, #8
 8002620:	4013      	ands	r3, r2
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d022      	beq.n	800266e <HAL_TIM_PeriodElapsedCallback+0x38a>
	{
		Process.Variables.HotWater.TimerCounts++;
 8002628:	4a13      	ldr	r2, [pc, #76]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800262a:	23c4      	movs	r3, #196	; 0xc4
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	58d3      	ldr	r3, [r2, r3]
 8002630:	1c59      	adds	r1, r3, #1
 8002632:	4a11      	ldr	r2, [pc, #68]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8002634:	23c4      	movs	r3, #196	; 0xc4
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	50d1      	str	r1, [r2, r3]

		if (Process.Variables.HotWater.TimerCounts >= Process.Variables.HotWater.RxOnTime)
 800263a:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800263c:	23c4      	movs	r3, #196	; 0xc4
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	58d2      	ldr	r2, [r2, r3]
 8002642:	490d      	ldr	r1, [pc, #52]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8002644:	23c6      	movs	r3, #198	; 0xc6
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	58cb      	ldr	r3, [r1, r3]
 800264a:	429a      	cmp	r2, r3
 800264c:	d30f      	bcc.n	800266e <HAL_TIM_PeriodElapsedCallback+0x38a>
		{
			Motor_HotWater_Stop();
 800264e:	f001 f816 	bl	800367e <Motor_HotWater_Stop>
//			Process.Variables.HotWater.TimerCounts 	= 	RESET;		// Disable in Send_Status
			Process.Flags.HotWater.TimerEnable		= 	RESET;
 8002652:	4a09      	ldr	r2, [pc, #36]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8002654:	23f0      	movs	r3, #240	; 0xf0
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	5cd1      	ldrb	r1, [r2, r3]
 800265a:	2008      	movs	r0, #8
 800265c:	4381      	bics	r1, r0
 800265e:	54d1      	strb	r1, [r2, r3]
			Process.Flags.HotWater.ProcessCompleted	=	SET;
 8002660:	4a05      	ldr	r2, [pc, #20]	; (8002678 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8002662:	23f0      	movs	r3, #240	; 0xf0
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	5cd1      	ldrb	r1, [r2, r3]
 8002668:	2004      	movs	r0, #4
 800266a:	4301      	orrs	r1, r0
 800266c:	54d1      	strb	r1, [r2, r3]
		}
	}

}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	46bd      	mov	sp, r7
 8002672:	b002      	add	sp, #8
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	20000120 	.word	0x20000120

0800267c <StartProcess>:
extern	TIM_HandleTypeDef 	htim3;
extern	UART_HandleTypeDef 	huart2;


void	StartProcess	(	void	)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0

	switch	(	Process.Variables.InitProcess	)
 8002682:	4ae1      	ldr	r2, [pc, #900]	; (8002a08 <StartProcess+0x38c>)
 8002684:	23c8      	movs	r3, #200	; 0xc8
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	5cd3      	ldrb	r3, [r2, r3]
 800268a:	2b08      	cmp	r3, #8
 800268c:	d901      	bls.n	8002692 <StartProcess+0x16>
 800268e:	f000 fd5b 	bl	8003148 <StartProcess+0xacc>
 8002692:	009a      	lsls	r2, r3, #2
 8002694:	4bdd      	ldr	r3, [pc, #884]	; (8002a0c <StartProcess+0x390>)
 8002696:	18d3      	adds	r3, r2, r3
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	469f      	mov	pc, r3
	// ***************************	MilkWater Cycle		******************************************** //
	// ********************************************************************************************* //

	case	Milk_Water	:
	{
		Process.Flags.MilkWater.Count 	=	SET	;
 800269c:	4ada      	ldr	r2, [pc, #872]	; (8002a08 <StartProcess+0x38c>)
 800269e:	23ea      	movs	r3, #234	; 0xea
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	5cd1      	ldrb	r1, [r2, r3]
 80026a4:	2001      	movs	r0, #1
 80026a6:	4301      	orrs	r1, r0
 80026a8:	54d1      	strb	r1, [r2, r3]

		if(Process.Flags.MilkWater.ProcessEnable)
 80026aa:	4ad7      	ldr	r2, [pc, #860]	; (8002a08 <StartProcess+0x38c>)
 80026ac:	23ea      	movs	r3, #234	; 0xea
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
 80026b2:	2202      	movs	r2, #2
 80026b4:	4013      	ands	r3, r2
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00e      	beq.n	80026da <StartProcess+0x5e>
		{
			LevelSensor_CheckForMilkWater	()	;
 80026bc:	f001 f86a 	bl	8003794 <LevelSensor_CheckForMilkWater>
			Temperature_CheckForMilkWater	()	;
 80026c0:	f001 f8f8 	bl	80038b4 <Temperature_CheckForMilkWater>

			if	(	Process.Variables.Milk.LevelSensor	)	Process.Flags.MilkWater.Stirrer	=	SET;
 80026c4:	4bd0      	ldr	r3, [pc, #832]	; (8002a08 <StartProcess+0x38c>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <StartProcess+0x5e>
 80026cc:	4ace      	ldr	r2, [pc, #824]	; (8002a08 <StartProcess+0x38c>)
 80026ce:	23ea      	movs	r3, #234	; 0xea
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	5cd1      	ldrb	r1, [r2, r3]
 80026d4:	2010      	movs	r0, #16
 80026d6:	4301      	orrs	r1, r0
 80026d8:	54d1      	strb	r1, [r2, r3]

		}

		Process.Variables.InitProcess	=	Idle;
 80026da:	4acb      	ldr	r2, [pc, #812]	; (8002a08 <StartProcess+0x38c>)
 80026dc:	23c8      	movs	r3, #200	; 0xc8
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2106      	movs	r1, #6
 80026e2:	54d1      	strb	r1, [r2, r3]

		break;
 80026e4:	f000 fd31 	bl	800314a <StartProcess+0xace>
	// *****************************	Water Cycle		******************************************** //
	// ********************************************************************************************* //

	case	Water	:
	{
		Process.Flags.Water.Count 		= 	SET	;
 80026e8:	4ac7      	ldr	r2, [pc, #796]	; (8002a08 <StartProcess+0x38c>)
 80026ea:	23ec      	movs	r3, #236	; 0xec
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	5cd1      	ldrb	r1, [r2, r3]
 80026f0:	2001      	movs	r0, #1
 80026f2:	4301      	orrs	r1, r0
 80026f4:	54d1      	strb	r1, [r2, r3]

		if	(	Process.Flags.Water.ProcessEnable	)
 80026f6:	4ac4      	ldr	r2, [pc, #784]	; (8002a08 <StartProcess+0x38c>)
 80026f8:	23ec      	movs	r3, #236	; 0xec
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	5cd3      	ldrb	r3, [r2, r3]
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d010      	beq.n	800272a <StartProcess+0xae>
		{

			LevelSensor_CheckForWater	()		;
 8002708:	f001 f9de 	bl	8003ac8 <LevelSensor_CheckForWater>
			Temperature_CheckForWater	()		;
 800270c:	f001 fa00 	bl	8003b10 <Temperature_CheckForWater>

			if	(	Process.Flags.Water.ProcessEnableMilkWater	)
 8002710:	4abd      	ldr	r2, [pc, #756]	; (8002a08 <StartProcess+0x38c>)
 8002712:	23ec      	movs	r3, #236	; 0xec
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	2204      	movs	r2, #4
 800271a:	4013      	ands	r3, r2
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <StartProcess+0xae>
			{
				LevelSensor_CheckForOnlyMilkWater	()	;
 8002722:	f001 f863 	bl	80037ec <LevelSensor_CheckForOnlyMilkWater>
				Temperature_CheckForOnlyMilkWater	()	;
 8002726:	f001 f9a1 	bl	8003a6c <Temperature_CheckForOnlyMilkWater>
			}

		}

		Process.Variables.InitProcess 	= 	Idle;
 800272a:	4ab7      	ldr	r2, [pc, #732]	; (8002a08 <StartProcess+0x38c>)
 800272c:	23c8      	movs	r3, #200	; 0xc8
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2106      	movs	r1, #6
 8002732:	54d1      	strb	r1, [r2, r3]

		break;
 8002734:	f000 fd09 	bl	800314a <StartProcess+0xace>
	// *************************** 	Cleaning Cycle	******************************************** //
	// ********************************************************************************************* //

	case	Cleaning	:
	{
		Process.Flags.Cleaning.Count = SET	;
 8002738:	4ab3      	ldr	r2, [pc, #716]	; (8002a08 <StartProcess+0x38c>)
 800273a:	23ee      	movs	r3, #238	; 0xee
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	5cd1      	ldrb	r1, [r2, r3]
 8002740:	2001      	movs	r0, #1
 8002742:	4301      	orrs	r1, r0
 8002744:	54d1      	strb	r1, [r2, r3]

		if	(	Process.Flags.Cleaning.ProcessEnable	)
 8002746:	4ab0      	ldr	r2, [pc, #704]	; (8002a08 <StartProcess+0x38c>)
 8002748:	23ee      	movs	r3, #238	; 0xee
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	5cd3      	ldrb	r3, [r2, r3]
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d100      	bne.n	800275a <StartProcess+0xde>
 8002758:	e22a      	b.n	8002bb0 <StartProcess+0x534>
		{
			Process.Flags.Cleaning.ProcessCompleted_Pril	= 	RESET	;
 800275a:	4aab      	ldr	r2, [pc, #684]	; (8002a08 <StartProcess+0x38c>)
 800275c:	23ee      	movs	r3, #238	; 0xee
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	18d3      	adds	r3, r2, r3
 8002762:	785a      	ldrb	r2, [r3, #1]
 8002764:	2102      	movs	r1, #2
 8002766:	438a      	bics	r2, r1
 8002768:	705a      	strb	r2, [r3, #1]
			Process.Flags.Cleaning.ProcessCompleted_Water	= 	RESET	;
 800276a:	4aa7      	ldr	r2, [pc, #668]	; (8002a08 <StartProcess+0x38c>)
 800276c:	23ee      	movs	r3, #238	; 0xee
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	18d3      	adds	r3, r2, r3
 8002772:	785a      	ldrb	r2, [r3, #1]
 8002774:	2104      	movs	r1, #4
 8002776:	438a      	bics	r2, r1
 8002778:	705a      	strb	r2, [r3, #1]

//			if(Process.Variables.MilkWater.Temperature.Read < MaxTemperatureValue)	SSRHeater_ON_MilkWater()	;
//			else																	SSRHeater_OFF_MilkWater()	;


			switch	(	Process.Variables.Cleaning.InitProcess	)
 800277a:	4aa3      	ldr	r2, [pc, #652]	; (8002a08 <StartProcess+0x38c>)
 800277c:	2398      	movs	r3, #152	; 0x98
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	58d3      	ldr	r3, [r2, r3]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d003      	beq.n	800278e <StartProcess+0x112>
 8002786:	2b02      	cmp	r3, #2
 8002788:	d100      	bne.n	800278c <StartProcess+0x110>
 800278a:	e10c      	b.n	80029a6 <StartProcess+0x32a>
				}
				break		;
			}

			default:
				break;
 800278c:	e211      	b.n	8002bb2 <StartProcess+0x536>
				switch	(	Process.Variables.Cleaning.ProcessExecution	)
 800278e:	4a9e      	ldr	r2, [pc, #632]	; (8002a08 <StartProcess+0x38c>)
 8002790:	239c      	movs	r3, #156	; 0x9c
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	58d3      	ldr	r3, [r2, r3]
 8002796:	3b03      	subs	r3, #3
 8002798:	2b05      	cmp	r3, #5
 800279a:	d900      	bls.n	800279e <StartProcess+0x122>
 800279c:	e0fd      	b.n	800299a <StartProcess+0x31e>
 800279e:	009a      	lsls	r2, r3, #2
 80027a0:	4b9b      	ldr	r3, [pc, #620]	; (8002a10 <StartProcess+0x394>)
 80027a2:	18d3      	adds	r3, r2, r3
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	469f      	mov	pc, r3
					LevelSensor_CheckForPrilCleaning()	;
 80027a8:	f000 ffb4 	bl	8003714 <LevelSensor_CheckForPrilCleaning>
					Process.Flags.Cleaning.ProcessOngoing_Pril 	= 	One								;
 80027ac:	4a96      	ldr	r2, [pc, #600]	; (8002a08 <StartProcess+0x38c>)
 80027ae:	23ee      	movs	r3, #238	; 0xee
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	5cd1      	ldrb	r1, [r2, r3]
 80027b4:	2038      	movs	r0, #56	; 0x38
 80027b6:	4381      	bics	r1, r0
 80027b8:	1c08      	adds	r0, r1, #0
 80027ba:	2108      	movs	r1, #8
 80027bc:	4301      	orrs	r1, r0
 80027be:	54d1      	strb	r1, [r2, r3]
					if(	Process.Flags.Cleaning.LevelFilled_Pril	)
 80027c0:	4a91      	ldr	r2, [pc, #580]	; (8002a08 <StartProcess+0x38c>)
 80027c2:	23de      	movs	r3, #222	; 0xde
 80027c4:	33ff      	adds	r3, #255	; 0xff
 80027c6:	5cd3      	ldrb	r3, [r2, r3]
 80027c8:	2220      	movs	r2, #32
 80027ca:	4013      	ands	r3, r2
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d100      	bne.n	80027d4 <StartProcess+0x158>
 80027d2:	e0e4      	b.n	800299e <StartProcess+0x322>
						Process.Flags.Cleaning.LevelFilled_Pril 	= 	RESET						;
 80027d4:	4a8c      	ldr	r2, [pc, #560]	; (8002a08 <StartProcess+0x38c>)
 80027d6:	23ee      	movs	r3, #238	; 0xee
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	18d3      	adds	r3, r2, r3
 80027dc:	785a      	ldrb	r2, [r3, #1]
 80027de:	2120      	movs	r1, #32
 80027e0:	438a      	bics	r2, r1
 80027e2:	705a      	strb	r2, [r3, #1]
						Process.Variables.Cleaning.ProcessExecution =	FillMoreThanRequiredLevel	;
 80027e4:	4a88      	ldr	r2, [pc, #544]	; (8002a08 <StartProcess+0x38c>)
 80027e6:	239c      	movs	r3, #156	; 0x9c
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2104      	movs	r1, #4
 80027ec:	50d1      	str	r1, [r2, r3]
					break	;
 80027ee:	e0d6      	b.n	800299e <StartProcess+0x322>
					Motor_Milk_Clkwise	()												;
 80027f0:	f000 fe4c 	bl	800348c <Motor_Milk_Clkwise>
					Process.Flags.Cleaning.TimerEnable_Pril			= 	SET				;
 80027f4:	4a84      	ldr	r2, [pc, #528]	; (8002a08 <StartProcess+0x38c>)
 80027f6:	23ee      	movs	r3, #238	; 0xee
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	18d3      	adds	r3, r2, r3
 80027fc:	785a      	ldrb	r2, [r3, #1]
 80027fe:	2108      	movs	r1, #8
 8002800:	430a      	orrs	r2, r1
 8002802:	705a      	strb	r2, [r3, #1]
					Process.Flags.Cleaning.ProcessOngoing_Pril 		= 	Two				;
 8002804:	4a80      	ldr	r2, [pc, #512]	; (8002a08 <StartProcess+0x38c>)
 8002806:	23ee      	movs	r3, #238	; 0xee
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	5cd1      	ldrb	r1, [r2, r3]
 800280c:	2038      	movs	r0, #56	; 0x38
 800280e:	4381      	bics	r1, r0
 8002810:	1c08      	adds	r0, r1, #0
 8002812:	2110      	movs	r1, #16
 8002814:	4301      	orrs	r1, r0
 8002816:	54d1      	strb	r1, [r2, r3]
					if (Process.Variables.Cleaning.TimerCounts_MotorLevelUp >= Process.Variables.Cleaning.RxLevelUp_Pril)
 8002818:	4a7b      	ldr	r2, [pc, #492]	; (8002a08 <StartProcess+0x38c>)
 800281a:	23a0      	movs	r3, #160	; 0xa0
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	58d2      	ldr	r2, [r2, r3]
 8002820:	4979      	ldr	r1, [pc, #484]	; (8002a08 <StartProcess+0x38c>)
 8002822:	23b0      	movs	r3, #176	; 0xb0
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	58cb      	ldr	r3, [r1, r3]
 8002828:	429a      	cmp	r2, r3
 800282a:	d200      	bcs.n	800282e <StartProcess+0x1b2>
 800282c:	e0b9      	b.n	80029a2 <StartProcess+0x326>
						Process.Variables.Cleaning.TimerCounts_MotorLevelUp	= 	RESET	;
 800282e:	4a76      	ldr	r2, [pc, #472]	; (8002a08 <StartProcess+0x38c>)
 8002830:	23a0      	movs	r3, #160	; 0xa0
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2100      	movs	r1, #0
 8002836:	50d1      	str	r1, [r2, r3]
						Process.Flags.Cleaning.TimerEnable_Pril 	= 	RESET			;
 8002838:	4a73      	ldr	r2, [pc, #460]	; (8002a08 <StartProcess+0x38c>)
 800283a:	23ee      	movs	r3, #238	; 0xee
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	18d3      	adds	r3, r2, r3
 8002840:	785a      	ldrb	r2, [r3, #1]
 8002842:	2108      	movs	r1, #8
 8002844:	438a      	bics	r2, r1
 8002846:	705a      	strb	r2, [r3, #1]
						Process.Variables.Cleaning.ProcessExecution = 	StirrerMotor	;
 8002848:	4a6f      	ldr	r2, [pc, #444]	; (8002a08 <StartProcess+0x38c>)
 800284a:	239c      	movs	r3, #156	; 0x9c
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2105      	movs	r1, #5
 8002850:	50d1      	str	r1, [r2, r3]
						Motor_Milk_Stop	()												;
 8002852:	f000 fe2f 	bl	80034b4 <Motor_Milk_Stop>
					break;
 8002856:	e0a4      	b.n	80029a2 <StartProcess+0x326>
					Process.Flags.Cleaning.TimerEnable_StirrerPril = SET								;
 8002858:	4a6b      	ldr	r2, [pc, #428]	; (8002a08 <StartProcess+0x38c>)
 800285a:	23ee      	movs	r3, #238	; 0xee
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	18d3      	adds	r3, r2, r3
 8002860:	789a      	ldrb	r2, [r3, #2]
 8002862:	2120      	movs	r1, #32
 8002864:	430a      	orrs	r2, r1
 8002866:	709a      	strb	r2, [r3, #2]
					switch	(	Process.Variables.Cleaning.ProcessExeCounts	)
 8002868:	4a67      	ldr	r2, [pc, #412]	; (8002a08 <StartProcess+0x38c>)
 800286a:	239a      	movs	r3, #154	; 0x9a
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	58d3      	ldr	r3, [r2, r3]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d11e      	bne.n	80028b2 <StartProcess+0x236>
						if(Process.Variables.Cleaning.TimerCounts_StirrerPril 	>= 	Process.Variables.Cleaning.RxStirrerOnTimePrilFirstCycle)
 8002874:	4a64      	ldr	r2, [pc, #400]	; (8002a08 <StartProcess+0x38c>)
 8002876:	23a8      	movs	r3, #168	; 0xa8
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	58d2      	ldr	r2, [r2, r3]
 800287c:	4962      	ldr	r1, [pc, #392]	; (8002a08 <StartProcess+0x38c>)
 800287e:	23bc      	movs	r3, #188	; 0xbc
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	58cb      	ldr	r3, [r1, r3]
 8002884:	429a      	cmp	r2, r3
 8002886:	d333      	bcc.n	80028f0 <StartProcess+0x274>
							Motor_Stirrer_Stop()														;
 8002888:	f000 fed0 	bl	800362c <Motor_Stirrer_Stop>
							Process.Flags.Cleaning.TimerEnable_StirrerPril 		= 	RESET				;
 800288c:	4a5e      	ldr	r2, [pc, #376]	; (8002a08 <StartProcess+0x38c>)
 800288e:	23ee      	movs	r3, #238	; 0xee
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	18d3      	adds	r3, r2, r3
 8002894:	789a      	ldrb	r2, [r3, #2]
 8002896:	2120      	movs	r1, #32
 8002898:	438a      	bics	r2, r1
 800289a:	709a      	strb	r2, [r3, #2]
							Process.Variables.Cleaning.TimerCounts_StirrerPril 	= 	RESET				;
 800289c:	4a5a      	ldr	r2, [pc, #360]	; (8002a08 <StartProcess+0x38c>)
 800289e:	23a8      	movs	r3, #168	; 0xa8
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2100      	movs	r1, #0
 80028a4:	50d1      	str	r1, [r2, r3]
							Process.Variables.Cleaning.ProcessExecution 		= 	SendAcknowledgement	;
 80028a6:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <StartProcess+0x38c>)
 80028a8:	239c      	movs	r3, #156	; 0x9c
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2108      	movs	r1, #8
 80028ae:	50d1      	str	r1, [r2, r3]
						break;
 80028b0:	e01e      	b.n	80028f0 <StartProcess+0x274>
						if(Process.Variables.Cleaning.TimerCounts_StirrerPril >= Process.Variables.Cleaning.RxStirrerOnTimePrilSecondCycle)
 80028b2:	4a55      	ldr	r2, [pc, #340]	; (8002a08 <StartProcess+0x38c>)
 80028b4:	23a8      	movs	r3, #168	; 0xa8
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	58d2      	ldr	r2, [r2, r3]
 80028ba:	4953      	ldr	r1, [pc, #332]	; (8002a08 <StartProcess+0x38c>)
 80028bc:	23be      	movs	r3, #190	; 0xbe
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	58cb      	ldr	r3, [r1, r3]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d316      	bcc.n	80028f4 <StartProcess+0x278>
							Motor_Stirrer_Stop	()															;
 80028c6:	f000 feb1 	bl	800362c <Motor_Stirrer_Stop>
							Process.Flags.Cleaning.TimerEnable_StirrerPril		= 	RESET					;
 80028ca:	4a4f      	ldr	r2, [pc, #316]	; (8002a08 <StartProcess+0x38c>)
 80028cc:	23ee      	movs	r3, #238	; 0xee
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	18d3      	adds	r3, r2, r3
 80028d2:	789a      	ldrb	r2, [r3, #2]
 80028d4:	2120      	movs	r1, #32
 80028d6:	438a      	bics	r2, r1
 80028d8:	709a      	strb	r2, [r3, #2]
							Process.Variables.Cleaning.TimerCounts_StirrerPril 	= 	RESET					;
 80028da:	4a4b      	ldr	r2, [pc, #300]	; (8002a08 <StartProcess+0x38c>)
 80028dc:	23a8      	movs	r3, #168	; 0xa8
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2100      	movs	r1, #0
 80028e2:	50d1      	str	r1, [r2, r3]
							Process.Variables.Cleaning.ProcessExecution 		=	CheckForLastPrilSteps	;
 80028e4:	4a48      	ldr	r2, [pc, #288]	; (8002a08 <StartProcess+0x38c>)
 80028e6:	239c      	movs	r3, #156	; 0x9c
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2106      	movs	r1, #6
 80028ec:	50d1      	str	r1, [r2, r3]
						break;
 80028ee:	e001      	b.n	80028f4 <StartProcess+0x278>
						break;
 80028f0:	46c0      	nop			; (mov r8, r8)
 80028f2:	e000      	b.n	80028f6 <StartProcess+0x27a>
						break;
 80028f4:	46c0      	nop			; (mov r8, r8)
					Process.Flags.Cleaning.ProcessOngoing_Pril 			= 	Three					;
 80028f6:	4a44      	ldr	r2, [pc, #272]	; (8002a08 <StartProcess+0x38c>)
 80028f8:	23ee      	movs	r3, #238	; 0xee
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	5cd1      	ldrb	r1, [r2, r3]
 80028fe:	2038      	movs	r0, #56	; 0x38
 8002900:	4381      	bics	r1, r0
 8002902:	1c08      	adds	r0, r1, #0
 8002904:	2118      	movs	r1, #24
 8002906:	4301      	orrs	r1, r0
 8002908:	54d1      	strb	r1, [r2, r3]
					break	;
 800290a:	e04b      	b.n	80029a4 <StartProcess+0x328>
					if	(	Process.Flags.Cleaning.LevelEmptied	)
 800290c:	4a3e      	ldr	r2, [pc, #248]	; (8002a08 <StartProcess+0x38c>)
 800290e:	23de      	movs	r3, #222	; 0xde
 8002910:	33ff      	adds	r3, #255	; 0xff
 8002912:	5cd3      	ldrb	r3, [r2, r3]
 8002914:	2210      	movs	r2, #16
 8002916:	4013      	ands	r3, r2
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00f      	beq.n	800293e <StartProcess+0x2c2>
						Motor_Milk_Stop	()																;
 800291e:	f000 fdc9 	bl	80034b4 <Motor_Milk_Stop>
						Process.Flags.Cleaning.LevelEmptied						= 	RESET				;
 8002922:	4a39      	ldr	r2, [pc, #228]	; (8002a08 <StartProcess+0x38c>)
 8002924:	23ee      	movs	r3, #238	; 0xee
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	18d3      	adds	r3, r2, r3
 800292a:	785a      	ldrb	r2, [r3, #1]
 800292c:	2110      	movs	r1, #16
 800292e:	438a      	bics	r2, r1
 8002930:	705a      	strb	r2, [r3, #1]
						Process.Variables.Cleaning.ProcessExecution 			= 	SendAcknowledgement	;
 8002932:	4a35      	ldr	r2, [pc, #212]	; (8002a08 <StartProcess+0x38c>)
 8002934:	239c      	movs	r3, #156	; 0x9c
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2108      	movs	r1, #8
 800293a:	50d1      	str	r1, [r2, r3]
					break;
 800293c:	e032      	b.n	80029a4 <StartProcess+0x328>
						LevelSensor_DrainOutPrilFromMilkPipe	()										;
 800293e:	f000 ff79 	bl	8003834 <LevelSensor_DrainOutPrilFromMilkPipe>
						Process.Flags.Cleaning.ProcessOngoing_Pril 				= 	Four				;
 8002942:	4a31      	ldr	r2, [pc, #196]	; (8002a08 <StartProcess+0x38c>)
 8002944:	23ee      	movs	r3, #238	; 0xee
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	5cd1      	ldrb	r1, [r2, r3]
 800294a:	2038      	movs	r0, #56	; 0x38
 800294c:	4381      	bics	r1, r0
 800294e:	1c08      	adds	r0, r1, #0
 8002950:	2120      	movs	r1, #32
 8002952:	4301      	orrs	r1, r0
 8002954:	54d1      	strb	r1, [r2, r3]
					break;
 8002956:	e025      	b.n	80029a4 <StartProcess+0x328>
					Process.Flags.Cleaning.ProcessEnable 			=	RESET							;
 8002958:	4a2b      	ldr	r2, [pc, #172]	; (8002a08 <StartProcess+0x38c>)
 800295a:	23ee      	movs	r3, #238	; 0xee
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	5cd1      	ldrb	r1, [r2, r3]
 8002960:	2002      	movs	r0, #2
 8002962:	4381      	bics	r1, r0
 8002964:	54d1      	strb	r1, [r2, r3]
					Process.Flags.Cleaning.ProcessCompleted_Pril	=	SET								;
 8002966:	4a28      	ldr	r2, [pc, #160]	; (8002a08 <StartProcess+0x38c>)
 8002968:	23ee      	movs	r3, #238	; 0xee
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	18d3      	adds	r3, r2, r3
 800296e:	785a      	ldrb	r2, [r3, #1]
 8002970:	2102      	movs	r1, #2
 8002972:	430a      	orrs	r2, r1
 8002974:	705a      	strb	r2, [r3, #1]
					Process.Flags.Cleaning.ProcessOngoing_Pril 		=	Five							;
 8002976:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <StartProcess+0x38c>)
 8002978:	23ee      	movs	r3, #238	; 0xee
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	5cd1      	ldrb	r1, [r2, r3]
 800297e:	2038      	movs	r0, #56	; 0x38
 8002980:	4381      	bics	r1, r0
 8002982:	1c08      	adds	r0, r1, #0
 8002984:	2128      	movs	r1, #40	; 0x28
 8002986:	4301      	orrs	r1, r0
 8002988:	54d1      	strb	r1, [r2, r3]
					Process.Flags.Cleaning.ProcessBusy				=	RESET							;
 800298a:	4a1f      	ldr	r2, [pc, #124]	; (8002a08 <StartProcess+0x38c>)
 800298c:	23ee      	movs	r3, #238	; 0xee
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	5cd1      	ldrb	r1, [r2, r3]
 8002992:	2004      	movs	r0, #4
 8002994:	4381      	bics	r1, r0
 8002996:	54d1      	strb	r1, [r2, r3]
					break	;
 8002998:	e004      	b.n	80029a4 <StartProcess+0x328>
					break	;
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	e109      	b.n	8002bb2 <StartProcess+0x536>
					break	;
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	e107      	b.n	8002bb2 <StartProcess+0x536>
					break;
 80029a2:	46c0      	nop			; (mov r8, r8)
				break		;
 80029a4:	e105      	b.n	8002bb2 <StartProcess+0x536>
				switch	(	Process.Variables.Cleaning.ProcessExecution	)
 80029a6:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <StartProcess+0x38c>)
 80029a8:	239c      	movs	r3, #156	; 0x9c
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	58d3      	ldr	r3, [r2, r3]
 80029ae:	3b03      	subs	r3, #3
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d900      	bls.n	80029b6 <StartProcess+0x33a>
 80029b4:	e0f6      	b.n	8002ba4 <StartProcess+0x528>
 80029b6:	009a      	lsls	r2, r3, #2
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <StartProcess+0x398>)
 80029ba:	18d3      	adds	r3, r2, r3
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	469f      	mov	pc, r3
					LevelSensor_CheckForWaterCleaning	()											;
 80029c0:	f000 fec8 	bl	8003754 <LevelSensor_CheckForWaterCleaning>
					Process.Flags.Cleaning.ProcessOngoing_Water = 	One								;
 80029c4:	4a10      	ldr	r2, [pc, #64]	; (8002a08 <StartProcess+0x38c>)
 80029c6:	23ee      	movs	r3, #238	; 0xee
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	5ad1      	ldrh	r1, [r2, r3]
 80029cc:	4812      	ldr	r0, [pc, #72]	; (8002a18 <StartProcess+0x39c>)
 80029ce:	4001      	ands	r1, r0
 80029d0:	1c08      	adds	r0, r1, #0
 80029d2:	2140      	movs	r1, #64	; 0x40
 80029d4:	4301      	orrs	r1, r0
 80029d6:	52d1      	strh	r1, [r2, r3]
					if	(	Process.Flags.Cleaning.LevelFilled_Water	)
 80029d8:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <StartProcess+0x38c>)
 80029da:	23de      	movs	r3, #222	; 0xde
 80029dc:	33ff      	adds	r3, #255	; 0xff
 80029de:	5cd3      	ldrb	r3, [r2, r3]
 80029e0:	2240      	movs	r2, #64	; 0x40
 80029e2:	4013      	ands	r3, r2
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d100      	bne.n	80029ec <StartProcess+0x370>
 80029ea:	e0dd      	b.n	8002ba8 <StartProcess+0x52c>
						Process.Flags.Cleaning.LevelFilled_Water 	= 	RESET						;
 80029ec:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <StartProcess+0x38c>)
 80029ee:	23ee      	movs	r3, #238	; 0xee
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	18d3      	adds	r3, r2, r3
 80029f4:	785a      	ldrb	r2, [r3, #1]
 80029f6:	2140      	movs	r1, #64	; 0x40
 80029f8:	438a      	bics	r2, r1
 80029fa:	705a      	strb	r2, [r3, #1]
						Process.Variables.Cleaning.ProcessExecution = 	FillMoreThanRequiredLevel	;
 80029fc:	4a02      	ldr	r2, [pc, #8]	; (8002a08 <StartProcess+0x38c>)
 80029fe:	239c      	movs	r3, #156	; 0x9c
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2104      	movs	r1, #4
 8002a04:	50d1      	str	r1, [r2, r3]
					break	;
 8002a06:	e0cf      	b.n	8002ba8 <StartProcess+0x52c>
 8002a08:	20000120 	.word	0x20000120
 8002a0c:	08006e74 	.word	0x08006e74
 8002a10:	08006e98 	.word	0x08006e98
 8002a14:	08006eb0 	.word	0x08006eb0
 8002a18:	fffffe3f 	.word	0xfffffe3f
					Motor_CleaningWater_Clkwise	()													;
 8002a1c:	f000 fdb2 	bl	8003584 <Motor_CleaningWater_Clkwise>
					Process.Flags.Cleaning.TimerEnable_Water 				= 	SET					;
 8002a20:	4ae1      	ldr	r2, [pc, #900]	; (8002da8 <StartProcess+0x72c>)
 8002a22:	23ee      	movs	r3, #238	; 0xee
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	18d3      	adds	r3, r2, r3
 8002a28:	785a      	ldrb	r2, [r3, #1]
 8002a2a:	2180      	movs	r1, #128	; 0x80
 8002a2c:	4249      	negs	r1, r1
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	705a      	strb	r2, [r3, #1]
					Process.Flags.Cleaning.ProcessOngoing_Water 			= 	Two					;
 8002a32:	4add      	ldr	r2, [pc, #884]	; (8002da8 <StartProcess+0x72c>)
 8002a34:	23ee      	movs	r3, #238	; 0xee
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	5ad1      	ldrh	r1, [r2, r3]
 8002a3a:	48dc      	ldr	r0, [pc, #880]	; (8002dac <StartProcess+0x730>)
 8002a3c:	4001      	ands	r1, r0
 8002a3e:	1c08      	adds	r0, r1, #0
 8002a40:	2180      	movs	r1, #128	; 0x80
 8002a42:	4301      	orrs	r1, r0
 8002a44:	52d1      	strh	r1, [r2, r3]
					if (Process.Variables.Cleaning.TimerCounts_MotorLevelUp >= Process.Variables.Cleaning.RxLevelUp_Water)
 8002a46:	4ad8      	ldr	r2, [pc, #864]	; (8002da8 <StartProcess+0x72c>)
 8002a48:	23a0      	movs	r3, #160	; 0xa0
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	58d2      	ldr	r2, [r2, r3]
 8002a4e:	49d6      	ldr	r1, [pc, #856]	; (8002da8 <StartProcess+0x72c>)
 8002a50:	23b2      	movs	r3, #178	; 0xb2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	58cb      	ldr	r3, [r1, r3]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d200      	bcs.n	8002a5c <StartProcess+0x3e0>
 8002a5a:	e0a7      	b.n	8002bac <StartProcess+0x530>
						Process.Flags.Cleaning.TimerEnable_Water 			= 	RESET				;
 8002a5c:	4ad2      	ldr	r2, [pc, #840]	; (8002da8 <StartProcess+0x72c>)
 8002a5e:	23ee      	movs	r3, #238	; 0xee
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	18d3      	adds	r3, r2, r3
 8002a64:	785a      	ldrb	r2, [r3, #1]
 8002a66:	217f      	movs	r1, #127	; 0x7f
 8002a68:	400a      	ands	r2, r1
 8002a6a:	705a      	strb	r2, [r3, #1]
						Process.Variables.Cleaning.TimerCounts_MotorLevelUp = 	RESET				;
 8002a6c:	4ace      	ldr	r2, [pc, #824]	; (8002da8 <StartProcess+0x72c>)
 8002a6e:	23a0      	movs	r3, #160	; 0xa0
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2100      	movs	r1, #0
 8002a74:	50d1      	str	r1, [r2, r3]
						Process.Variables.Cleaning.ProcessExecution 		= 	StirrerMotor		;
 8002a76:	4acc      	ldr	r2, [pc, #816]	; (8002da8 <StartProcess+0x72c>)
 8002a78:	239c      	movs	r3, #156	; 0x9c
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	2105      	movs	r1, #5
 8002a7e:	50d1      	str	r1, [r2, r3]
						Motor_CleaningWater_Stop	()												;
 8002a80:	f000 fd96 	bl	80035b0 <Motor_CleaningWater_Stop>
					break	;
 8002a84:	e092      	b.n	8002bac <StartProcess+0x530>
					Process.Flags.Cleaning.TimerEnable_StirrerWater			=	SET						;
 8002a86:	4ac8      	ldr	r2, [pc, #800]	; (8002da8 <StartProcess+0x72c>)
 8002a88:	23ee      	movs	r3, #238	; 0xee
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	18d3      	adds	r3, r2, r3
 8002a8e:	789a      	ldrb	r2, [r3, #2]
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	430a      	orrs	r2, r1
 8002a94:	709a      	strb	r2, [r3, #2]
					if(Process.Variables.Cleaning.TimerCounts_StirrerWater	>= 	Process.Variables.Cleaning.RxStirrerOnTimeWaterCycle)
 8002a96:	4ac4      	ldr	r2, [pc, #784]	; (8002da8 <StartProcess+0x72c>)
 8002a98:	23aa      	movs	r3, #170	; 0xaa
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	58d2      	ldr	r2, [r2, r3]
 8002a9e:	49c2      	ldr	r1, [pc, #776]	; (8002da8 <StartProcess+0x72c>)
 8002aa0:	23c0      	movs	r3, #192	; 0xc0
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	58cb      	ldr	r3, [r1, r3]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d320      	bcc.n	8002aec <StartProcess+0x470>
						Process.Flags.Cleaning.TimerEnable_StirrerWater 	= 	RESET					;
 8002aaa:	4abf      	ldr	r2, [pc, #764]	; (8002da8 <StartProcess+0x72c>)
 8002aac:	23ee      	movs	r3, #238	; 0xee
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	18d3      	adds	r3, r2, r3
 8002ab2:	789a      	ldrb	r2, [r3, #2]
 8002ab4:	2140      	movs	r1, #64	; 0x40
 8002ab6:	438a      	bics	r2, r1
 8002ab8:	709a      	strb	r2, [r3, #2]
						Process.Variables.Cleaning.TimerCounts_StirrerWater = 	RESET					;
 8002aba:	4abb      	ldr	r2, [pc, #748]	; (8002da8 <StartProcess+0x72c>)
 8002abc:	23aa      	movs	r3, #170	; 0xaa
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	50d1      	str	r1, [r2, r3]
						Motor_Stirrer_Stop	()															;
 8002ac4:	f000 fdb2 	bl	800362c <Motor_Stirrer_Stop>
						switch(Process.Variables.Cleaning.ProcessExeCounts)
 8002ac8:	4ab7      	ldr	r2, [pc, #732]	; (8002da8 <StartProcess+0x72c>)
 8002aca:	239a      	movs	r3, #154	; 0x9a
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	58d3      	ldr	r3, [r2, r3]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d105      	bne.n	8002ae0 <StartProcess+0x464>
							Process.Variables.Cleaning.ProcessExecution 	=	SendAcknowledgement		;
 8002ad4:	4ab4      	ldr	r2, [pc, #720]	; (8002da8 <StartProcess+0x72c>)
 8002ad6:	239c      	movs	r3, #156	; 0x9c
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2108      	movs	r1, #8
 8002adc:	50d1      	str	r1, [r2, r3]
							break;
 8002ade:	e006      	b.n	8002aee <StartProcess+0x472>
							Process.Variables.Cleaning.ProcessExecution 	= 	CheckForLastWaterSteps	;
 8002ae0:	4ab1      	ldr	r2, [pc, #708]	; (8002da8 <StartProcess+0x72c>)
 8002ae2:	239c      	movs	r3, #156	; 0x9c
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2107      	movs	r1, #7
 8002ae8:	50d1      	str	r1, [r2, r3]
							break;
 8002aea:	e000      	b.n	8002aee <StartProcess+0x472>
					}
 8002aec:	46c0      	nop			; (mov r8, r8)
					Process.Flags.Cleaning.ProcessOngoing_Water 	= 	Three							;
 8002aee:	4aae      	ldr	r2, [pc, #696]	; (8002da8 <StartProcess+0x72c>)
 8002af0:	23ee      	movs	r3, #238	; 0xee
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	5ad1      	ldrh	r1, [r2, r3]
 8002af6:	48ad      	ldr	r0, [pc, #692]	; (8002dac <StartProcess+0x730>)
 8002af8:	4001      	ands	r1, r0
 8002afa:	1c08      	adds	r0, r1, #0
 8002afc:	21c0      	movs	r1, #192	; 0xc0
 8002afe:	4301      	orrs	r1, r0
 8002b00:	52d1      	strh	r1, [r2, r3]
					break;
 8002b02:	e054      	b.n	8002bae <StartProcess+0x532>
					if	(	Process.Flags.Cleaning.LevelEmptied	)
 8002b04:	4aa8      	ldr	r2, [pc, #672]	; (8002da8 <StartProcess+0x72c>)
 8002b06:	23de      	movs	r3, #222	; 0xde
 8002b08:	33ff      	adds	r3, #255	; 0xff
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	4013      	ands	r3, r2
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <StartProcess+0x4c4>
						Motor_Milk_Stop	()																;
 8002b16:	f000 fccd 	bl	80034b4 <Motor_Milk_Stop>
						Process.Flags.Cleaning.LevelEmptied 					= 	RESET				;
 8002b1a:	4aa3      	ldr	r2, [pc, #652]	; (8002da8 <StartProcess+0x72c>)
 8002b1c:	23ee      	movs	r3, #238	; 0xee
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	18d3      	adds	r3, r2, r3
 8002b22:	785a      	ldrb	r2, [r3, #1]
 8002b24:	2110      	movs	r1, #16
 8002b26:	438a      	bics	r2, r1
 8002b28:	705a      	strb	r2, [r3, #1]
						Process.Variables.Cleaning.TimerCounts_DrainOut_Water 	= 	RESET				;
 8002b2a:	4a9f      	ldr	r2, [pc, #636]	; (8002da8 <StartProcess+0x72c>)
 8002b2c:	23ae      	movs	r3, #174	; 0xae
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2100      	movs	r1, #0
 8002b32:	50d1      	str	r1, [r2, r3]
						Process.Variables.Cleaning.ProcessExecution 			= 	SendAcknowledgement	;
 8002b34:	4a9c      	ldr	r2, [pc, #624]	; (8002da8 <StartProcess+0x72c>)
 8002b36:	239c      	movs	r3, #156	; 0x9c
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2108      	movs	r1, #8
 8002b3c:	50d1      	str	r1, [r2, r3]
					break;
 8002b3e:	e036      	b.n	8002bae <StartProcess+0x532>
						LevelSensor_DrainOutWaterFromMilkPipe	()										;
 8002b40:	f000 fe98 	bl	8003874 <LevelSensor_DrainOutWaterFromMilkPipe>
						Process.Flags.Cleaning.ProcessOngoing_Water 			= 	Four				;
 8002b44:	4a98      	ldr	r2, [pc, #608]	; (8002da8 <StartProcess+0x72c>)
 8002b46:	23ee      	movs	r3, #238	; 0xee
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	5ad1      	ldrh	r1, [r2, r3]
 8002b4c:	4897      	ldr	r0, [pc, #604]	; (8002dac <StartProcess+0x730>)
 8002b4e:	4001      	ands	r1, r0
 8002b50:	1c08      	adds	r0, r1, #0
 8002b52:	2180      	movs	r1, #128	; 0x80
 8002b54:	0049      	lsls	r1, r1, #1
 8002b56:	4301      	orrs	r1, r0
 8002b58:	52d1      	strh	r1, [r2, r3]
					break;
 8002b5a:	e028      	b.n	8002bae <StartProcess+0x532>
					Process.Flags.Cleaning.ProcessEnable 			= 	RESET	;
 8002b5c:	4a92      	ldr	r2, [pc, #584]	; (8002da8 <StartProcess+0x72c>)
 8002b5e:	23ee      	movs	r3, #238	; 0xee
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	5cd1      	ldrb	r1, [r2, r3]
 8002b64:	2002      	movs	r0, #2
 8002b66:	4381      	bics	r1, r0
 8002b68:	54d1      	strb	r1, [r2, r3]
					Process.Flags.Cleaning.ProcessCompleted_Water	= 	SET		;
 8002b6a:	4a8f      	ldr	r2, [pc, #572]	; (8002da8 <StartProcess+0x72c>)
 8002b6c:	23ee      	movs	r3, #238	; 0xee
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	18d3      	adds	r3, r2, r3
 8002b72:	785a      	ldrb	r2, [r3, #1]
 8002b74:	2104      	movs	r1, #4
 8002b76:	430a      	orrs	r2, r1
 8002b78:	705a      	strb	r2, [r3, #1]
					Process.Flags.Cleaning.ProcessOngoing_Water 	= 	Five	;
 8002b7a:	4a8b      	ldr	r2, [pc, #556]	; (8002da8 <StartProcess+0x72c>)
 8002b7c:	23ee      	movs	r3, #238	; 0xee
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	5ad1      	ldrh	r1, [r2, r3]
 8002b82:	488a      	ldr	r0, [pc, #552]	; (8002dac <StartProcess+0x730>)
 8002b84:	4001      	ands	r1, r0
 8002b86:	1c08      	adds	r0, r1, #0
 8002b88:	21a0      	movs	r1, #160	; 0xa0
 8002b8a:	0049      	lsls	r1, r1, #1
 8002b8c:	4301      	orrs	r1, r0
 8002b8e:	52d1      	strh	r1, [r2, r3]
					Process.Flags.Cleaning.ProcessBusy				=	RESET	;
 8002b90:	4a85      	ldr	r2, [pc, #532]	; (8002da8 <StartProcess+0x72c>)
 8002b92:	23ee      	movs	r3, #238	; 0xee
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	5cd1      	ldrb	r1, [r2, r3]
 8002b98:	2004      	movs	r0, #4
 8002b9a:	4381      	bics	r1, r0
 8002b9c:	54d1      	strb	r1, [r2, r3]
					SSRHeater_OFF_MilkWater	()									;
 8002b9e:	f000 fd90 	bl	80036c2 <SSRHeater_OFF_MilkWater>
					break	;
 8002ba2:	e004      	b.n	8002bae <StartProcess+0x532>
					break	;
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	e004      	b.n	8002bb2 <StartProcess+0x536>
					break	;
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	e002      	b.n	8002bb2 <StartProcess+0x536>
					break	;
 8002bac:	46c0      	nop			; (mov r8, r8)
				break		;
 8002bae:	e000      	b.n	8002bb2 <StartProcess+0x536>
			}
		}
 8002bb0:	46c0      	nop			; (mov r8, r8)




		if	(	Process.Variables.MilkWater.LevelSensor	)
 8002bb2:	4b7d      	ldr	r3, [pc, #500]	; (8002da8 <StartProcess+0x72c>)
 8002bb4:	22cc      	movs	r2, #204	; 0xcc
 8002bb6:	589b      	ldr	r3, [r3, r2]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	1c18      	adds	r0, r3, #0
 8002bbc:	f7fd fb3c 	bl	8000238 <__aeabi_fcmpeq>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d102      	bne.n	8002bca <StartProcess+0x54e>
		{
			Motor_MilkWater_Stop	()							;
 8002bc4:	f000 fc9e 	bl	8003504 <Motor_MilkWater_Stop>
 8002bc8:	e001      	b.n	8002bce <StartProcess+0x552>
		}

		else
		{
			Motor_MilkWater_Clkwise	()						;
 8002bca:	f000 fc87 	bl	80034dc <Motor_MilkWater_Clkwise>
		}


		Process.Variables.InitProcess = Idle				;
 8002bce:	4a76      	ldr	r2, [pc, #472]	; (8002da8 <StartProcess+0x72c>)
 8002bd0:	23c8      	movs	r3, #200	; 0xc8
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2106      	movs	r1, #6
 8002bd6:	54d1      	strb	r1, [r2, r3]
		break	;
 8002bd8:	e2b7      	b.n	800314a <StartProcess+0xace>
	// ***************************  HotWater Cycle  	******************************************** //
	// ********************************************************************************************* //

	case	HotWater:
	{
		Process.Flags.HotWater.Count = SET;
 8002bda:	4a73      	ldr	r2, [pc, #460]	; (8002da8 <StartProcess+0x72c>)
 8002bdc:	23f0      	movs	r3, #240	; 0xf0
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	5cd1      	ldrb	r1, [r2, r3]
 8002be2:	2001      	movs	r0, #1
 8002be4:	4301      	orrs	r1, r0
 8002be6:	54d1      	strb	r1, [r2, r3]

		if(Process.Flags.HotWater.ProcessEnable)
 8002be8:	4a6f      	ldr	r2, [pc, #444]	; (8002da8 <StartProcess+0x72c>)
 8002bea:	23f0      	movs	r3, #240	; 0xf0
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00f      	beq.n	8002c1a <StartProcess+0x59e>
		{
			Motor_HotWater_Clkwise();
 8002bfa:	f000 fd2b 	bl	8003654 <Motor_HotWater_Clkwise>
			Process.Flags.HotWater.TimerEnable = SET;
 8002bfe:	4a6a      	ldr	r2, [pc, #424]	; (8002da8 <StartProcess+0x72c>)
 8002c00:	23f0      	movs	r3, #240	; 0xf0
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	5cd1      	ldrb	r1, [r2, r3]
 8002c06:	2008      	movs	r0, #8
 8002c08:	4301      	orrs	r1, r0
 8002c0a:	54d1      	strb	r1, [r2, r3]
			Process.Flags.HotWater.ProcessEnable = RESET;
 8002c0c:	4a66      	ldr	r2, [pc, #408]	; (8002da8 <StartProcess+0x72c>)
 8002c0e:	23f0      	movs	r3, #240	; 0xf0
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	5cd1      	ldrb	r1, [r2, r3]
 8002c14:	2002      	movs	r0, #2
 8002c16:	4381      	bics	r1, r0
 8002c18:	54d1      	strb	r1, [r2, r3]
		}

		Process.Variables.InitProcess = Idle;
 8002c1a:	4a63      	ldr	r2, [pc, #396]	; (8002da8 <StartProcess+0x72c>)
 8002c1c:	23c8      	movs	r3, #200	; 0xc8
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2106      	movs	r1, #6
 8002c22:	54d1      	strb	r1, [r2, r3]
		break;
 8002c24:	e291      	b.n	800314a <StartProcess+0xace>
	case	Idle:
	{

		static int counts = 0;

		Process.Variables.Milk.LevelSensor_temp_OpampProtection[counts]	=	not	(HAL_GPIO_ReadPin(Milk_LevelSensor_OpampProtection_GPIO_Port, Milk_LevelSensor_OpampProtection_Pin));
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	00da      	lsls	r2, r3, #3
 8002c2a:	2390      	movs	r3, #144	; 0x90
 8002c2c:	05db      	lsls	r3, r3, #23
 8002c2e:	0011      	movs	r1, r2
 8002c30:	0018      	movs	r0, r3
 8002c32:	f001 fea9 	bl	8004988 <HAL_GPIO_ReadPin>
 8002c36:	0003      	movs	r3, r0
 8002c38:	425a      	negs	r2, r3
 8002c3a:	4153      	adcs	r3, r2
 8002c3c:	b2d9      	uxtb	r1, r3
 8002c3e:	4b5c      	ldr	r3, [pc, #368]	; (8002db0 <StartProcess+0x734>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4b59      	ldr	r3, [pc, #356]	; (8002da8 <StartProcess+0x72c>)
 8002c44:	321e      	adds	r2, #30
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	50d1      	str	r1, [r2, r3]
		Process.Variables.Milk.LevelSensor_temp_Float[counts]	=			(HAL_GPIO_ReadPin(Milk_FloatSensor_GPIO_Port, Milk_FloatSensor_Pin));
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4a59      	ldr	r2, [pc, #356]	; (8002db4 <StartProcess+0x738>)
 8002c50:	0019      	movs	r1, r3
 8002c52:	0010      	movs	r0, r2
 8002c54:	f001 fe98 	bl	8004988 <HAL_GPIO_ReadPin>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	4b54      	ldr	r3, [pc, #336]	; (8002db0 <StartProcess+0x734>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0011      	movs	r1, r2
 8002c62:	4a51      	ldr	r2, [pc, #324]	; (8002da8 <StartProcess+0x72c>)
 8002c64:	3312      	adds	r3, #18
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	18d3      	adds	r3, r2, r3
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	6019      	str	r1, [r3, #0]
//		Process.Variables.Milk.LevelSensor_temp[counts] 	 =	not	(HAL_GPIO_ReadPin(Balloff_Read_GPIO_Port, Balloff_Read_Pin));

		Process.Variables.MilkWater.LevelSensor_temp[counts] =	not	(HAL_GPIO_ReadPin(MilkWater_Level_GPIO_Port, MilkWater_Level_Pin));
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	015b      	lsls	r3, r3, #5
 8002c72:	4a51      	ldr	r2, [pc, #324]	; (8002db8 <StartProcess+0x73c>)
 8002c74:	0019      	movs	r1, r3
 8002c76:	0010      	movs	r0, r2
 8002c78:	f001 fe86 	bl	8004988 <HAL_GPIO_ReadPin>
 8002c7c:	1e03      	subs	r3, r0, #0
 8002c7e:	d102      	bne.n	8002c86 <StartProcess+0x60a>
 8002c80:	22fe      	movs	r2, #254	; 0xfe
 8002c82:	0592      	lsls	r2, r2, #22
 8002c84:	e000      	b.n	8002c88 <StartProcess+0x60c>
 8002c86:	2200      	movs	r2, #0
 8002c88:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <StartProcess+0x734>)
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <StartProcess+0x72c>)
 8002c8e:	3134      	adds	r1, #52	; 0x34
 8002c90:	0089      	lsls	r1, r1, #2
 8002c92:	50ca      	str	r2, [r1, r3]
		Process.Variables.Water.LevelSensor_temp[counts++]	 =  	(HAL_GPIO_ReadPin(Water_LevelSensor_GPIO_Port, Water_LevelSensor_Pin));
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	011a      	lsls	r2, r3, #4
 8002c98:	2390      	movs	r3, #144	; 0x90
 8002c9a:	05db      	lsls	r3, r3, #23
 8002c9c:	0011      	movs	r1, r2
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f001 fe72 	bl	8004988 <HAL_GPIO_ReadPin>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <StartProcess+0x734>)
 8002caa:	681c      	ldr	r4, [r3, #0]
 8002cac:	1c62      	adds	r2, r4, #1
 8002cae:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <StartProcess+0x734>)
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	0008      	movs	r0, r1
 8002cb4:	f7fe f8a6 	bl	8000e04 <__aeabi_ui2f>
 8002cb8:	1c01      	adds	r1, r0, #0
 8002cba:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <StartProcess+0x72c>)
 8002cbc:	0022      	movs	r2, r4
 8002cbe:	3242      	adds	r2, #66	; 0x42
 8002cc0:	0092      	lsls	r2, r2, #2
 8002cc2:	50d1      	str	r1, [r2, r3]
		//		Process.Variables.Milk.LevelSensor_temp[counts] 	 = not	(HAL_GPIO_ReadPin(Level_Toggling_2_GPIO_Port, Level_Toggling_2_Pin));
		//		Process.Variables.Water.LevelSensor_temp[counts++]	 = 		(HAL_GPIO_ReadPin(ADC_Water_Level_GPIO_Port, ADC_Water_Level_Pin));

		// ******************************************************************************* //

		if(counts == LevelBuffer)
 8002cc4:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <StartProcess+0x734>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b0a      	cmp	r3, #10
 8002cca:	d000      	beq.n	8002cce <StartProcess+0x652>
 8002ccc:	e095      	b.n	8002dfa <StartProcess+0x77e>
		{
			counts 					= 	RESET;
 8002cce:	4b38      	ldr	r3, [pc, #224]	; (8002db0 <StartProcess+0x734>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
			uint8_t LevelMilk 		= 	RESET;
 8002cd4:	1dfb      	adds	r3, r7, #7
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
			uint8_t LevelMilkWater 	= 	RESET;
 8002cda:	1dbb      	adds	r3, r7, #6
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
			uint8_t LevelWater 		= 	RESET;
 8002ce0:	1d7b      	adds	r3, r7, #5
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]

			uint8_t LevelMilkLevelProtection 	= 	RESET;
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]


			for(int x = 0; x < LevelBuffer; x++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	e042      	b.n	8002d78 <StartProcess+0x6fc>
			{
//				LevelMilk		+= 	Process.Variables.Milk.LevelSensor_temp[x];
				LevelMilk +=	Process.Variables.Milk.LevelSensor_temp_Float[x];
 8002cf2:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <StartProcess+0x72c>)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	3312      	adds	r3, #18
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	18d3      	adds	r3, r2, r3
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	b2d9      	uxtb	r1, r3
 8002d02:	1dfb      	adds	r3, r7, #7
 8002d04:	1dfa      	adds	r2, r7, #7
 8002d06:	7812      	ldrb	r2, [r2, #0]
 8002d08:	188a      	adds	r2, r1, r2
 8002d0a:	701a      	strb	r2, [r3, #0]

				LevelMilkWater 	+= 	Process.Variables.MilkWater.LevelSensor_temp[x];
 8002d0c:	1dbb      	adds	r3, r7, #6
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7fe f82d 	bl	8000d70 <__aeabi_i2f>
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <StartProcess+0x72c>)
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	3234      	adds	r2, #52	; 0x34
 8002d1c:	0092      	lsls	r2, r2, #2
 8002d1e:	58d3      	ldr	r3, [r2, r3]
 8002d20:	1c19      	adds	r1, r3, #0
 8002d22:	f7fd facf 	bl	80002c4 <__aeabi_fadd>
 8002d26:	1c03      	adds	r3, r0, #0
 8002d28:	1dbc      	adds	r4, r7, #6
 8002d2a:	1c18      	adds	r0, r3, #0
 8002d2c:	f7fd fab2 	bl	8000294 <__aeabi_f2uiz>
 8002d30:	0003      	movs	r3, r0
 8002d32:	7023      	strb	r3, [r4, #0]
				LevelWater 		+= 	Process.Variables.Water.LevelSensor_temp[x];
 8002d34:	1d7b      	adds	r3, r7, #5
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f7fe f819 	bl	8000d70 <__aeabi_i2f>
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <StartProcess+0x72c>)
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	3242      	adds	r2, #66	; 0x42
 8002d44:	0092      	lsls	r2, r2, #2
 8002d46:	58d3      	ldr	r3, [r2, r3]
 8002d48:	1c19      	adds	r1, r3, #0
 8002d4a:	f7fd fabb 	bl	80002c4 <__aeabi_fadd>
 8002d4e:	1c03      	adds	r3, r0, #0
 8002d50:	1d7c      	adds	r4, r7, #5
 8002d52:	1c18      	adds	r0, r3, #0
 8002d54:	f7fd fa9e 	bl	8000294 <__aeabi_f2uiz>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	7023      	strb	r3, [r4, #0]
				LevelMilkLevelProtection +=	Process.Variables.Milk.LevelSensor_temp_OpampProtection[x];
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <StartProcess+0x72c>)
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	321e      	adds	r2, #30
 8002d62:	0092      	lsls	r2, r2, #2
 8002d64:	58d3      	ldr	r3, [r2, r3]
 8002d66:	b2d9      	uxtb	r1, r3
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	1d3a      	adds	r2, r7, #4
 8002d6c:	7812      	ldrb	r2, [r2, #0]
 8002d6e:	188a      	adds	r2, r1, r2
 8002d70:	701a      	strb	r2, [r3, #0]
			for(int x = 0; x < LevelBuffer; x++)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b09      	cmp	r3, #9
 8002d7c:	d9b9      	bls.n	8002cf2 <StartProcess+0x676>

			}


			if	(LevelMilk 		>= 8)					Process.Variables.Milk.LevelSensor					=	SET;
 8002d7e:	1dfb      	adds	r3, r7, #7
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b07      	cmp	r3, #7
 8002d84:	d903      	bls.n	8002d8e <StartProcess+0x712>
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <StartProcess+0x72c>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	61da      	str	r2, [r3, #28]
 8002d8c:	e002      	b.n	8002d94 <StartProcess+0x718>
			else										Process.Variables.Milk.LevelSensor					=	RESET;
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <StartProcess+0x72c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	61da      	str	r2, [r3, #28]

			if	(LevelMilkWater >= 8)					Process.Variables.MilkWater.LevelSensor				=	SET;
 8002d94:	1dbb      	adds	r3, r7, #6
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b07      	cmp	r3, #7
 8002d9a:	d90f      	bls.n	8002dbc <StartProcess+0x740>
 8002d9c:	4b02      	ldr	r3, [pc, #8]	; (8002da8 <StartProcess+0x72c>)
 8002d9e:	22cc      	movs	r2, #204	; 0xcc
 8002da0:	21fe      	movs	r1, #254	; 0xfe
 8002da2:	0589      	lsls	r1, r1, #22
 8002da4:	5099      	str	r1, [r3, r2]
 8002da6:	e00d      	b.n	8002dc4 <StartProcess+0x748>
 8002da8:	20000120 	.word	0x20000120
 8002dac:	fffffe3f 	.word	0xfffffe3f
 8002db0:	200000b0 	.word	0x200000b0
 8002db4:	48000400 	.word	0x48000400
 8002db8:	48000800 	.word	0x48000800
			else										Process.Variables.MilkWater.LevelSensor 			= 	RESET;
 8002dbc:	4bd8      	ldr	r3, [pc, #864]	; (8003120 <StartProcess+0xaa4>)
 8002dbe:	22cc      	movs	r2, #204	; 0xcc
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	5099      	str	r1, [r3, r2]

			if	(LevelWater 	>= 8)					Process.Variables.Water.LevelSensor					=	SET;
 8002dc4:	1d7b      	adds	r3, r7, #5
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b07      	cmp	r3, #7
 8002dca:	d906      	bls.n	8002dda <StartProcess+0x75e>
 8002dcc:	4ad4      	ldr	r2, [pc, #848]	; (8003120 <StartProcess+0xaa4>)
 8002dce:	2382      	movs	r3, #130	; 0x82
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	21fe      	movs	r1, #254	; 0xfe
 8002dd4:	0589      	lsls	r1, r1, #22
 8002dd6:	50d1      	str	r1, [r2, r3]
 8002dd8:	e004      	b.n	8002de4 <StartProcess+0x768>
			else										Process.Variables.Water.LevelSensor 				= 	RESET;
 8002dda:	4ad1      	ldr	r2, [pc, #836]	; (8003120 <StartProcess+0xaa4>)
 8002ddc:	2382      	movs	r3, #130	; 0x82
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	2100      	movs	r1, #0
 8002de2:	50d1      	str	r1, [r2, r3]

			if	(LevelMilkLevelProtection	>=	8)		Process.Variables.Milk.LevelSensor_OpampProtection	=	SET;		// OverProtection step is taken in timer
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b07      	cmp	r3, #7
 8002dea:	d903      	bls.n	8002df4 <StartProcess+0x778>
 8002dec:	4bcc      	ldr	r3, [pc, #816]	; (8003120 <StartProcess+0xaa4>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	675a      	str	r2, [r3, #116]	; 0x74
 8002df2:	e002      	b.n	8002dfa <StartProcess+0x77e>
			else										Process.Variables.Milk.LevelSensor_OpampProtection 	= 	RESET;
 8002df4:	4bca      	ldr	r3, [pc, #808]	; (8003120 <StartProcess+0xaa4>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	675a      	str	r2, [r3, #116]	; 0x74

		}



		Temperature_NextValue_Milk 							= 	DigitalSensor_Read_Milk();
 8002dfa:	f7fe fc1d 	bl	8001638 <DigitalSensor_Read_Milk>
 8002dfe:	1c03      	adds	r3, r0, #0
 8002e00:	1c18      	adds	r0, r3, #0
 8002e02:	f7fd ff95 	bl	8000d30 <__aeabi_f2iz>
 8002e06:	0002      	movs	r2, r0
 8002e08:	4bc6      	ldr	r3, [pc, #792]	; (8003124 <StartProcess+0xaa8>)
 8002e0a:	601a      	str	r2, [r3, #0]

		if (	(	(Temperature_NextValue_Milk - Temperature_PreviousValue_Milk)			<=		2	)
 8002e0c:	4bc5      	ldr	r3, [pc, #788]	; (8003124 <StartProcess+0xaa8>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4bc5      	ldr	r3, [pc, #788]	; (8003128 <StartProcess+0xaac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	dd06      	ble.n	8002e28 <StartProcess+0x7ac>
				or	(	(Temperature_PreviousValue_Milk - Temperature_NextValue_Milk)		<=		2	)	)
 8002e1a:	4bc3      	ldr	r3, [pc, #780]	; (8003128 <StartProcess+0xaac>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4bc1      	ldr	r3, [pc, #772]	; (8003124 <StartProcess+0xaa8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	dc10      	bgt.n	8002e4a <StartProcess+0x7ce>
		{

			if (	Temperature_NextValue_Milk <= 100	)
 8002e28:	4bbe      	ldr	r3, [pc, #760]	; (8003124 <StartProcess+0xaa8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b64      	cmp	r3, #100	; 0x64
 8002e2e:	dc07      	bgt.n	8002e40 <StartProcess+0x7c4>
				Process.Variables.Milk.Temperature.Read 	= 	Temperature_NextValue_Milk;
 8002e30:	4bbc      	ldr	r3, [pc, #752]	; (8003124 <StartProcess+0xaa8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7fd ff9b 	bl	8000d70 <__aeabi_i2f>
 8002e3a:	1c02      	adds	r2, r0, #0
 8002e3c:	4bb8      	ldr	r3, [pc, #736]	; (8003120 <StartProcess+0xaa4>)
 8002e3e:	601a      	str	r2, [r3, #0]
			{
				Temperature_PreviousValue_Milk					=	Temperature_NextValue_Milk;
 8002e40:	4bb8      	ldr	r3, [pc, #736]	; (8003124 <StartProcess+0xaa8>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4bb8      	ldr	r3, [pc, #736]	; (8003128 <StartProcess+0xaac>)
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e007      	b.n	8002e5a <StartProcess+0x7de>
			}

		}
		else
			Process.Variables.Milk.Temperature.Read 		= 	Temperature_PreviousValue_Milk;
 8002e4a:	4bb7      	ldr	r3, [pc, #732]	; (8003128 <StartProcess+0xaac>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7fd ff8e 	bl	8000d70 <__aeabi_i2f>
 8002e54:	1c02      	adds	r2, r0, #0
 8002e56:	4bb2      	ldr	r3, [pc, #712]	; (8003120 <StartProcess+0xaa4>)
 8002e58:	601a      	str	r2, [r3, #0]



		Temperature_NextValue_MilkWater 					= 	DigitalSensor_Read_MilkWater();
 8002e5a:	f7fe fb4b 	bl	80014f4 <DigitalSensor_Read_MilkWater>
 8002e5e:	1c03      	adds	r3, r0, #0
 8002e60:	1c18      	adds	r0, r3, #0
 8002e62:	f7fd ff65 	bl	8000d30 <__aeabi_f2iz>
 8002e66:	0002      	movs	r2, r0
 8002e68:	4bb0      	ldr	r3, [pc, #704]	; (800312c <StartProcess+0xab0>)
 8002e6a:	601a      	str	r2, [r3, #0]

		if (	(	(Temperature_NextValue_MilkWater - Temperature_PreviousValue_MilkWater) 	<=		2	)
 8002e6c:	4baf      	ldr	r3, [pc, #700]	; (800312c <StartProcess+0xab0>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4baf      	ldr	r3, [pc, #700]	; (8003130 <StartProcess+0xab4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	dd06      	ble.n	8002e88 <StartProcess+0x80c>
				or	(	(Temperature_PreviousValue_MilkWater - Temperature_NextValue_MilkWater) <=		2	)	)
 8002e7a:	4bad      	ldr	r3, [pc, #692]	; (8003130 <StartProcess+0xab4>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4bab      	ldr	r3, [pc, #684]	; (800312c <StartProcess+0xab0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	dc11      	bgt.n	8002eac <StartProcess+0x830>
		{

			if	(Temperature_NextValue_MilkWater	<=	100	)
 8002e88:	4ba8      	ldr	r3, [pc, #672]	; (800312c <StartProcess+0xab0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	dc08      	bgt.n	8002ea2 <StartProcess+0x826>
				Process.Variables.MilkWater.Temperature.Read 	= 	Temperature_NextValue_MilkWater;
 8002e90:	4ba6      	ldr	r3, [pc, #664]	; (800312c <StartProcess+0xab0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7fd ff6b 	bl	8000d70 <__aeabi_i2f>
 8002e9a:	1c01      	adds	r1, r0, #0
 8002e9c:	4ba0      	ldr	r3, [pc, #640]	; (8003120 <StartProcess+0xaa4>)
 8002e9e:	22b8      	movs	r2, #184	; 0xb8
 8002ea0:	5099      	str	r1, [r3, r2]

			Temperature_PreviousValue_MilkWater				=	Temperature_NextValue_MilkWater;
 8002ea2:	4ba2      	ldr	r3, [pc, #648]	; (800312c <StartProcess+0xab0>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4ba2      	ldr	r3, [pc, #648]	; (8003130 <StartProcess+0xab4>)
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e008      	b.n	8002ebe <StartProcess+0x842>

		}
		else
			Process.Variables.MilkWater.Temperature.Read 	= 	Temperature_PreviousValue_MilkWater;
 8002eac:	4ba0      	ldr	r3, [pc, #640]	; (8003130 <StartProcess+0xab4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7fd ff5d 	bl	8000d70 <__aeabi_i2f>
 8002eb6:	1c01      	adds	r1, r0, #0
 8002eb8:	4b99      	ldr	r3, [pc, #612]	; (8003120 <StartProcess+0xaa4>)
 8002eba:	22b8      	movs	r2, #184	; 0xb8
 8002ebc:	5099      	str	r1, [r3, r2]



		Temperature_NextValue_Water 						= 	DigitalSensor_Read_Water();
 8002ebe:	f7fe fb6a 	bl	8001596 <DigitalSensor_Read_Water>
 8002ec2:	1c03      	adds	r3, r0, #0
 8002ec4:	1c18      	adds	r0, r3, #0
 8002ec6:	f7fd ff33 	bl	8000d30 <__aeabi_f2iz>
 8002eca:	0002      	movs	r2, r0
 8002ecc:	4b99      	ldr	r3, [pc, #612]	; (8003134 <StartProcess+0xab8>)
 8002ece:	601a      	str	r2, [r3, #0]

		if (	(	(Temperature_NextValue_Water - Temperature_PreviousValue_Water	)		<=		2	)
 8002ed0:	4b98      	ldr	r3, [pc, #608]	; (8003134 <StartProcess+0xab8>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b98      	ldr	r3, [pc, #608]	; (8003138 <StartProcess+0xabc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	dd06      	ble.n	8002eec <StartProcess+0x870>
				or	(	(Temperature_PreviousValue_Water - Temperature_NextValue_Water	)	<=		2	)	)
 8002ede:	4b96      	ldr	r3, [pc, #600]	; (8003138 <StartProcess+0xabc>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b94      	ldr	r3, [pc, #592]	; (8003134 <StartProcess+0xab8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	dc11      	bgt.n	8002f10 <StartProcess+0x894>
		{

			if	(Temperature_NextValue_Water	<= 	100	)
 8002eec:	4b91      	ldr	r3, [pc, #580]	; (8003134 <StartProcess+0xab8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	dc08      	bgt.n	8002f06 <StartProcess+0x88a>
				Process.Variables.Water.Temperature.Read 	= 	Temperature_NextValue_Water;
 8002ef4:	4b8f      	ldr	r3, [pc, #572]	; (8003134 <StartProcess+0xab8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7fd ff39 	bl	8000d70 <__aeabi_i2f>
 8002efe:	1c01      	adds	r1, r0, #0
 8002f00:	4b87      	ldr	r3, [pc, #540]	; (8003120 <StartProcess+0xaa4>)
 8002f02:	22f8      	movs	r2, #248	; 0xf8
 8002f04:	5099      	str	r1, [r3, r2]

			Temperature_PreviousValue_Water					=	Temperature_NextValue_Water;
 8002f06:	4b8b      	ldr	r3, [pc, #556]	; (8003134 <StartProcess+0xab8>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	4b8b      	ldr	r3, [pc, #556]	; (8003138 <StartProcess+0xabc>)
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e008      	b.n	8002f22 <StartProcess+0x8a6>

		}
		else
			Process.Variables.Water.Temperature.Read 		= 	Temperature_PreviousValue_Water;
 8002f10:	4b89      	ldr	r3, [pc, #548]	; (8003138 <StartProcess+0xabc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7fd ff2b 	bl	8000d70 <__aeabi_i2f>
 8002f1a:	1c01      	adds	r1, r0, #0
 8002f1c:	4b80      	ldr	r3, [pc, #512]	; (8003120 <StartProcess+0xaa4>)
 8002f1e:	22f8      	movs	r2, #248	; 0xf8
 8002f20:	5099      	str	r1, [r3, r2]



		if(Process.Variables.MilkWater.Temperature.Read > MaxTemperatureValue)	SSRHeater_OFF_MilkWater();
 8002f22:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <StartProcess+0xaa4>)
 8002f24:	22b8      	movs	r2, #184	; 0xb8
 8002f26:	589b      	ldr	r3, [r3, r2]
 8002f28:	4984      	ldr	r1, [pc, #528]	; (800313c <StartProcess+0xac0>)
 8002f2a:	1c18      	adds	r0, r3, #0
 8002f2c:	f7fd f99e 	bl	800026c <__aeabi_fcmpgt>
 8002f30:	1e03      	subs	r3, r0, #0
 8002f32:	d001      	beq.n	8002f38 <StartProcess+0x8bc>
 8002f34:	f000 fbc5 	bl	80036c2 <SSRHeater_OFF_MilkWater>
		if(Process.Variables.Water.Temperature.Read > MaxTemperatureValue)		SSRHeater_OFF_Water();
 8002f38:	4b79      	ldr	r3, [pc, #484]	; (8003120 <StartProcess+0xaa4>)
 8002f3a:	22f8      	movs	r2, #248	; 0xf8
 8002f3c:	589b      	ldr	r3, [r3, r2]
 8002f3e:	497f      	ldr	r1, [pc, #508]	; (800313c <StartProcess+0xac0>)
 8002f40:	1c18      	adds	r0, r3, #0
 8002f42:	f7fd f993 	bl	800026c <__aeabi_fcmpgt>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d001      	beq.n	8002f4e <StartProcess+0x8d2>
 8002f4a:	f000 fbd5 	bl	80036f8 <SSRHeater_OFF_Water>


		HAL_GPIO_WritePin(USART_DE_GPIO_Port, USART_DE_Pin, RESET);
 8002f4e:	2390      	movs	r3, #144	; 0x90
 8002f50:	05db      	lsls	r3, r3, #23
 8002f52:	2200      	movs	r2, #0
 8002f54:	2102      	movs	r1, #2
 8002f56:	0018      	movs	r0, r3
 8002f58:	f001 fd33 	bl	80049c2 <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart2, Process.Variables.ReceivedData, sizeof(Process.Variables.ReceivedData));
 8002f5c:	4978      	ldr	r1, [pc, #480]	; (8003140 <StartProcess+0xac4>)
 8002f5e:	4b79      	ldr	r3, [pc, #484]	; (8003144 <StartProcess+0xac8>)
 8002f60:	2240      	movs	r2, #64	; 0x40
 8002f62:	0018      	movs	r0, r3
 8002f64:	f003 f90e 	bl	8006184 <HAL_UART_Receive_IT>


		if	(Process.Flags.StopInitiated)
 8002f68:	4a6d      	ldr	r2, [pc, #436]	; (8003120 <StartProcess+0xaa4>)
 8002f6a:	23f6      	movs	r3, #246	; 0xf6
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	5cd3      	ldrb	r3, [r2, r3]
 8002f70:	2201      	movs	r2, #1
 8002f72:	4013      	ands	r3, r2
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00c      	beq.n	8002f94 <StartProcess+0x918>
		{
			Process.Flags.StopInitiated				=	RESET;
 8002f7a:	4a69      	ldr	r2, [pc, #420]	; (8003120 <StartProcess+0xaa4>)
 8002f7c:	23f6      	movs	r3, #246	; 0xf6
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	5cd1      	ldrb	r1, [r2, r3]
 8002f82:	2001      	movs	r0, #1
 8002f84:	4381      	bics	r1, r0
 8002f86:	54d1      	strb	r1, [r2, r3]
			Process.Variables.InitProcess			=	Stop;
 8002f88:	4a65      	ldr	r2, [pc, #404]	; (8003120 <StartProcess+0xaa4>)
 8002f8a:	23c8      	movs	r3, #200	; 0xc8
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2108      	movs	r1, #8
 8002f90:	54d1      	strb	r1, [r2, r3]
			break;
 8002f92:	e0da      	b.n	800314a <StartProcess+0xace>
		}

		 */


		switch(Process.Flags.MilkWater.Count)
 8002f94:	4a62      	ldr	r2, [pc, #392]	; (8003120 <StartProcess+0xaa4>)
 8002f96:	23ea      	movs	r3, #234	; 0xea
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	07db      	lsls	r3, r3, #31
 8002f9e:	0fdb      	lsrs	r3, r3, #31
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d067      	beq.n	8003076 <StartProcess+0x9fa>
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d000      	beq.n	8002fac <StartProcess+0x930>
			break;
		}


		default:
			break;
 8002faa:	e06a      	b.n	8003082 <StartProcess+0xa06>
			switch(Process.Flags.Water.Count)
 8002fac:	4a5c      	ldr	r2, [pc, #368]	; (8003120 <StartProcess+0xaa4>)
 8002fae:	23ec      	movs	r3, #236	; 0xec
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	07db      	lsls	r3, r3, #31
 8002fb6:	0fdb      	lsrs	r3, r3, #31
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d054      	beq.n	8003068 <StartProcess+0x9ec>
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d000      	beq.n	8002fc4 <StartProcess+0x948>
				break;
 8002fc2:	e057      	b.n	8003074 <StartProcess+0x9f8>
				if	(	Process.Flags.Cleaning.ProcessEnable	)
 8002fc4:	4a56      	ldr	r2, [pc, #344]	; (8003120 <StartProcess+0xaa4>)
 8002fc6:	23ee      	movs	r3, #238	; 0xee
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	4013      	ands	r3, r2
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01a      	beq.n	800300c <StartProcess+0x990>
					Process.Flags.MilkWater.Count 	= 	SET;
 8002fd6:	4a52      	ldr	r2, [pc, #328]	; (8003120 <StartProcess+0xaa4>)
 8002fd8:	23ea      	movs	r3, #234	; 0xea
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	5cd1      	ldrb	r1, [r2, r3]
 8002fde:	2001      	movs	r0, #1
 8002fe0:	4301      	orrs	r1, r0
 8002fe2:	54d1      	strb	r1, [r2, r3]
					Process.Flags.HotWater.Count 	= 	SET;
 8002fe4:	4a4e      	ldr	r2, [pc, #312]	; (8003120 <StartProcess+0xaa4>)
 8002fe6:	23f0      	movs	r3, #240	; 0xf0
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	5cd1      	ldrb	r1, [r2, r3]
 8002fec:	2001      	movs	r0, #1
 8002fee:	4301      	orrs	r1, r0
 8002ff0:	54d1      	strb	r1, [r2, r3]
					Process.Flags.Water.Count 		= 	RESET;
 8002ff2:	4a4b      	ldr	r2, [pc, #300]	; (8003120 <StartProcess+0xaa4>)
 8002ff4:	23ec      	movs	r3, #236	; 0xec
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	5cd1      	ldrb	r1, [r2, r3]
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	4381      	bics	r1, r0
 8002ffe:	54d1      	strb	r1, [r2, r3]
					Process.Variables.InitProcess 	= 	Cleaning;
 8003000:	4a47      	ldr	r2, [pc, #284]	; (8003120 <StartProcess+0xaa4>)
 8003002:	23c8      	movs	r3, #200	; 0xc8
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2104      	movs	r1, #4
 8003008:	54d1      	strb	r1, [r2, r3]
				break;
 800300a:	e033      	b.n	8003074 <StartProcess+0x9f8>
				else if	(	(	Process.Flags.HotWater.Count) and (not(Process.Flags.Cleaning.ProcessEnable)	)	)
 800300c:	4a44      	ldr	r2, [pc, #272]	; (8003120 <StartProcess+0xaa4>)
 800300e:	23f0      	movs	r3, #240	; 0xf0
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	5cd3      	ldrb	r3, [r2, r3]
 8003014:	2201      	movs	r2, #1
 8003016:	4013      	ands	r3, r2
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01e      	beq.n	800305c <StartProcess+0x9e0>
 800301e:	4a40      	ldr	r2, [pc, #256]	; (8003120 <StartProcess+0xaa4>)
 8003020:	23ee      	movs	r3, #238	; 0xee
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	5cd3      	ldrb	r3, [r2, r3]
 8003026:	2202      	movs	r2, #2
 8003028:	4013      	ands	r3, r2
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d115      	bne.n	800305c <StartProcess+0x9e0>
					Process.Flags.MilkWater.Count 	= 	RESET;
 8003030:	4a3b      	ldr	r2, [pc, #236]	; (8003120 <StartProcess+0xaa4>)
 8003032:	23ea      	movs	r3, #234	; 0xea
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	5cd1      	ldrb	r1, [r2, r3]
 8003038:	2001      	movs	r0, #1
 800303a:	4381      	bics	r1, r0
 800303c:	54d1      	strb	r1, [r2, r3]
					Process.Flags.Water.Count 		= 	RESET;
 800303e:	4a38      	ldr	r2, [pc, #224]	; (8003120 <StartProcess+0xaa4>)
 8003040:	23ec      	movs	r3, #236	; 0xec
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	5cd1      	ldrb	r1, [r2, r3]
 8003046:	2001      	movs	r0, #1
 8003048:	4381      	bics	r1, r0
 800304a:	54d1      	strb	r1, [r2, r3]
					Process.Flags.HotWater.Count 	= 	RESET;
 800304c:	4a34      	ldr	r2, [pc, #208]	; (8003120 <StartProcess+0xaa4>)
 800304e:	23f0      	movs	r3, #240	; 0xf0
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	5cd1      	ldrb	r1, [r2, r3]
 8003054:	2001      	movs	r0, #1
 8003056:	4381      	bics	r1, r0
 8003058:	54d1      	strb	r1, [r2, r3]
					break;
 800305a:	e00b      	b.n	8003074 <StartProcess+0x9f8>
					Process.Variables.InitProcess	= 	HotWater;
 800305c:	4a30      	ldr	r2, [pc, #192]	; (8003120 <StartProcess+0xaa4>)
 800305e:	23c8      	movs	r3, #200	; 0xc8
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2105      	movs	r1, #5
 8003064:	54d1      	strb	r1, [r2, r3]
				break;
 8003066:	e005      	b.n	8003074 <StartProcess+0x9f8>
				Process.Variables.InitProcess = Water;
 8003068:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <StartProcess+0xaa4>)
 800306a:	23c8      	movs	r3, #200	; 0xc8
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2103      	movs	r1, #3
 8003070:	54d1      	strb	r1, [r2, r3]
				break;
 8003072:	46c0      	nop			; (mov r8, r8)
			break;
 8003074:	e005      	b.n	8003082 <StartProcess+0xa06>
			Process.Variables.InitProcess = Milk_Water;
 8003076:	4a2a      	ldr	r2, [pc, #168]	; (8003120 <StartProcess+0xaa4>)
 8003078:	23c8      	movs	r3, #200	; 0xc8
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	2102      	movs	r1, #2
 800307e:	54d1      	strb	r1, [r2, r3]
			break;
 8003080:	46c0      	nop			; (mov r8, r8)

		}

		break;
 8003082:	e062      	b.n	800314a <StartProcess+0xace>
	case	Error	:
	{
		//				Process.Flags.ErrorGenerated			=	SET		;


		Process.Variables.InitProcess 			= 	Stop	;
 8003084:	4a26      	ldr	r2, [pc, #152]	; (8003120 <StartProcess+0xaa4>)
 8003086:	23c8      	movs	r3, #200	; 0xc8
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2108      	movs	r1, #8
 800308c:	54d1      	strb	r1, [r2, r3]
		break;
 800308e:	e05c      	b.n	800314a <StartProcess+0xace>
	// ***************************	 Halt All Process	******************************************** //
	// ********************************************************************************************* //
	case	Stop	:
	{

		Process.Flags.Water.ProcessEnable 		= 	RESET	;
 8003090:	4a23      	ldr	r2, [pc, #140]	; (8003120 <StartProcess+0xaa4>)
 8003092:	23ec      	movs	r3, #236	; 0xec
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	5cd1      	ldrb	r1, [r2, r3]
 8003098:	2002      	movs	r0, #2
 800309a:	4381      	bics	r1, r0
 800309c:	54d1      	strb	r1, [r2, r3]
		Process.Flags.Cleaning.ProcessEnable 	= 	RESET	;
 800309e:	4a20      	ldr	r2, [pc, #128]	; (8003120 <StartProcess+0xaa4>)
 80030a0:	23ee      	movs	r3, #238	; 0xee
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	5cd1      	ldrb	r1, [r2, r3]
 80030a6:	2002      	movs	r0, #2
 80030a8:	4381      	bics	r1, r0
 80030aa:	54d1      	strb	r1, [r2, r3]
		Process.Flags.MilkWater.ProcessEnable 	= 	RESET	;
 80030ac:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <StartProcess+0xaa4>)
 80030ae:	23ea      	movs	r3, #234	; 0xea
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	5cd1      	ldrb	r1, [r2, r3]
 80030b4:	2002      	movs	r0, #2
 80030b6:	4381      	bics	r1, r0
 80030b8:	54d1      	strb	r1, [r2, r3]
		Process.Flags.MilkWater.Count 			= 	RESET	;
 80030ba:	4a19      	ldr	r2, [pc, #100]	; (8003120 <StartProcess+0xaa4>)
 80030bc:	23ea      	movs	r3, #234	; 0xea
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	5cd1      	ldrb	r1, [r2, r3]
 80030c2:	2001      	movs	r0, #1
 80030c4:	4381      	bics	r1, r0
 80030c6:	54d1      	strb	r1, [r2, r3]
		Process.Flags.Water.Count 				= 	RESET	;
 80030c8:	4a15      	ldr	r2, [pc, #84]	; (8003120 <StartProcess+0xaa4>)
 80030ca:	23ec      	movs	r3, #236	; 0xec
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	5cd1      	ldrb	r1, [r2, r3]
 80030d0:	2001      	movs	r0, #1
 80030d2:	4381      	bics	r1, r0
 80030d4:	54d1      	strb	r1, [r2, r3]
		Process.Flags.HotWater.Count 			= 	RESET	;
 80030d6:	4a12      	ldr	r2, [pc, #72]	; (8003120 <StartProcess+0xaa4>)
 80030d8:	23f0      	movs	r3, #240	; 0xf0
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	5cd1      	ldrb	r1, [r2, r3]
 80030de:	2001      	movs	r0, #1
 80030e0:	4381      	bics	r1, r0
 80030e2:	54d1      	strb	r1, [r2, r3]
		Process.Flags.Cleaning.Count 			= 	RESET	;
 80030e4:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <StartProcess+0xaa4>)
 80030e6:	23ee      	movs	r3, #238	; 0xee
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	5cd1      	ldrb	r1, [r2, r3]
 80030ec:	2001      	movs	r0, #1
 80030ee:	4381      	bics	r1, r0
 80030f0:	54d1      	strb	r1, [r2, r3]


		SSRHeater_OFF_MilkWater()				;
 80030f2:	f000 fae6 	bl	80036c2 <SSRHeater_OFF_MilkWater>
		SSRHeater_OFF_Water()					;
 80030f6:	f000 faff 	bl	80036f8 <SSRHeater_OFF_Water>

		Motor_Stirrer_Stop()					;
 80030fa:	f000 fa97 	bl	800362c <Motor_Stirrer_Stop>
		Motor_Water_Stop()						;
 80030fe:	f000 fa2b 	bl	8003558 <Motor_Water_Stop>
		Motor_MilkWater_Stop()					;
 8003102:	f000 f9ff 	bl	8003504 <Motor_MilkWater_Stop>
		Motor_Milk_Stop()						;
 8003106:	f000 f9d5 	bl	80034b4 <Motor_Milk_Stop>
		Motor_HotWater_Stop()					;
 800310a:	f000 fab8 	bl	800367e <Motor_HotWater_Stop>
		Motor_CleaningWater_Stop()				;
 800310e:	f000 fa4f 	bl	80035b0 <Motor_CleaningWater_Stop>

		Process.Variables.InitProcess = Idle	;
 8003112:	4a03      	ldr	r2, [pc, #12]	; (8003120 <StartProcess+0xaa4>)
 8003114:	23c8      	movs	r3, #200	; 0xc8
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	2106      	movs	r1, #6
 800311a:	54d1      	strb	r1, [r2, r3]

		break	;
 800311c:	e015      	b.n	800314a <StartProcess+0xace>
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	20000120 	.word	0x20000120
 8003124:	200000b4 	.word	0x200000b4
 8003128:	200000bc 	.word	0x200000bc
 800312c:	20000350 	.word	0x20000350
 8003130:	200000b8 	.word	0x200000b8
 8003134:	20000414 	.word	0x20000414
 8003138:	2000011c 	.word	0x2000011c
 800313c:	42b40000 	.word	0x42b40000
 8003140:	200002b2 	.word	0x200002b2
 8003144:	20000354 	.word	0x20000354
	// ********************************************************************************************* //
	// ***************************	 	xoxox		******************************************** //
	// ********************************************************************************************* //

	default	:
		break;
 8003148:	46c0      	nop			; (mov r8, r8)
	}
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	b003      	add	sp, #12
 8003150:	bd90      	pop	{r4, r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)

08003154 <SendAckowledgement>:
							  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 \
							  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 \
							  , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12};

void SendAckowledgement(uint8_t ProcessID, uint8_t ProcessStep)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	0002      	movs	r2, r0
 800315c:	1dfb      	adds	r3, r7, #7
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	1dbb      	adds	r3, r7, #6
 8003162:	1c0a      	adds	r2, r1, #0
 8003164:	701a      	strb	r2, [r3, #0]
	Os_Ack[1] = ProcessID;
 8003166:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <SendAckowledgement+0x60>)
 8003168:	1dfa      	adds	r2, r7, #7
 800316a:	7812      	ldrb	r2, [r2, #0]
 800316c:	705a      	strb	r2, [r3, #1]
	Os_Ack[4] = ProcessStep;
 800316e:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <SendAckowledgement+0x60>)
 8003170:	1dba      	adds	r2, r7, #6
 8003172:	7812      	ldrb	r2, [r2, #0]
 8003174:	711a      	strb	r2, [r3, #4]

	HAL_GPIO_WritePin	(USART_DE_GPIO_Port,	USART_DE_Pin, SET);
 8003176:	2390      	movs	r3, #144	; 0x90
 8003178:	05db      	lsls	r3, r3, #23
 800317a:	2201      	movs	r2, #1
 800317c:	2102      	movs	r1, #2
 800317e:	0018      	movs	r0, r3
 8003180:	f001 fc1f 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_UART_Transmit	(&huart2,	Os_Ack, sizeof(Os_Ack), HAL_MAX_DELAY);
 8003184:	2301      	movs	r3, #1
 8003186:	425b      	negs	r3, r3
 8003188:	490a      	ldr	r1, [pc, #40]	; (80031b4 <SendAckowledgement+0x60>)
 800318a:	480b      	ldr	r0, [pc, #44]	; (80031b8 <SendAckowledgement+0x64>)
 800318c:	2240      	movs	r2, #64	; 0x40
 800318e:	f002 ff51 	bl	8006034 <HAL_UART_Transmit>
	HAL_GPIO_WritePin	(USART_DE_GPIO_Port,	USART_DE_Pin, RESET);
 8003192:	2390      	movs	r3, #144	; 0x90
 8003194:	05db      	lsls	r3, r3, #23
 8003196:	2200      	movs	r2, #0
 8003198:	2102      	movs	r1, #2
 800319a:	0018      	movs	r0, r3
 800319c:	f001 fc11 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart2, Process.Variables.ReceivedData, sizeof(Process.Variables.ReceivedData));
 80031a0:	4906      	ldr	r1, [pc, #24]	; (80031bc <SendAckowledgement+0x68>)
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <SendAckowledgement+0x64>)
 80031a4:	2240      	movs	r2, #64	; 0x40
 80031a6:	0018      	movs	r0, r3
 80031a8:	f002 ffec 	bl	8006184 <HAL_UART_Receive_IT>
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20000000 	.word	0x20000000
 80031b8:	20000354 	.word	0x20000354
 80031bc:	200002b2 	.word	0x200002b2

080031c0 <SendStatus>:

void SendStatus(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0

	switch (Process.Variables.ReceivedData[1])
 80031c4:	4aa3      	ldr	r2, [pc, #652]	; (8003454 <SendStatus+0x294>)
 80031c6:	2394      	movs	r3, #148	; 0x94
 80031c8:	33ff      	adds	r3, #255	; 0xff
 80031ca:	5cd3      	ldrb	r3, [r2, r3]
 80031cc:	2b06      	cmp	r3, #6
 80031ce:	d100      	bne.n	80031d2 <SendStatus+0x12>
 80031d0:	e07f      	b.n	80032d2 <SendStatus+0x112>
 80031d2:	2b07      	cmp	r3, #7
 80031d4:	d100      	bne.n	80031d8 <SendStatus+0x18>
 80031d6:	e116      	b.n	8003406 <SendStatus+0x246>
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d000      	beq.n	80031de <SendStatus+0x1e>

		break;
	}

	default	:
		break;
 80031dc:	e11b      	b.n	8003416 <SendStatus+0x256>
		if (	Process.Variables.ReceivedData[5]	)
 80031de:	4a9d      	ldr	r2, [pc, #628]	; (8003454 <SendStatus+0x294>)
 80031e0:	2398      	movs	r3, #152	; 0x98
 80031e2:	33ff      	adds	r3, #255	; 0xff
 80031e4:	5cd3      	ldrb	r3, [r2, r3]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <SendStatus+0x30>
			Motor_Stirrer_Clkwise();
 80031ea:	f000 f9f7 	bl	80035dc <Motor_Stirrer_Clkwise>
 80031ee:	e001      	b.n	80031f4 <SendStatus+0x34>
			Motor_Stirrer_Stop();
 80031f0:	f000 fa1c 	bl	800362c <Motor_Stirrer_Stop>
		Os_Status[1]	= StatusID;
 80031f4:	4b98      	ldr	r3, [pc, #608]	; (8003458 <SendStatus+0x298>)
 80031f6:	2205      	movs	r2, #5
 80031f8:	705a      	strb	r2, [r3, #1]
		Os_Status[5] 	= (int)Process.Variables.Water.LevelSensor;
 80031fa:	4a96      	ldr	r2, [pc, #600]	; (8003454 <SendStatus+0x294>)
 80031fc:	2382      	movs	r3, #130	; 0x82
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	58d3      	ldr	r3, [r2, r3]
 8003202:	1c18      	adds	r0, r3, #0
 8003204:	f7fd fd94 	bl	8000d30 <__aeabi_f2iz>
 8003208:	0003      	movs	r3, r0
 800320a:	b2da      	uxtb	r2, r3
 800320c:	4b92      	ldr	r3, [pc, #584]	; (8003458 <SendStatus+0x298>)
 800320e:	715a      	strb	r2, [r3, #5]
		Os_Status[7] 	= (int)Process.Variables.Water.Temperature.Read;
 8003210:	4b90      	ldr	r3, [pc, #576]	; (8003454 <SendStatus+0x294>)
 8003212:	22f8      	movs	r2, #248	; 0xf8
 8003214:	589b      	ldr	r3, [r3, r2]
 8003216:	1c18      	adds	r0, r3, #0
 8003218:	f7fd fd8a 	bl	8000d30 <__aeabi_f2iz>
 800321c:	0003      	movs	r3, r0
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b8d      	ldr	r3, [pc, #564]	; (8003458 <SendStatus+0x298>)
 8003222:	71da      	strb	r2, [r3, #7]
		Os_Status[9] 	= (int)Process.Variables.Milk.LevelSensor;
 8003224:	4b8b      	ldr	r3, [pc, #556]	; (8003454 <SendStatus+0x294>)
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	4b8b      	ldr	r3, [pc, #556]	; (8003458 <SendStatus+0x298>)
 800322c:	725a      	strb	r2, [r3, #9]
		Os_Status[11] 	= (int)Process.Variables.MilkWater.LevelSensor;
 800322e:	4b89      	ldr	r3, [pc, #548]	; (8003454 <SendStatus+0x294>)
 8003230:	22cc      	movs	r2, #204	; 0xcc
 8003232:	589b      	ldr	r3, [r3, r2]
 8003234:	1c18      	adds	r0, r3, #0
 8003236:	f7fd fd7b 	bl	8000d30 <__aeabi_f2iz>
 800323a:	0003      	movs	r3, r0
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b86      	ldr	r3, [pc, #536]	; (8003458 <SendStatus+0x298>)
 8003240:	72da      	strb	r2, [r3, #11]
		Os_Status[13] 	= (int)Process.Variables.Milk.Temperature.Read;
 8003242:	4b84      	ldr	r3, [pc, #528]	; (8003454 <SendStatus+0x294>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	1c18      	adds	r0, r3, #0
 8003248:	f7fd fd72 	bl	8000d30 <__aeabi_f2iz>
 800324c:	0003      	movs	r3, r0
 800324e:	b2da      	uxtb	r2, r3
 8003250:	4b81      	ldr	r3, [pc, #516]	; (8003458 <SendStatus+0x298>)
 8003252:	735a      	strb	r2, [r3, #13]
		Os_Status[15]	= (int)Process.Variables.MilkWater.Temperature.Read;
 8003254:	4b7f      	ldr	r3, [pc, #508]	; (8003454 <SendStatus+0x294>)
 8003256:	22b8      	movs	r2, #184	; 0xb8
 8003258:	589b      	ldr	r3, [r3, r2]
 800325a:	1c18      	adds	r0, r3, #0
 800325c:	f7fd fd68 	bl	8000d30 <__aeabi_f2iz>
 8003260:	0003      	movs	r3, r0
 8003262:	b2da      	uxtb	r2, r3
 8003264:	4b7c      	ldr	r3, [pc, #496]	; (8003458 <SendStatus+0x298>)
 8003266:	73da      	strb	r2, [r3, #15]
		if	(	Process.Variables.HotWater.TimerCounts		>= 		Process.Variables.HotWater.RxOnTime		)
 8003268:	4a7a      	ldr	r2, [pc, #488]	; (8003454 <SendStatus+0x294>)
 800326a:	23c4      	movs	r3, #196	; 0xc4
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	58d2      	ldr	r2, [r2, r3]
 8003270:	4978      	ldr	r1, [pc, #480]	; (8003454 <SendStatus+0x294>)
 8003272:	23c6      	movs	r3, #198	; 0xc6
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	58cb      	ldr	r3, [r1, r3]
 8003278:	429a      	cmp	r2, r3
 800327a:	d304      	bcc.n	8003286 <SendStatus+0xc6>
			Process.Variables.HotWater.TimerCounts 	= 	RESET;
 800327c:	4a75      	ldr	r2, [pc, #468]	; (8003454 <SendStatus+0x294>)
 800327e:	23c4      	movs	r3, #196	; 0xc4
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2100      	movs	r1, #0
 8003284:	50d1      	str	r1, [r2, r3]
		Os_Status[17]	=	Process.Flags.HotWater.TimerEnable;
 8003286:	4a73      	ldr	r2, [pc, #460]	; (8003454 <SendStatus+0x294>)
 8003288:	23f0      	movs	r3, #240	; 0xf0
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	5cd3      	ldrb	r3, [r2, r3]
 800328e:	071b      	lsls	r3, r3, #28
 8003290:	0fdb      	lsrs	r3, r3, #31
 8003292:	b2db      	uxtb	r3, r3
 8003294:	001a      	movs	r2, r3
 8003296:	4b70      	ldr	r3, [pc, #448]	; (8003458 <SendStatus+0x298>)
 8003298:	745a      	strb	r2, [r3, #17]
		Os_Status[18]	=	(Process.Variables.HotWater.TimerCounts / 10 );
 800329a:	4a6e      	ldr	r2, [pc, #440]	; (8003454 <SendStatus+0x294>)
 800329c:	23c4      	movs	r3, #196	; 0xc4
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	58d3      	ldr	r3, [r2, r3]
 80032a2:	210a      	movs	r1, #10
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7fc ff2f 	bl	8000108 <__udivsi3>
 80032aa:	0003      	movs	r3, r0
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4b6a      	ldr	r3, [pc, #424]	; (8003458 <SendStatus+0x298>)
 80032b0:	749a      	strb	r2, [r3, #18]
		Os_Status[30]	=	Process.Flags.ErrorGenerated;
 80032b2:	4a68      	ldr	r2, [pc, #416]	; (8003454 <SendStatus+0x294>)
 80032b4:	23f6      	movs	r3, #246	; 0xf6
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	5cd3      	ldrb	r3, [r2, r3]
 80032ba:	079b      	lsls	r3, r3, #30
 80032bc:	0fdb      	lsrs	r3, r3, #31
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	001a      	movs	r2, r3
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <SendStatus+0x298>)
 80032c4:	779a      	strb	r2, [r3, #30]
		Os_Status[31]	=	Process.Variables.Milk.LevelSensor_OpampProtection;			// Failure of Balluff Sensor
 80032c6:	4b63      	ldr	r3, [pc, #396]	; (8003454 <SendStatus+0x294>)
 80032c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b62      	ldr	r3, [pc, #392]	; (8003458 <SendStatus+0x298>)
 80032ce:	77da      	strb	r2, [r3, #31]
		break;
 80032d0:	e0a1      	b.n	8003416 <SendStatus+0x256>
		Os_Status[1]	= CleaningStatusID;
 80032d2:	4b61      	ldr	r3, [pc, #388]	; (8003458 <SendStatus+0x298>)
 80032d4:	2206      	movs	r2, #6
 80032d6:	705a      	strb	r2, [r3, #1]
		Os_Status[5] 	= (int)Process.Variables.Water.LevelSensor;
 80032d8:	4a5e      	ldr	r2, [pc, #376]	; (8003454 <SendStatus+0x294>)
 80032da:	2382      	movs	r3, #130	; 0x82
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	58d3      	ldr	r3, [r2, r3]
 80032e0:	1c18      	adds	r0, r3, #0
 80032e2:	f7fd fd25 	bl	8000d30 <__aeabi_f2iz>
 80032e6:	0003      	movs	r3, r0
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <SendStatus+0x298>)
 80032ec:	715a      	strb	r2, [r3, #5]
		Os_Status[7] 	= (int)Process.Variables.Water.Temperature.Read;
 80032ee:	4b59      	ldr	r3, [pc, #356]	; (8003454 <SendStatus+0x294>)
 80032f0:	22f8      	movs	r2, #248	; 0xf8
 80032f2:	589b      	ldr	r3, [r3, r2]
 80032f4:	1c18      	adds	r0, r3, #0
 80032f6:	f7fd fd1b 	bl	8000d30 <__aeabi_f2iz>
 80032fa:	0003      	movs	r3, r0
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4b56      	ldr	r3, [pc, #344]	; (8003458 <SendStatus+0x298>)
 8003300:	71da      	strb	r2, [r3, #7]
		Os_Status[9] 	= (int)Process.Variables.Milk.LevelSensor;
 8003302:	4b54      	ldr	r3, [pc, #336]	; (8003454 <SendStatus+0x294>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b53      	ldr	r3, [pc, #332]	; (8003458 <SendStatus+0x298>)
 800330a:	725a      	strb	r2, [r3, #9]
		Os_Status[11] 	= (int)Process.Variables.MilkWater.LevelSensor;
 800330c:	4b51      	ldr	r3, [pc, #324]	; (8003454 <SendStatus+0x294>)
 800330e:	22cc      	movs	r2, #204	; 0xcc
 8003310:	589b      	ldr	r3, [r3, r2]
 8003312:	1c18      	adds	r0, r3, #0
 8003314:	f7fd fd0c 	bl	8000d30 <__aeabi_f2iz>
 8003318:	0003      	movs	r3, r0
 800331a:	b2da      	uxtb	r2, r3
 800331c:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <SendStatus+0x298>)
 800331e:	72da      	strb	r2, [r3, #11]
		Os_Status[13] 	= (int)Process.Variables.Milk.Temperature.Read;
 8003320:	4b4c      	ldr	r3, [pc, #304]	; (8003454 <SendStatus+0x294>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	1c18      	adds	r0, r3, #0
 8003326:	f7fd fd03 	bl	8000d30 <__aeabi_f2iz>
 800332a:	0003      	movs	r3, r0
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <SendStatus+0x298>)
 8003330:	735a      	strb	r2, [r3, #13]
		Os_Status[15]	= (int)Process.Variables.MilkWater.Temperature.Read;
 8003332:	4b48      	ldr	r3, [pc, #288]	; (8003454 <SendStatus+0x294>)
 8003334:	22b8      	movs	r2, #184	; 0xb8
 8003336:	589b      	ldr	r3, [r3, r2]
 8003338:	1c18      	adds	r0, r3, #0
 800333a:	f7fd fcf9 	bl	8000d30 <__aeabi_f2iz>
 800333e:	0003      	movs	r3, r0
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4b45      	ldr	r3, [pc, #276]	; (8003458 <SendStatus+0x298>)
 8003344:	73da      	strb	r2, [r3, #15]
		Os_Status[18]	= Process.Variables.Cleaning.ProcessExeCounts;
 8003346:	4a43      	ldr	r2, [pc, #268]	; (8003454 <SendStatus+0x294>)
 8003348:	239a      	movs	r3, #154	; 0x9a
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	58d3      	ldr	r3, [r2, r3]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	4b41      	ldr	r3, [pc, #260]	; (8003458 <SendStatus+0x298>)
 8003352:	749a      	strb	r2, [r3, #18]
		Os_Status[19]	= Process.Flags.Cleaning.ProcessOngoing_Pril;
 8003354:	4a3f      	ldr	r2, [pc, #252]	; (8003454 <SendStatus+0x294>)
 8003356:	23ee      	movs	r3, #238	; 0xee
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	069b      	lsls	r3, r3, #26
 800335e:	0f5b      	lsrs	r3, r3, #29
 8003360:	b2db      	uxtb	r3, r3
 8003362:	001a      	movs	r2, r3
 8003364:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <SendStatus+0x298>)
 8003366:	74da      	strb	r2, [r3, #19]
		Os_Status[20]	= Process.Flags.Cleaning.ProcessOngoing_Water;
 8003368:	4a3a      	ldr	r2, [pc, #232]	; (8003454 <SendStatus+0x294>)
 800336a:	23ee      	movs	r3, #238	; 0xee
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	5ad3      	ldrh	r3, [r2, r3]
 8003370:	05db      	lsls	r3, r3, #23
 8003372:	0f5b      	lsrs	r3, r3, #29
 8003374:	b2db      	uxtb	r3, r3
 8003376:	001a      	movs	r2, r3
 8003378:	4b37      	ldr	r3, [pc, #220]	; (8003458 <SendStatus+0x298>)
 800337a:	751a      	strb	r2, [r3, #20]
		Os_Status[21]	= Process.Flags.Cleaning.ProcessCompleted_Pril;
 800337c:	4a35      	ldr	r2, [pc, #212]	; (8003454 <SendStatus+0x294>)
 800337e:	23de      	movs	r3, #222	; 0xde
 8003380:	33ff      	adds	r3, #255	; 0xff
 8003382:	5cd3      	ldrb	r3, [r2, r3]
 8003384:	079b      	lsls	r3, r3, #30
 8003386:	0fdb      	lsrs	r3, r3, #31
 8003388:	b2db      	uxtb	r3, r3
 800338a:	001a      	movs	r2, r3
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <SendStatus+0x298>)
 800338e:	755a      	strb	r2, [r3, #21]
		Os_Status[22]	= Process.Flags.Cleaning.ProcessCompleted_Water;
 8003390:	4a30      	ldr	r2, [pc, #192]	; (8003454 <SendStatus+0x294>)
 8003392:	23de      	movs	r3, #222	; 0xde
 8003394:	33ff      	adds	r3, #255	; 0xff
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	075b      	lsls	r3, r3, #29
 800339a:	0fdb      	lsrs	r3, r3, #31
 800339c:	b2db      	uxtb	r3, r3
 800339e:	001a      	movs	r2, r3
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <SendStatus+0x298>)
 80033a2:	759a      	strb	r2, [r3, #22]
		Os_Status[23]	=	RESET	;
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <SendStatus+0x298>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	75da      	strb	r2, [r3, #23]
		if (Process.Flags.Cleaning.TimerEnable_StirrerPril)
 80033aa:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <SendStatus+0x294>)
 80033ac:	23ef      	movs	r3, #239	; 0xef
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	5cd3      	ldrb	r3, [r2, r3]
 80033b2:	2220      	movs	r2, #32
 80033b4:	4013      	ands	r3, r2
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <SendStatus+0x218>
			Os_Status[23]	= (int)	(Process.Variables.Cleaning.TimerCounts_StirrerPril / ( Minutes * TimerMultiplicationFactor) );
 80033bc:	4a25      	ldr	r2, [pc, #148]	; (8003454 <SendStatus+0x294>)
 80033be:	23a8      	movs	r3, #168	; 0xa8
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	58d2      	ldr	r2, [r2, r3]
 80033c4:	2396      	movs	r3, #150	; 0x96
 80033c6:	0099      	lsls	r1, r3, #2
 80033c8:	0010      	movs	r0, r2
 80033ca:	f7fc fe9d 	bl	8000108 <__udivsi3>
 80033ce:	0003      	movs	r3, r0
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4b21      	ldr	r3, [pc, #132]	; (8003458 <SendStatus+0x298>)
 80033d4:	75da      	strb	r2, [r3, #23]
		break;
 80033d6:	e01d      	b.n	8003414 <SendStatus+0x254>
		else if (Process.Flags.Cleaning.TimerEnable_StirrerWater)
 80033d8:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <SendStatus+0x294>)
 80033da:	23ef      	movs	r3, #239	; 0xef
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	5cd3      	ldrb	r3, [r2, r3]
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	4013      	ands	r3, r2
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d014      	beq.n	8003414 <SendStatus+0x254>
			Os_Status[23]	= (int)	(Process.Variables.Cleaning.TimerCounts_StirrerWater / ( Minutes * TimerMultiplicationFactor) );
 80033ea:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <SendStatus+0x294>)
 80033ec:	23aa      	movs	r3, #170	; 0xaa
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	58d2      	ldr	r2, [r2, r3]
 80033f2:	2396      	movs	r3, #150	; 0x96
 80033f4:	0099      	lsls	r1, r3, #2
 80033f6:	0010      	movs	r0, r2
 80033f8:	f7fc fe86 	bl	8000108 <__udivsi3>
 80033fc:	0003      	movs	r3, r0
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	4b15      	ldr	r3, [pc, #84]	; (8003458 <SendStatus+0x298>)
 8003402:	75da      	strb	r2, [r3, #23]
		break;
 8003404:	e006      	b.n	8003414 <SendStatus+0x254>
		Os_Status[1]	= 	StopCommand;
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <SendStatus+0x298>)
 8003408:	2207      	movs	r2, #7
 800340a:	705a      	strb	r2, [r3, #1]
		Os_Status[5]	= 	SET;
 800340c:	4b12      	ldr	r3, [pc, #72]	; (8003458 <SendStatus+0x298>)
 800340e:	2201      	movs	r2, #1
 8003410:	715a      	strb	r2, [r3, #5]
		break;
 8003412:	e000      	b.n	8003416 <SendStatus+0x256>
		break;
 8003414:	46c0      	nop			; (mov r8, r8)

	}


	HAL_GPIO_WritePin	(USART_DE_GPIO_Port,	USART_DE_Pin, SET);
 8003416:	2390      	movs	r3, #144	; 0x90
 8003418:	05db      	lsls	r3, r3, #23
 800341a:	2201      	movs	r2, #1
 800341c:	2102      	movs	r1, #2
 800341e:	0018      	movs	r0, r3
 8003420:	f001 facf 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_UART_Transmit	(&huart2,	Os_Status, sizeof(Os_Status), HAL_MAX_DELAY);
 8003424:	2301      	movs	r3, #1
 8003426:	425b      	negs	r3, r3
 8003428:	490b      	ldr	r1, [pc, #44]	; (8003458 <SendStatus+0x298>)
 800342a:	480c      	ldr	r0, [pc, #48]	; (800345c <SendStatus+0x29c>)
 800342c:	2240      	movs	r2, #64	; 0x40
 800342e:	f002 fe01 	bl	8006034 <HAL_UART_Transmit>
	HAL_GPIO_WritePin	(USART_DE_GPIO_Port,	USART_DE_Pin, RESET);
 8003432:	2390      	movs	r3, #144	; 0x90
 8003434:	05db      	lsls	r3, r3, #23
 8003436:	2200      	movs	r2, #0
 8003438:	2102      	movs	r1, #2
 800343a:	0018      	movs	r0, r3
 800343c:	f001 fac1 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart2, Process.Variables.ReceivedData, sizeof(Process.Variables.ReceivedData));
 8003440:	4907      	ldr	r1, [pc, #28]	; (8003460 <SendStatus+0x2a0>)
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <SendStatus+0x29c>)
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	0018      	movs	r0, r3
 8003448:	f002 fe9c 	bl	8006184 <HAL_UART_Receive_IT>

}
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	20000120 	.word	0x20000120
 8003458:	20000040 	.word	0x20000040
 800345c:	20000354 	.word	0x20000354
 8003460:	200002b2 	.word	0x200002b2

08003464 <Motor_Milk_AntiClkwise>:


void Motor_Milk_AntiClkwise(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Milk_Motor_IN1_GPIO_Port, Milk_Motor_IN1_Pin, RESET);
 8003468:	4b07      	ldr	r3, [pc, #28]	; (8003488 <Motor_Milk_AntiClkwise+0x24>)
 800346a:	2200      	movs	r2, #0
 800346c:	2110      	movs	r1, #16
 800346e:	0018      	movs	r0, r3
 8003470:	f001 faa7 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Milk_Motor_IN2_GPIO_Port, Milk_Motor_IN2_Pin, SET);
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <Motor_Milk_AntiClkwise+0x24>)
 8003476:	2201      	movs	r2, #1
 8003478:	2120      	movs	r1, #32
 800347a:	0018      	movs	r0, r3
 800347c:	f001 faa1 	bl	80049c2 <HAL_GPIO_WritePin>
}
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	48000800 	.word	0x48000800

0800348c <Motor_Milk_Clkwise>:
void Motor_Milk_Clkwise(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Milk_Motor_IN1_GPIO_Port, Milk_Motor_IN1_Pin, SET);
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <Motor_Milk_Clkwise+0x24>)
 8003492:	2201      	movs	r2, #1
 8003494:	2110      	movs	r1, #16
 8003496:	0018      	movs	r0, r3
 8003498:	f001 fa93 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Milk_Motor_IN2_GPIO_Port, Milk_Motor_IN2_Pin, RESET);
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <Motor_Milk_Clkwise+0x24>)
 800349e:	2200      	movs	r2, #0
 80034a0:	2120      	movs	r1, #32
 80034a2:	0018      	movs	r0, r3
 80034a4:	f001 fa8d 	bl	80049c2 <HAL_GPIO_WritePin>
}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	48000800 	.word	0x48000800

080034b4 <Motor_Milk_Stop>:
void Motor_Milk_Stop(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Milk_Motor_IN1_GPIO_Port, Milk_Motor_IN1_Pin, RESET);
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <Motor_Milk_Stop+0x24>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	2110      	movs	r1, #16
 80034be:	0018      	movs	r0, r3
 80034c0:	f001 fa7f 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Milk_Motor_IN2_GPIO_Port, Milk_Motor_IN2_Pin, RESET);
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <Motor_Milk_Stop+0x24>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	2120      	movs	r1, #32
 80034ca:	0018      	movs	r0, r3
 80034cc:	f001 fa79 	bl	80049c2 <HAL_GPIO_WritePin>
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	48000800 	.word	0x48000800

080034dc <Motor_MilkWater_Clkwise>:


void Motor_MilkWater_Clkwise(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MilkWater_Motor_IN1_GPIO_Port, MilkWater_Motor_IN1_Pin, SET);
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <Motor_MilkWater_Clkwise+0x24>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	2102      	movs	r1, #2
 80034e6:	0018      	movs	r0, r3
 80034e8:	f001 fa6b 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MilkWater_Motor_IN2_GPIO_Port, MilkWater_Motor_IN2_Pin, RESET);
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <Motor_MilkWater_Clkwise+0x24>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	2104      	movs	r1, #4
 80034f2:	0018      	movs	r0, r3
 80034f4:	f001 fa65 	bl	80049c2 <HAL_GPIO_WritePin>
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	48000400 	.word	0x48000400

08003504 <Motor_MilkWater_Stop>:
	HAL_GPIO_WritePin(MilkWater_Motor_IN1_GPIO_Port, MilkWater_Motor_IN1_Pin, RESET);
	HAL_GPIO_WritePin(MilkWater_Motor_IN2_GPIO_Port, MilkWater_Motor_IN2_Pin, SET);
}

void Motor_MilkWater_Stop(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MilkWater_Motor_IN1_GPIO_Port, MilkWater_Motor_IN1_Pin, RESET);
 8003508:	4b07      	ldr	r3, [pc, #28]	; (8003528 <Motor_MilkWater_Stop+0x24>)
 800350a:	2200      	movs	r2, #0
 800350c:	2102      	movs	r1, #2
 800350e:	0018      	movs	r0, r3
 8003510:	f001 fa57 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MilkWater_Motor_IN2_GPIO_Port, MilkWater_Motor_IN2_Pin, RESET);
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <Motor_MilkWater_Stop+0x24>)
 8003516:	2200      	movs	r2, #0
 8003518:	2104      	movs	r1, #4
 800351a:	0018      	movs	r0, r3
 800351c:	f001 fa51 	bl	80049c2 <HAL_GPIO_WritePin>
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	48000400 	.word	0x48000400

0800352c <Motor_Water_Clkwise>:


void Motor_Water_Clkwise(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_Motor_IN1_GPIO_Port, Water_Motor_IN1_Pin, SET);
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	4807      	ldr	r0, [pc, #28]	; (8003554 <Motor_Water_Clkwise+0x28>)
 8003536:	2201      	movs	r2, #1
 8003538:	0019      	movs	r1, r3
 800353a:	f001 fa42 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Water_Motor_IN2_GPIO_Port, Water_Motor_IN2_Pin, RESET);
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	015b      	lsls	r3, r3, #5
 8003542:	4804      	ldr	r0, [pc, #16]	; (8003554 <Motor_Water_Clkwise+0x28>)
 8003544:	2200      	movs	r2, #0
 8003546:	0019      	movs	r1, r3
 8003548:	f001 fa3b 	bl	80049c2 <HAL_GPIO_WritePin>
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	48000400 	.word	0x48000400

08003558 <Motor_Water_Stop>:
void Motor_Water_Stop(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Water_Motor_IN1_GPIO_Port, Water_Motor_IN1_Pin, RESET);
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	4807      	ldr	r0, [pc, #28]	; (8003580 <Motor_Water_Stop+0x28>)
 8003562:	2200      	movs	r2, #0
 8003564:	0019      	movs	r1, r3
 8003566:	f001 fa2c 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Water_Motor_IN2_GPIO_Port, Water_Motor_IN2_Pin, RESET);
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	015b      	lsls	r3, r3, #5
 800356e:	4804      	ldr	r0, [pc, #16]	; (8003580 <Motor_Water_Stop+0x28>)
 8003570:	2200      	movs	r2, #0
 8003572:	0019      	movs	r1, r3
 8003574:	f001 fa25 	bl	80049c2 <HAL_GPIO_WritePin>
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	48000400 	.word	0x48000400

08003584 <Motor_CleaningWater_Clkwise>:


void Motor_CleaningWater_Clkwise(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CleaningWater_Motor_IN1_GPIO_Port, CleaningWater_Motor_IN1_Pin, SET);
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	01db      	lsls	r3, r3, #7
 800358c:	4807      	ldr	r0, [pc, #28]	; (80035ac <Motor_CleaningWater_Clkwise+0x28>)
 800358e:	2201      	movs	r2, #1
 8003590:	0019      	movs	r1, r3
 8003592:	f001 fa16 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CleaningWater_Motor_IN2_GPIO_Port, CleaningWater_Motor_IN2_Pin, RESET);
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	4804      	ldr	r0, [pc, #16]	; (80035ac <Motor_CleaningWater_Clkwise+0x28>)
 800359c:	2200      	movs	r2, #0
 800359e:	0019      	movs	r1, r3
 80035a0:	f001 fa0f 	bl	80049c2 <HAL_GPIO_WritePin>
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	48000400 	.word	0x48000400

080035b0 <Motor_CleaningWater_Stop>:
void Motor_CleaningWater_Stop(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CleaningWater_Motor_IN1_GPIO_Port, CleaningWater_Motor_IN1_Pin, RESET);
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	01db      	lsls	r3, r3, #7
 80035b8:	4807      	ldr	r0, [pc, #28]	; (80035d8 <Motor_CleaningWater_Stop+0x28>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	0019      	movs	r1, r3
 80035be:	f001 fa00 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CleaningWater_Motor_IN2_GPIO_Port, CleaningWater_Motor_IN2_Pin, RESET);
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	4804      	ldr	r0, [pc, #16]	; (80035d8 <Motor_CleaningWater_Stop+0x28>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	0019      	movs	r1, r3
 80035cc:	f001 f9f9 	bl	80049c2 <HAL_GPIO_WritePin>
}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	48000400 	.word	0x48000400

080035dc <Motor_Stirrer_Clkwise>:

void Motor_Stirrer_Clkwise(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stirrer_Motor_IN1_GPIO_Port, Stirrer_Motor_IN1_Pin, SET);
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <Motor_Stirrer_Clkwise+0x24>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	0018      	movs	r0, r3
 80035e8:	f001 f9eb 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Stirrer_Motor_IN2_GPIO_Port, Stirrer_Motor_IN2_Pin, RESET);
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4803      	ldr	r0, [pc, #12]	; (8003600 <Motor_Stirrer_Clkwise+0x24>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	0019      	movs	r1, r3
 80035f6:	f001 f9e4 	bl	80049c2 <HAL_GPIO_WritePin>
}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	48000800 	.word	0x48000800

08003604 <Motor_Stirrer_AntiClkwise>:
void Motor_Stirrer_AntiClkwise(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stirrer_Motor_IN1_GPIO_Port, Stirrer_Motor_IN1_Pin, RESET);
 8003608:	4b07      	ldr	r3, [pc, #28]	; (8003628 <Motor_Stirrer_AntiClkwise+0x24>)
 800360a:	2200      	movs	r2, #0
 800360c:	2180      	movs	r1, #128	; 0x80
 800360e:	0018      	movs	r0, r3
 8003610:	f001 f9d7 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Stirrer_Motor_IN2_GPIO_Port, Stirrer_Motor_IN2_Pin, SET);
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4803      	ldr	r0, [pc, #12]	; (8003628 <Motor_Stirrer_AntiClkwise+0x24>)
 800361a:	2201      	movs	r2, #1
 800361c:	0019      	movs	r1, r3
 800361e:	f001 f9d0 	bl	80049c2 <HAL_GPIO_WritePin>
}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	48000800 	.word	0x48000800

0800362c <Motor_Stirrer_Stop>:
void Motor_Stirrer_Stop(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stirrer_Motor_IN1_GPIO_Port, Stirrer_Motor_IN1_Pin, RESET);
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <Motor_Stirrer_Stop+0x24>)
 8003632:	2200      	movs	r2, #0
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	0018      	movs	r0, r3
 8003638:	f001 f9c3 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Stirrer_Motor_IN2_GPIO_Port, Stirrer_Motor_IN2_Pin, RESET);
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4803      	ldr	r0, [pc, #12]	; (8003650 <Motor_Stirrer_Stop+0x24>)
 8003642:	2200      	movs	r2, #0
 8003644:	0019      	movs	r1, r3
 8003646:	f001 f9bc 	bl	80049c2 <HAL_GPIO_WritePin>
}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	48000800 	.word	0x48000800

08003654 <Motor_HotWater_Clkwise>:


void Motor_HotWater_Clkwise(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HotWater_Motor_IN1_GPIO_Port, HotWater_Motor_IN1_Pin, SET);
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	0099      	lsls	r1, r3, #2
 800365c:	2390      	movs	r3, #144	; 0x90
 800365e:	05db      	lsls	r3, r3, #23
 8003660:	2201      	movs	r2, #1
 8003662:	0018      	movs	r0, r3
 8003664:	f001 f9ad 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HotWater_Motor_IN2_GPIO_Port, HotWater_Motor_IN2_Pin, RESET);
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	0059      	lsls	r1, r3, #1
 800366c:	2390      	movs	r3, #144	; 0x90
 800366e:	05db      	lsls	r3, r3, #23
 8003670:	2200      	movs	r2, #0
 8003672:	0018      	movs	r0, r3
 8003674:	f001 f9a5 	bl	80049c2 <HAL_GPIO_WritePin>
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <Motor_HotWater_Stop>:
void Motor_HotWater_Stop(void)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HotWater_Motor_IN1_GPIO_Port, HotWater_Motor_IN1_Pin, RESET);
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	0099      	lsls	r1, r3, #2
 8003686:	2390      	movs	r3, #144	; 0x90
 8003688:	05db      	lsls	r3, r3, #23
 800368a:	2200      	movs	r2, #0
 800368c:	0018      	movs	r0, r3
 800368e:	f001 f998 	bl	80049c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HotWater_Motor_IN2_GPIO_Port, HotWater_Motor_IN2_Pin, RESET);
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	0059      	lsls	r1, r3, #1
 8003696:	2390      	movs	r3, #144	; 0x90
 8003698:	05db      	lsls	r3, r3, #23
 800369a:	2200      	movs	r2, #0
 800369c:	0018      	movs	r0, r3
 800369e:	f001 f990 	bl	80049c2 <HAL_GPIO_WritePin>
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <SSRHeater_ON_MilkWater>:


void SSRHeater_ON_MilkWater(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSRHeater_MilkWater_GPIO_Port, SSRHeater_MilkWater_Pin, SET);
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	0159      	lsls	r1, r3, #5
 80036b0:	2390      	movs	r3, #144	; 0x90
 80036b2:	05db      	lsls	r3, r3, #23
 80036b4:	2201      	movs	r2, #1
 80036b6:	0018      	movs	r0, r3
 80036b8:	f001 f983 	bl	80049c2 <HAL_GPIO_WritePin>
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <SSRHeater_OFF_MilkWater>:
void SSRHeater_OFF_MilkWater(void)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSRHeater_MilkWater_GPIO_Port, SSRHeater_MilkWater_Pin, RESET);
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	0159      	lsls	r1, r3, #5
 80036ca:	2390      	movs	r3, #144	; 0x90
 80036cc:	05db      	lsls	r3, r3, #23
 80036ce:	2200      	movs	r2, #0
 80036d0:	0018      	movs	r0, r3
 80036d2:	f001 f976 	bl	80049c2 <HAL_GPIO_WritePin>
}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <SSRHeater_ON_Water>:


void SSRHeater_ON_Water(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSRHeater_Water_GPIO_Port, SSRHeater_Water_Pin, SET);
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <SSRHeater_ON_Water+0x18>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	2140      	movs	r1, #64	; 0x40
 80036e6:	0018      	movs	r0, r3
 80036e8:	f001 f96b 	bl	80049c2 <HAL_GPIO_WritePin>
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	48001400 	.word	0x48001400

080036f8 <SSRHeater_OFF_Water>:
void SSRHeater_OFF_Water(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSRHeater_Water_GPIO_Port, SSRHeater_Water_Pin, RESET);
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <SSRHeater_OFF_Water+0x18>)
 80036fe:	2200      	movs	r2, #0
 8003700:	2140      	movs	r1, #64	; 0x40
 8003702:	0018      	movs	r0, r3
 8003704:	f001 f95d 	bl	80049c2 <HAL_GPIO_WritePin>
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	48001400 	.word	0x48001400

08003714 <LevelSensor_CheckForPrilCleaning>:
}
#endif


void LevelSensor_CheckForPrilCleaning(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
	if(Process.Variables.Milk.LevelSensor)
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <LevelSensor_CheckForPrilCleaning+0x3c>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <LevelSensor_CheckForPrilCleaning+0x22>
	{
		Motor_Milk_Stop();
 8003720:	f7ff fec8 	bl	80034b4 <Motor_Milk_Stop>
		Process.Flags.Cleaning.LevelFilled_Pril = SET;
 8003724:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <LevelSensor_CheckForPrilCleaning+0x3c>)
 8003726:	23ee      	movs	r3, #238	; 0xee
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	18d3      	adds	r3, r2, r3
 800372c:	785a      	ldrb	r2, [r3, #1]
 800372e:	2120      	movs	r1, #32
 8003730:	430a      	orrs	r2, r1
 8003732:	705a      	strb	r2, [r3, #1]
	else
	{
		Motor_Milk_Clkwise();
		Process.Flags.Cleaning.LevelFilled_Pril = RESET;
	}
}
 8003734:	e009      	b.n	800374a <LevelSensor_CheckForPrilCleaning+0x36>
		Motor_Milk_Clkwise();
 8003736:	f7ff fea9 	bl	800348c <Motor_Milk_Clkwise>
		Process.Flags.Cleaning.LevelFilled_Pril = RESET;
 800373a:	4a05      	ldr	r2, [pc, #20]	; (8003750 <LevelSensor_CheckForPrilCleaning+0x3c>)
 800373c:	23ee      	movs	r3, #238	; 0xee
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	18d3      	adds	r3, r2, r3
 8003742:	785a      	ldrb	r2, [r3, #1]
 8003744:	2120      	movs	r1, #32
 8003746:	438a      	bics	r2, r1
 8003748:	705a      	strb	r2, [r3, #1]
}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000120 	.word	0x20000120

08003754 <LevelSensor_CheckForWaterCleaning>:

void LevelSensor_CheckForWaterCleaning(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
	if(Process.Variables.Milk.LevelSensor)
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <LevelSensor_CheckForWaterCleaning+0x3c>)
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <LevelSensor_CheckForWaterCleaning+0x22>
	{
		Motor_CleaningWater_Stop();
 8003760:	f7ff ff26 	bl	80035b0 <Motor_CleaningWater_Stop>
		Process.Flags.Cleaning.LevelFilled_Water = SET;
 8003764:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <LevelSensor_CheckForWaterCleaning+0x3c>)
 8003766:	23ee      	movs	r3, #238	; 0xee
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	18d3      	adds	r3, r2, r3
 800376c:	785a      	ldrb	r2, [r3, #1]
 800376e:	2140      	movs	r1, #64	; 0x40
 8003770:	430a      	orrs	r2, r1
 8003772:	705a      	strb	r2, [r3, #1]
	else
	{
		Motor_CleaningWater_Clkwise();
		Process.Flags.Cleaning.LevelFilled_Water = RESET;
	}
}
 8003774:	e009      	b.n	800378a <LevelSensor_CheckForWaterCleaning+0x36>
		Motor_CleaningWater_Clkwise();
 8003776:	f7ff ff05 	bl	8003584 <Motor_CleaningWater_Clkwise>
		Process.Flags.Cleaning.LevelFilled_Water = RESET;
 800377a:	4a05      	ldr	r2, [pc, #20]	; (8003790 <LevelSensor_CheckForWaterCleaning+0x3c>)
 800377c:	23ee      	movs	r3, #238	; 0xee
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	18d3      	adds	r3, r2, r3
 8003782:	785a      	ldrb	r2, [r3, #1]
 8003784:	2140      	movs	r1, #64	; 0x40
 8003786:	438a      	bics	r2, r1
 8003788:	705a      	strb	r2, [r3, #1]
}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000120 	.word	0x20000120

08003794 <LevelSensor_CheckForMilkWater>:

void LevelSensor_CheckForMilkWater(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
	// *************** For Water in the Milk Chamber ************************* //
	if(Process.Variables.MilkWater.LevelSensor)
 8003798:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <LevelSensor_CheckForMilkWater+0x54>)
 800379a:	22cc      	movs	r2, #204	; 0xcc
 800379c:	589b      	ldr	r3, [r3, r2]
 800379e:	2100      	movs	r1, #0
 80037a0:	1c18      	adds	r0, r3, #0
 80037a2:	f7fc fd49 	bl	8000238 <__aeabi_fcmpeq>
 80037a6:	1e03      	subs	r3, r0, #0
 80037a8:	d109      	bne.n	80037be <LevelSensor_CheckForMilkWater+0x2a>
	{
		Motor_MilkWater_Stop();
 80037aa:	f7ff feab 	bl	8003504 <Motor_MilkWater_Stop>

		Process.Flags.MilkWater.SSRHeater = True;		// Enable in the Timer
 80037ae:	4a0e      	ldr	r2, [pc, #56]	; (80037e8 <LevelSensor_CheckForMilkWater+0x54>)
 80037b0:	23ea      	movs	r3, #234	; 0xea
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	5cd1      	ldrb	r1, [r2, r3]
 80037b6:	2004      	movs	r0, #4
 80037b8:	4301      	orrs	r1, r0
 80037ba:	54d1      	strb	r1, [r2, r3]
 80037bc:	e008      	b.n	80037d0 <LevelSensor_CheckForMilkWater+0x3c>
	}

	else
	{
		Motor_MilkWater_Clkwise();
 80037be:	f7ff fe8d 	bl	80034dc <Motor_MilkWater_Clkwise>
		Process.Flags.MilkWater.SSRHeater = False;
 80037c2:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <LevelSensor_CheckForMilkWater+0x54>)
 80037c4:	23ea      	movs	r3, #234	; 0xea
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	5cd1      	ldrb	r1, [r2, r3]
 80037ca:	2004      	movs	r0, #4
 80037cc:	4381      	bics	r1, r0
 80037ce:	54d1      	strb	r1, [r2, r3]
	}

	// *************** For Milk Chamber ************************* //
	if (Process.Variables.Milk.LevelSensor)
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <LevelSensor_CheckForMilkWater+0x54>)
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <LevelSensor_CheckForMilkWater+0x4a>
	{
		Motor_Milk_Stop();
 80037d8:	f7ff fe6c 	bl	80034b4 <Motor_Milk_Stop>
		}

	}
#endif

}
 80037dc:	e001      	b.n	80037e2 <LevelSensor_CheckForMilkWater+0x4e>
		Motor_Milk_Clkwise();
 80037de:	f7ff fe55 	bl	800348c <Motor_Milk_Clkwise>
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000120 	.word	0x20000120

080037ec <LevelSensor_CheckForOnlyMilkWater>:

void	LevelSensor_CheckForOnlyMilkWater	(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0

	if(Process.Variables.MilkWater.LevelSensor)
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <LevelSensor_CheckForOnlyMilkWater+0x44>)
 80037f2:	22cc      	movs	r2, #204	; 0xcc
 80037f4:	589b      	ldr	r3, [r3, r2]
 80037f6:	2100      	movs	r1, #0
 80037f8:	1c18      	adds	r0, r3, #0
 80037fa:	f7fc fd1d 	bl	8000238 <__aeabi_fcmpeq>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d109      	bne.n	8003816 <LevelSensor_CheckForOnlyMilkWater+0x2a>
	{
		Motor_MilkWater_Stop();
 8003802:	f7ff fe7f 	bl	8003504 <Motor_MilkWater_Stop>
		Process.Flags.MilkWater.SSRHeater = True;
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <LevelSensor_CheckForOnlyMilkWater+0x44>)
 8003808:	23ea      	movs	r3, #234	; 0xea
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	5cd1      	ldrb	r1, [r2, r3]
 800380e:	2004      	movs	r0, #4
 8003810:	4301      	orrs	r1, r0
 8003812:	54d1      	strb	r1, [r2, r3]
	else
	{
		Motor_MilkWater_Clkwise();
		Process.Flags.MilkWater.SSRHeater = False;
	}
}
 8003814:	e008      	b.n	8003828 <LevelSensor_CheckForOnlyMilkWater+0x3c>
		Motor_MilkWater_Clkwise();
 8003816:	f7ff fe61 	bl	80034dc <Motor_MilkWater_Clkwise>
		Process.Flags.MilkWater.SSRHeater = False;
 800381a:	4a05      	ldr	r2, [pc, #20]	; (8003830 <LevelSensor_CheckForOnlyMilkWater+0x44>)
 800381c:	23ea      	movs	r3, #234	; 0xea
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	5cd1      	ldrb	r1, [r2, r3]
 8003822:	2004      	movs	r0, #4
 8003824:	4381      	bics	r1, r0
 8003826:	54d1      	strb	r1, [r2, r3]
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	20000120 	.word	0x20000120

08003834 <LevelSensor_DrainOutPrilFromMilkPipe>:


void LevelSensor_DrainOutPrilFromMilkPipe(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0

	if(Process.Variables.Milk.LevelSensor)
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <LevelSensor_DrainOutPrilFromMilkPipe+0x3c>)
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <LevelSensor_DrainOutPrilFromMilkPipe+0x22>
	{
		Motor_Milk_AntiClkwise();
 8003840:	f7ff fe10 	bl	8003464 <Motor_Milk_AntiClkwise>
		Process.Flags.Cleaning.LevelEmptied = RESET;
 8003844:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <LevelSensor_DrainOutPrilFromMilkPipe+0x3c>)
 8003846:	23ee      	movs	r3, #238	; 0xee
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	18d3      	adds	r3, r2, r3
 800384c:	785a      	ldrb	r2, [r3, #1]
 800384e:	2110      	movs	r1, #16
 8003850:	438a      	bics	r2, r1
 8003852:	705a      	strb	r2, [r3, #1]
		Motor_Milk_AntiClkwise();
		//		Motor_Milk_Stop();
		//		Process.Flags.Cleaning.LevelEmptied = SET;
		Process.Flags.Cleaning.TimerEnable_DrainOut_Pril = SET;					// extra drain out -> Timer Callback @Process.Variables.Cleaning.TimerCounts_DrainOut_Pril
	}
}
 8003854:	e009      	b.n	800386a <LevelSensor_DrainOutPrilFromMilkPipe+0x36>
		Motor_Milk_AntiClkwise();
 8003856:	f7ff fe05 	bl	8003464 <Motor_Milk_AntiClkwise>
		Process.Flags.Cleaning.TimerEnable_DrainOut_Pril = SET;					// extra drain out -> Timer Callback @Process.Variables.Cleaning.TimerCounts_DrainOut_Pril
 800385a:	4a05      	ldr	r2, [pc, #20]	; (8003870 <LevelSensor_DrainOutPrilFromMilkPipe+0x3c>)
 800385c:	23ee      	movs	r3, #238	; 0xee
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	18d3      	adds	r3, r2, r3
 8003862:	789a      	ldrb	r2, [r3, #2]
 8003864:	2101      	movs	r1, #1
 8003866:	430a      	orrs	r2, r1
 8003868:	709a      	strb	r2, [r3, #2]
}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000120 	.word	0x20000120

08003874 <LevelSensor_DrainOutWaterFromMilkPipe>:


void LevelSensor_DrainOutWaterFromMilkPipe(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0

	if(Process.Variables.Milk.LevelSensor)
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <LevelSensor_DrainOutWaterFromMilkPipe+0x3c>)
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <LevelSensor_DrainOutWaterFromMilkPipe+0x22>
	{
		Motor_Milk_AntiClkwise();
 8003880:	f7ff fdf0 	bl	8003464 <Motor_Milk_AntiClkwise>
		Process.Flags.Cleaning.LevelEmptied = RESET;
 8003884:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <LevelSensor_DrainOutWaterFromMilkPipe+0x3c>)
 8003886:	23ee      	movs	r3, #238	; 0xee
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	18d3      	adds	r3, r2, r3
 800388c:	785a      	ldrb	r2, [r3, #1]
 800388e:	2110      	movs	r1, #16
 8003890:	438a      	bics	r2, r1
 8003892:	705a      	strb	r2, [r3, #1]
		//		Process.Flags.Cleaning.LevelEmptied = SET;		// not required

		Motor_Milk_AntiClkwise();
		Process.Flags.Cleaning.TimerEnable_DrainOut_Water = SET;		// extra drain out
	}
}
 8003894:	e009      	b.n	80038aa <LevelSensor_DrainOutWaterFromMilkPipe+0x36>
		Motor_Milk_AntiClkwise();
 8003896:	f7ff fde5 	bl	8003464 <Motor_Milk_AntiClkwise>
		Process.Flags.Cleaning.TimerEnable_DrainOut_Water = SET;		// extra drain out
 800389a:	4a05      	ldr	r2, [pc, #20]	; (80038b0 <LevelSensor_DrainOutWaterFromMilkPipe+0x3c>)
 800389c:	23ee      	movs	r3, #238	; 0xee
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	18d3      	adds	r3, r2, r3
 80038a2:	789a      	ldrb	r2, [r3, #2]
 80038a4:	2102      	movs	r1, #2
 80038a6:	430a      	orrs	r2, r1
 80038a8:	709a      	strb	r2, [r3, #2]
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000120 	.word	0x20000120

080038b4 <Temperature_CheckForMilkWater>:



void Temperature_CheckForMilkWater(void)
{
 80038b4:	b5b0      	push	{r4, r5, r7, lr}
 80038b6:	af00      	add	r7, sp, #0
	if(Process.Flags.MilkWater.SSRHeater)
 80038b8:	4a6b      	ldr	r2, [pc, #428]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 80038ba:	23ea      	movs	r3, #234	; 0xea
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	2204      	movs	r2, #4
 80038c2:	4013      	ands	r3, r2
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d100      	bne.n	80038cc <Temperature_CheckForMilkWater+0x18>
 80038ca:	e0c7      	b.n	8003a5c <Temperature_CheckForMilkWater+0x1a8>
	{
		Process.Flags.MilkWater.SSRHeater = RESET;
 80038cc:	4a66      	ldr	r2, [pc, #408]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 80038ce:	23ea      	movs	r3, #234	; 0xea
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	5cd1      	ldrb	r1, [r2, r3]
 80038d4:	2004      	movs	r0, #4
 80038d6:	4381      	bics	r1, r0
 80038d8:	54d1      	strb	r1, [r2, r3]

		// This is initialization when Water Temperature is 80 and Milk Temp also reached upto 75

		if(!Process.Flags.MilkWater.InitTemp)
 80038da:	4a63      	ldr	r2, [pc, #396]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 80038dc:	23ea      	movs	r3, #234	; 0xea
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	5cd3      	ldrb	r3, [r2, r3]
 80038e2:	2208      	movs	r2, #8
 80038e4:	4013      	ands	r3, r2
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d13c      	bne.n	8003966 <Temperature_CheckForMilkWater+0xb2>
		{
			if(Process.Variables.MilkWater.Temperature.Read < Process.Variables.MilkWater.Temperature.RxInitTemp)
 80038ec:	4b5e      	ldr	r3, [pc, #376]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 80038ee:	22b8      	movs	r2, #184	; 0xb8
 80038f0:	589c      	ldr	r4, [r3, r2]
 80038f2:	4b5d      	ldr	r3, [pc, #372]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 80038f4:	22c8      	movs	r2, #200	; 0xc8
 80038f6:	589b      	ldr	r3, [r3, r2]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f7fd fa83 	bl	8000e04 <__aeabi_ui2f>
 80038fe:	1c03      	adds	r3, r0, #0
 8003900:	1c19      	adds	r1, r3, #0
 8003902:	1c20      	adds	r0, r4, #0
 8003904:	f7fc fc9e 	bl	8000244 <__aeabi_fcmplt>
 8003908:	1e03      	subs	r3, r0, #0
 800390a:	d002      	beq.n	8003912 <Temperature_CheckForMilkWater+0x5e>
			{
				SSRHeater_ON_MilkWater();
 800390c:	f7ff fecc 	bl	80036a8 <SSRHeater_ON_MilkWater>
	}
	else
	{
		SSRHeater_OFF_MilkWater();
	}
}
 8003910:	e0a7      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
			else if(Process.Variables.MilkWater.Temperature.Read >= Process.Variables.MilkWater.Temperature.RxInitTemp)
 8003912:	4b55      	ldr	r3, [pc, #340]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 8003914:	22b8      	movs	r2, #184	; 0xb8
 8003916:	589c      	ldr	r4, [r3, r2]
 8003918:	4b53      	ldr	r3, [pc, #332]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 800391a:	22c8      	movs	r2, #200	; 0xc8
 800391c:	589b      	ldr	r3, [r3, r2]
 800391e:	0018      	movs	r0, r3
 8003920:	f7fd fa70 	bl	8000e04 <__aeabi_ui2f>
 8003924:	1c03      	adds	r3, r0, #0
 8003926:	1c19      	adds	r1, r3, #0
 8003928:	1c20      	adds	r0, r4, #0
 800392a:	f7fc fca9 	bl	8000280 <__aeabi_fcmpge>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d100      	bne.n	8003934 <Temperature_CheckForMilkWater+0x80>
}
 8003932:	e096      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
				SSRHeater_OFF_MilkWater();
 8003934:	f7ff fec5 	bl	80036c2 <SSRHeater_OFF_MilkWater>
				if ( Process.Variables.Milk.Temperature.Read >= Process.Variables.Milk.Temperature.RxInitTemp )
 8003938:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 800393a:	681c      	ldr	r4, [r3, #0]
 800393c:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0018      	movs	r0, r3
 8003942:	f7fd fa5f 	bl	8000e04 <__aeabi_ui2f>
 8003946:	1c03      	adds	r3, r0, #0
 8003948:	1c19      	adds	r1, r3, #0
 800394a:	1c20      	adds	r0, r4, #0
 800394c:	f7fc fc98 	bl	8000280 <__aeabi_fcmpge>
 8003950:	1e03      	subs	r3, r0, #0
 8003952:	d100      	bne.n	8003956 <Temperature_CheckForMilkWater+0xa2>
}
 8003954:	e085      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
					Process.Flags.MilkWater.InitTemp = SET;
 8003956:	4a44      	ldr	r2, [pc, #272]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 8003958:	23ea      	movs	r3, #234	; 0xea
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	5cd1      	ldrb	r1, [r2, r3]
 800395e:	2008      	movs	r0, #8
 8003960:	4301      	orrs	r1, r0
 8003962:	54d1      	strb	r1, [r2, r3]
}
 8003964:	e07d      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
			if(Process.Variables.Milk.Temperature.Read < Process.Variables.Milk.Temperature.RxLowValue)
 8003966:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 8003968:	681c      	ldr	r4, [r3, #0]
 800396a:	4b3f      	ldr	r3, [pc, #252]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	0018      	movs	r0, r3
 8003970:	f7fd fa48 	bl	8000e04 <__aeabi_ui2f>
 8003974:	1c03      	adds	r3, r0, #0
 8003976:	1c19      	adds	r1, r3, #0
 8003978:	1c20      	adds	r0, r4, #0
 800397a:	f7fc fc63 	bl	8000244 <__aeabi_fcmplt>
 800397e:	1e03      	subs	r3, r0, #0
 8003980:	d015      	beq.n	80039ae <Temperature_CheckForMilkWater+0xfa>
				if(Process.Variables.MilkWater.Temperature.Read < Process.Variables.MilkWater.Temperature.RxHighValue)
 8003982:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 8003984:	22b8      	movs	r2, #184	; 0xb8
 8003986:	589c      	ldr	r4, [r3, r2]
 8003988:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 800398a:	22bc      	movs	r2, #188	; 0xbc
 800398c:	589b      	ldr	r3, [r3, r2]
 800398e:	0018      	movs	r0, r3
 8003990:	f7fd fa38 	bl	8000e04 <__aeabi_ui2f>
 8003994:	1c03      	adds	r3, r0, #0
 8003996:	1c19      	adds	r1, r3, #0
 8003998:	1c20      	adds	r0, r4, #0
 800399a:	f7fc fc53 	bl	8000244 <__aeabi_fcmplt>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d002      	beq.n	80039a8 <Temperature_CheckForMilkWater+0xf4>
					SSRHeater_ON_MilkWater();
 80039a2:	f7ff fe81 	bl	80036a8 <SSRHeater_ON_MilkWater>
}
 80039a6:	e05c      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
					SSRHeater_OFF_MilkWater();
 80039a8:	f7ff fe8b 	bl	80036c2 <SSRHeater_OFF_MilkWater>
}
 80039ac:	e059      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
			else if((Process.Variables.Milk.Temperature.Read >= Process.Variables.Milk.Temperature.RxLowValue)
 80039ae:	4b2e      	ldr	r3, [pc, #184]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 80039b0:	681c      	ldr	r4, [r3, #0]
 80039b2:	4b2d      	ldr	r3, [pc, #180]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7fd fa24 	bl	8000e04 <__aeabi_ui2f>
 80039bc:	1c03      	adds	r3, r0, #0
 80039be:	1c19      	adds	r1, r3, #0
 80039c0:	1c20      	adds	r0, r4, #0
 80039c2:	f7fc fc5d 	bl	8000280 <__aeabi_fcmpge>
 80039c6:	1e03      	subs	r3, r0, #0
 80039c8:	d023      	beq.n	8003a12 <Temperature_CheckForMilkWater+0x15e>
					and (Process.Variables.Milk.Temperature.Read <= Process.Variables.Milk.Temperature.RxMiddleValue))
 80039ca:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 80039cc:	681c      	ldr	r4, [r3, #0]
 80039ce:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7fd fa16 	bl	8000e04 <__aeabi_ui2f>
 80039d8:	1c03      	adds	r3, r0, #0
 80039da:	1c19      	adds	r1, r3, #0
 80039dc:	1c20      	adds	r0, r4, #0
 80039de:	f7fc fc3b 	bl	8000258 <__aeabi_fcmple>
 80039e2:	1e03      	subs	r3, r0, #0
 80039e4:	d015      	beq.n	8003a12 <Temperature_CheckForMilkWater+0x15e>
				if(Process.Variables.MilkWater.Temperature.Read < Process.Variables.MilkWater.Temperature.RxMiddleValue)
 80039e6:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 80039e8:	22b8      	movs	r2, #184	; 0xb8
 80039ea:	589c      	ldr	r4, [r3, r2]
 80039ec:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 80039ee:	22c0      	movs	r2, #192	; 0xc0
 80039f0:	589b      	ldr	r3, [r3, r2]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7fd fa06 	bl	8000e04 <__aeabi_ui2f>
 80039f8:	1c03      	adds	r3, r0, #0
 80039fa:	1c19      	adds	r1, r3, #0
 80039fc:	1c20      	adds	r0, r4, #0
 80039fe:	f7fc fc21 	bl	8000244 <__aeabi_fcmplt>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d002      	beq.n	8003a0c <Temperature_CheckForMilkWater+0x158>
					SSRHeater_ON_MilkWater();
 8003a06:	f7ff fe4f 	bl	80036a8 <SSRHeater_ON_MilkWater>
				if(Process.Variables.MilkWater.Temperature.Read < Process.Variables.MilkWater.Temperature.RxMiddleValue)
 8003a0a:	e02a      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
					SSRHeater_OFF_MilkWater();
 8003a0c:	f7ff fe59 	bl	80036c2 <SSRHeater_OFF_MilkWater>
				if(Process.Variables.MilkWater.Temperature.Read < Process.Variables.MilkWater.Temperature.RxMiddleValue)
 8003a10:	e027      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
			else if(Process.Variables.Milk.Temperature.Read >= Process.Variables.Milk.Temperature.RxMiddleValue){
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 8003a14:	681c      	ldr	r4, [r3, #0]
 8003a16:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7fd f9f2 	bl	8000e04 <__aeabi_ui2f>
 8003a20:	1c03      	adds	r3, r0, #0
 8003a22:	1c19      	adds	r1, r3, #0
 8003a24:	1c20      	adds	r0, r4, #0
 8003a26:	f7fc fc2b 	bl	8000280 <__aeabi_fcmpge>
 8003a2a:	1e03      	subs	r3, r0, #0
 8003a2c:	d100      	bne.n	8003a30 <Temperature_CheckForMilkWater+0x17c>
}
 8003a2e:	e018      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
				if(Process.Variables.MilkWater.Temperature.Read < Process.Variables.MilkWater.Temperature.RxLowValue)
 8003a30:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 8003a32:	22b8      	movs	r2, #184	; 0xb8
 8003a34:	589c      	ldr	r4, [r3, r2]
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <Temperature_CheckForMilkWater+0x1b4>)
 8003a38:	22c4      	movs	r2, #196	; 0xc4
 8003a3a:	589b      	ldr	r3, [r3, r2]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7fd f9e1 	bl	8000e04 <__aeabi_ui2f>
 8003a42:	1c03      	adds	r3, r0, #0
 8003a44:	1c19      	adds	r1, r3, #0
 8003a46:	1c20      	adds	r0, r4, #0
 8003a48:	f7fc fbfc 	bl	8000244 <__aeabi_fcmplt>
 8003a4c:	1e03      	subs	r3, r0, #0
 8003a4e:	d002      	beq.n	8003a56 <Temperature_CheckForMilkWater+0x1a2>
					SSRHeater_ON_MilkWater();
 8003a50:	f7ff fe2a 	bl	80036a8 <SSRHeater_ON_MilkWater>
}
 8003a54:	e005      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
					SSRHeater_OFF_MilkWater();
 8003a56:	f7ff fe34 	bl	80036c2 <SSRHeater_OFF_MilkWater>
}
 8003a5a:	e002      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
		SSRHeater_OFF_MilkWater();
 8003a5c:	f7ff fe31 	bl	80036c2 <SSRHeater_OFF_MilkWater>
}
 8003a60:	e7ff      	b.n	8003a62 <Temperature_CheckForMilkWater+0x1ae>
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bdb0      	pop	{r4, r5, r7, pc}
 8003a68:	20000120 	.word	0x20000120

08003a6c <Temperature_CheckForOnlyMilkWater>:

void 	Temperature_CheckForOnlyMilkWater(void)
{
 8003a6c:	b5b0      	push	{r4, r5, r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	if(Process.Flags.MilkWater.SSRHeater)
 8003a70:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <Temperature_CheckForOnlyMilkWater+0x58>)
 8003a72:	23ea      	movs	r3, #234	; 0xea
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	5cd3      	ldrb	r3, [r2, r3]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01c      	beq.n	8003abc <Temperature_CheckForOnlyMilkWater+0x50>
	{
		Process.Flags.MilkWater.SSRHeater = RESET;
 8003a82:	4a10      	ldr	r2, [pc, #64]	; (8003ac4 <Temperature_CheckForOnlyMilkWater+0x58>)
 8003a84:	23ea      	movs	r3, #234	; 0xea
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	5cd1      	ldrb	r1, [r2, r3]
 8003a8a:	2004      	movs	r0, #4
 8003a8c:	4381      	bics	r1, r0
 8003a8e:	54d1      	strb	r1, [r2, r3]

		if(Process.Variables.MilkWater.Temperature.Read < Process.Variables.Water.Temperature.RxMilkWaterValue)
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <Temperature_CheckForOnlyMilkWater+0x58>)
 8003a92:	22b8      	movs	r2, #184	; 0xb8
 8003a94:	589c      	ldr	r4, [r3, r2]
 8003a96:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <Temperature_CheckForOnlyMilkWater+0x58>)
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	58d3      	ldr	r3, [r2, r3]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7fd f9b0 	bl	8000e04 <__aeabi_ui2f>
 8003aa4:	1c03      	adds	r3, r0, #0
 8003aa6:	1c19      	adds	r1, r3, #0
 8003aa8:	1c20      	adds	r0, r4, #0
 8003aaa:	f7fc fbcb 	bl	8000244 <__aeabi_fcmplt>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d002      	beq.n	8003ab8 <Temperature_CheckForOnlyMilkWater+0x4c>
		{
			SSRHeater_ON_MilkWater();
 8003ab2:	f7ff fdf9 	bl	80036a8 <SSRHeater_ON_MilkWater>
		else
		{
			SSRHeater_OFF_MilkWater();
		}
	}
}
 8003ab6:	e001      	b.n	8003abc <Temperature_CheckForOnlyMilkWater+0x50>
			SSRHeater_OFF_MilkWater();
 8003ab8:	f7ff fe03 	bl	80036c2 <SSRHeater_OFF_MilkWater>
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	20000120 	.word	0x20000120

08003ac8 <LevelSensor_CheckForWater>:


void LevelSensor_CheckForWater(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
	if(Process.Variables.Water.LevelSensor)
 8003acc:	4a0f      	ldr	r2, [pc, #60]	; (8003b0c <LevelSensor_CheckForWater+0x44>)
 8003ace:	2382      	movs	r3, #130	; 0x82
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	58d3      	ldr	r3, [r2, r3]
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	1c18      	adds	r0, r3, #0
 8003ad8:	f7fc fbae 	bl	8000238 <__aeabi_fcmpeq>
 8003adc:	1e03      	subs	r3, r0, #0
 8003ade:	d109      	bne.n	8003af4 <LevelSensor_CheckForWater+0x2c>
	{
		Motor_Water_Stop();
 8003ae0:	f7ff fd3a 	bl	8003558 <Motor_Water_Stop>
		Process.Flags.Water.SSRHeater = SET;
 8003ae4:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <LevelSensor_CheckForWater+0x44>)
 8003ae6:	23ec      	movs	r3, #236	; 0xec
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	5cd1      	ldrb	r1, [r2, r3]
 8003aec:	2008      	movs	r0, #8
 8003aee:	4301      	orrs	r1, r0
 8003af0:	54d1      	strb	r1, [r2, r3]
	else
	{
		Motor_Water_Clkwise();
		Process.Flags.Water.SSRHeater = RESET;
	}
}
 8003af2:	e008      	b.n	8003b06 <LevelSensor_CheckForWater+0x3e>
		Motor_Water_Clkwise();
 8003af4:	f7ff fd1a 	bl	800352c <Motor_Water_Clkwise>
		Process.Flags.Water.SSRHeater = RESET;
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <LevelSensor_CheckForWater+0x44>)
 8003afa:	23ec      	movs	r3, #236	; 0xec
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	5cd1      	ldrb	r1, [r2, r3]
 8003b00:	2008      	movs	r0, #8
 8003b02:	4381      	bics	r1, r0
 8003b04:	54d1      	strb	r1, [r2, r3]
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000120 	.word	0x20000120

08003b10 <Temperature_CheckForWater>:



void Temperature_CheckForWater(void)
{
 8003b10:	b5b0      	push	{r4, r5, r7, lr}
 8003b12:	af00      	add	r7, sp, #0
	if(Process.Flags.Water.SSRHeater)
 8003b14:	4a13      	ldr	r2, [pc, #76]	; (8003b64 <Temperature_CheckForWater+0x54>)
 8003b16:	23ec      	movs	r3, #236	; 0xec
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	5cd3      	ldrb	r3, [r2, r3]
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	4013      	ands	r3, r2
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01b      	beq.n	8003b5e <Temperature_CheckForWater+0x4e>
	{

		Process.Flags.Water.SSRHeater = RESET;
 8003b26:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <Temperature_CheckForWater+0x54>)
 8003b28:	23ec      	movs	r3, #236	; 0xec
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	5cd1      	ldrb	r1, [r2, r3]
 8003b2e:	2008      	movs	r0, #8
 8003b30:	4381      	bics	r1, r0
 8003b32:	54d1      	strb	r1, [r2, r3]

		if(Process.Variables.Water.Temperature.Read < Process.Variables.Water.Temperature.RxValue)
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <Temperature_CheckForWater+0x54>)
 8003b36:	22f8      	movs	r2, #248	; 0xf8
 8003b38:	589c      	ldr	r4, [r3, r2]
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <Temperature_CheckForWater+0x54>)
 8003b3c:	22fc      	movs	r2, #252	; 0xfc
 8003b3e:	589b      	ldr	r3, [r3, r2]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fd f95f 	bl	8000e04 <__aeabi_ui2f>
 8003b46:	1c03      	adds	r3, r0, #0
 8003b48:	1c19      	adds	r1, r3, #0
 8003b4a:	1c20      	adds	r0, r4, #0
 8003b4c:	f7fc fb7a 	bl	8000244 <__aeabi_fcmplt>
 8003b50:	1e03      	subs	r3, r0, #0
 8003b52:	d002      	beq.n	8003b5a <Temperature_CheckForWater+0x4a>
		{
			SSRHeater_ON_Water();
 8003b54:	f7ff fdc2 	bl	80036dc <SSRHeater_ON_Water>
		else
		{
			SSRHeater_OFF_Water();
		}
	}
}
 8003b58:	e001      	b.n	8003b5e <Temperature_CheckForWater+0x4e>
			SSRHeater_OFF_Water();
 8003b5a:	f7ff fdcd 	bl	80036f8 <SSRHeater_OFF_Water>
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bdb0      	pop	{r4, r5, r7, pc}
 8003b64:	20000120 	.word	0x20000120

08003b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <HAL_MspInit+0x44>)
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <HAL_MspInit+0x44>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	430a      	orrs	r2, r1
 8003b78:	619a      	str	r2, [r3, #24]
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <HAL_MspInit+0x44>)
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4013      	ands	r3, r2
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_MspInit+0x44>)
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	4b08      	ldr	r3, [pc, #32]	; (8003bac <HAL_MspInit+0x44>)
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	0549      	lsls	r1, r1, #21
 8003b90:	430a      	orrs	r2, r1
 8003b92:	61da      	str	r2, [r3, #28]
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_MspInit+0x44>)
 8003b96:	69da      	ldr	r2, [r3, #28]
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	055b      	lsls	r3, r3, #21
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b002      	add	sp, #8
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	40021000 	.word	0x40021000

08003bb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb8:	2314      	movs	r3, #20
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	2314      	movs	r3, #20
 8003bc0:	001a      	movs	r2, r3
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	f003 f8f2 	bl	8006dac <memset>
  if(hadc->Instance==ADC1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_ADC_MspInit+0x84>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d12c      	bne.n	8003c2c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003bd2:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <HAL_ADC_MspInit+0x88>)
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <HAL_ADC_MspInit+0x88>)
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	0089      	lsls	r1, r1, #2
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	619a      	str	r2, [r3, #24]
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <HAL_ADC_MspInit+0x88>)
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_ADC_MspInit+0x88>)
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <HAL_ADC_MspInit+0x88>)
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	0289      	lsls	r1, r1, #10
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	615a      	str	r2, [r3, #20]
 8003bfc:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <HAL_ADC_MspInit+0x88>)
 8003bfe:	695a      	ldr	r2, [r3, #20]
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c0a:	2114      	movs	r1, #20
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	2203      	movs	r2, #3
 8003c16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1e:	187a      	adds	r2, r7, r1
 8003c20:	2390      	movs	r3, #144	; 0x90
 8003c22:	05db      	lsls	r3, r3, #23
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 fd3e 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b00a      	add	sp, #40	; 0x28
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40012400 	.word	0x40012400
 8003c38:	40021000 	.word	0x40021000

08003c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a17      	ldr	r2, [pc, #92]	; (8003ca8 <HAL_TIM_Base_MspInit+0x6c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d116      	bne.n	8003c7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c4e:	4b17      	ldr	r3, [pc, #92]	; (8003cac <HAL_TIM_Base_MspInit+0x70>)
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	4b16      	ldr	r3, [pc, #88]	; (8003cac <HAL_TIM_Base_MspInit+0x70>)
 8003c54:	2180      	movs	r1, #128	; 0x80
 8003c56:	0109      	lsls	r1, r1, #4
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	619a      	str	r2, [r3, #24]
 8003c5c:	4b13      	ldr	r3, [pc, #76]	; (8003cac <HAL_TIM_Base_MspInit+0x70>)
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4013      	ands	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	200d      	movs	r0, #13
 8003c70:	f000 fca2 	bl	80045b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003c74:	200d      	movs	r0, #13
 8003c76:	f000 fcb4 	bl	80045e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003c7a:	e010      	b.n	8003c9e <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM3)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0b      	ldr	r2, [pc, #44]	; (8003cb0 <HAL_TIM_Base_MspInit+0x74>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d10b      	bne.n	8003c9e <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <HAL_TIM_Base_MspInit+0x70>)
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_TIM_Base_MspInit+0x70>)
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	61da      	str	r2, [r3, #28]
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_TIM_Base_MspInit+0x70>)
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	2202      	movs	r2, #2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b004      	add	sp, #16
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40000400 	.word	0x40000400

08003cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cbc:	2314      	movs	r3, #20
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	2314      	movs	r3, #20
 8003cc4:	001a      	movs	r2, r3
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f003 f870 	bl	8006dac <memset>
  if(huart->Instance==USART2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <HAL_UART_MspInit+0xa0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d13a      	bne.n	8003d4c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cd6:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_UART_MspInit+0xa4>)
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	4b1f      	ldr	r3, [pc, #124]	; (8003d58 <HAL_UART_MspInit+0xa4>)
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	0289      	lsls	r1, r1, #10
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	61da      	str	r2, [r3, #28]
 8003ce4:	4b1c      	ldr	r3, [pc, #112]	; (8003d58 <HAL_UART_MspInit+0xa4>)
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	029b      	lsls	r3, r3, #10
 8003cec:	4013      	ands	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf2:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <HAL_UART_MspInit+0xa4>)
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <HAL_UART_MspInit+0xa4>)
 8003cf8:	2180      	movs	r1, #128	; 0x80
 8003cfa:	0289      	lsls	r1, r1, #10
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	615a      	str	r2, [r3, #20]
 8003d00:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <HAL_UART_MspInit+0xa4>)
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	029b      	lsls	r3, r3, #10
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003d0e:	2114      	movs	r1, #20
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	220c      	movs	r2, #12
 8003d14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	2202      	movs	r2, #2
 8003d1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	2200      	movs	r2, #0
 8003d26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2e:	187a      	adds	r2, r7, r1
 8003d30:	2390      	movs	r3, #144	; 0x90
 8003d32:	05db      	lsls	r3, r3, #23
 8003d34:	0011      	movs	r1, r2
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 fcb6 	bl	80046a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2100      	movs	r1, #0
 8003d40:	201c      	movs	r0, #28
 8003d42:	f000 fc39 	bl	80045b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d46:	201c      	movs	r0, #28
 8003d48:	f000 fc4b 	bl	80045e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b00a      	add	sp, #40	; 0x28
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40004400 	.word	0x40004400
 8003d58:	40021000 	.word	0x40021000

08003d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d6a:	e7fe      	b.n	8003d6a <HardFault_Handler+0x4>

08003d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d84:	f000 f8f8 	bl	8003f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8003d96:	0018      	movs	r0, r3
 8003d98:	f001 fb42 	bl	8005420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	20000310 	.word	0x20000310

08003da8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003dac:	4b33      	ldr	r3, [pc, #204]	; (8003e7c <USART2_IRQHandler+0xd4>)
 8003dae:	0018      	movs	r0, r3
 8003db0:	f002 fa8c 	bl	80062cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */



	if (Process.Variables.ReceivedData[0] not_eq StartByte)
 8003db4:	4a32      	ldr	r2, [pc, #200]	; (8003e80 <USART2_IRQHandler+0xd8>)
 8003db6:	23c9      	movs	r3, #201	; 0xc9
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	5cd3      	ldrb	r3, [r2, r3]
 8003dbc:	2b13      	cmp	r3, #19
 8003dbe:	d00f      	beq.n	8003de0 <USART2_IRQHandler+0x38>
	{
		Process.Variables.RxCounts = RESET;
 8003dc0:	4a2f      	ldr	r2, [pc, #188]	; (8003e80 <USART2_IRQHandler+0xd8>)
 8003dc2:	2392      	movs	r3, #146	; 0x92
 8003dc4:	33ff      	adds	r3, #255	; 0xff
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	54d1      	strb	r1, [r2, r3]
		memset(Process.Variables.ReceivedData, RESET, sizeof(Process.Variables.ReceivedData));
 8003dca:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <USART2_IRQHandler+0xdc>)
 8003dcc:	2240      	movs	r2, #64	; 0x40
 8003dce:	2100      	movs	r1, #0
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f002 ffeb 	bl	8006dac <memset>
		HAL_UART_Init(&huart2);
 8003dd6:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <USART2_IRQHandler+0xd4>)
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f002 f8d7 	bl	8005f8c <HAL_UART_Init>
 8003dde:	e009      	b.n	8003df4 <USART2_IRQHandler+0x4c>
	}

	else
	{
		Process.Variables.RxCounts++;
 8003de0:	4a27      	ldr	r2, [pc, #156]	; (8003e80 <USART2_IRQHandler+0xd8>)
 8003de2:	2392      	movs	r3, #146	; 0x92
 8003de4:	33ff      	adds	r3, #255	; 0xff
 8003de6:	5cd3      	ldrb	r3, [r2, r3]
 8003de8:	3301      	adds	r3, #1
 8003dea:	b2d9      	uxtb	r1, r3
 8003dec:	4a24      	ldr	r2, [pc, #144]	; (8003e80 <USART2_IRQHandler+0xd8>)
 8003dee:	2392      	movs	r3, #146	; 0x92
 8003df0:	33ff      	adds	r3, #255	; 0xff
 8003df2:	54d1      	strb	r1, [r2, r3]
	}


	if(Process.Variables.RxCounts == ReceivedUsartPulses)
 8003df4:	4a22      	ldr	r2, [pc, #136]	; (8003e80 <USART2_IRQHandler+0xd8>)
 8003df6:	2392      	movs	r3, #146	; 0x92
 8003df8:	33ff      	adds	r3, #255	; 0xff
 8003dfa:	5cd3      	ldrb	r3, [r2, r3]
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d139      	bne.n	8003e74 <USART2_IRQHandler+0xcc>
	{
		if(
				(Process.Variables.ReceivedData[0] 	not_eq 	StartByte) 			or
 8003e00:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <USART2_IRQHandler+0xd8>)
 8003e02:	23c9      	movs	r3, #201	; 0xc9
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	5cd3      	ldrb	r3, [r2, r3]
		if(
 8003e08:	2b13      	cmp	r3, #19
 8003e0a:	d111      	bne.n	8003e30 <USART2_IRQHandler+0x88>
				(Process.Variables.ReceivedData[2]	not_eq 	MainController) 	or
 8003e0c:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <USART2_IRQHandler+0xd8>)
 8003e0e:	23ca      	movs	r3, #202	; 0xca
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	5cd3      	ldrb	r3, [r2, r3]
				(Process.Variables.ReceivedData[0] 	not_eq 	StartByte) 			or
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d10b      	bne.n	8003e30 <USART2_IRQHandler+0x88>
				(Process.Variables.ReceivedData[3] 	not_eq 	Destination) 		or
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <USART2_IRQHandler+0xd8>)
 8003e1a:	2396      	movs	r3, #150	; 0x96
 8003e1c:	33ff      	adds	r3, #255	; 0xff
 8003e1e:	5cd3      	ldrb	r3, [r2, r3]
				(Process.Variables.ReceivedData[2]	not_eq 	MainController) 	or
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d105      	bne.n	8003e30 <USART2_IRQHandler+0x88>
				(Process.Variables.ReceivedData[63] not_eq 	EndByte)				)
 8003e24:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <USART2_IRQHandler+0xd8>)
 8003e26:	23d2      	movs	r3, #210	; 0xd2
 8003e28:	33ff      	adds	r3, #255	; 0xff
 8003e2a:	5cd3      	ldrb	r3, [r2, r3]
				(Process.Variables.ReceivedData[3] 	not_eq 	Destination) 		or
 8003e2c:	2b12      	cmp	r3, #18
 8003e2e:	d013      	beq.n	8003e58 <USART2_IRQHandler+0xb0>
		{
			memset(Process.Variables.ReceivedData, RESET, sizeof(Process.Variables.ReceivedData));
 8003e30:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <USART2_IRQHandler+0xdc>)
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	2100      	movs	r1, #0
 8003e36:	0018      	movs	r0, r3
 8003e38:	f002 ffb8 	bl	8006dac <memset>
			HAL_GPIO_WritePin(USART_DE_GPIO_Port, USART_DE_Pin, RESET);
 8003e3c:	2390      	movs	r3, #144	; 0x90
 8003e3e:	05db      	lsls	r3, r3, #23
 8003e40:	2200      	movs	r2, #0
 8003e42:	2102      	movs	r1, #2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f000 fdbc 	bl	80049c2 <HAL_GPIO_WritePin>
			HAL_UART_Receive_IT(&huart2, Process.Variables.ReceivedData, sizeof(Process.Variables.ReceivedData));
 8003e4a:	490e      	ldr	r1, [pc, #56]	; (8003e84 <USART2_IRQHandler+0xdc>)
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <USART2_IRQHandler+0xd4>)
 8003e4e:	2240      	movs	r2, #64	; 0x40
 8003e50:	0018      	movs	r0, r3
 8003e52:	f002 f997 	bl	8006184 <HAL_UART_Receive_IT>
 8003e56:	e008      	b.n	8003e6a <USART2_IRQHandler+0xc2>
		}

		else
		{
			Process.Flags.UART_Enable = SET;
 8003e58:	4a09      	ldr	r2, [pc, #36]	; (8003e80 <USART2_IRQHandler+0xd8>)
 8003e5a:	23f2      	movs	r3, #242	; 0xf2
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	5cd1      	ldrb	r1, [r2, r3]
 8003e60:	2001      	movs	r0, #1
 8003e62:	4301      	orrs	r1, r0
 8003e64:	54d1      	strb	r1, [r2, r3]
			HAL_UART_CpltCallback();
 8003e66:	f7fd ff9f 	bl	8001da8 <HAL_UART_CpltCallback>
		}

		Process.Variables.RxCounts = RESET;
 8003e6a:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <USART2_IRQHandler+0xd8>)
 8003e6c:	2392      	movs	r3, #146	; 0x92
 8003e6e:	33ff      	adds	r3, #255	; 0xff
 8003e70:	2100      	movs	r1, #0
 8003e72:	54d1      	strb	r1, [r2, r3]
	}


  /* USER CODE END USART2_IRQn 1 */
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	20000354 	.word	0x20000354
 8003e80:	20000120 	.word	0x20000120
 8003e84:	200002b2 	.word	0x200002b2

08003e88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <Reset_Handler>:
 8003e94:	480d      	ldr	r0, [pc, #52]	; (8003ecc <LoopForever+0x2>)
 8003e96:	4685      	mov	sp, r0
 8003e98:	480d      	ldr	r0, [pc, #52]	; (8003ed0 <LoopForever+0x6>)
 8003e9a:	490e      	ldr	r1, [pc, #56]	; (8003ed4 <LoopForever+0xa>)
 8003e9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <LoopForever+0xe>)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e002      	b.n	8003ea8 <LoopCopyDataInit>

08003ea2 <CopyDataInit>:
 8003ea2:	58d4      	ldr	r4, [r2, r3]
 8003ea4:	50c4      	str	r4, [r0, r3]
 8003ea6:	3304      	adds	r3, #4

08003ea8 <LoopCopyDataInit>:
 8003ea8:	18c4      	adds	r4, r0, r3
 8003eaa:	428c      	cmp	r4, r1
 8003eac:	d3f9      	bcc.n	8003ea2 <CopyDataInit>
 8003eae:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <LoopForever+0x12>)
 8003eb0:	4c0b      	ldr	r4, [pc, #44]	; (8003ee0 <LoopForever+0x16>)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e001      	b.n	8003eba <LoopFillZerobss>

08003eb6 <FillZerobss>:
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	3204      	adds	r2, #4

08003eba <LoopFillZerobss>:
 8003eba:	42a2      	cmp	r2, r4
 8003ebc:	d3fb      	bcc.n	8003eb6 <FillZerobss>
 8003ebe:	f7ff ffe3 	bl	8003e88 <SystemInit>
 8003ec2:	f002 ff4f 	bl	8006d64 <__libc_init_array>
 8003ec6:	f7fd fc09 	bl	80016dc <main>

08003eca <LoopForever>:
 8003eca:	e7fe      	b.n	8003eca <LoopForever>
 8003ecc:	20002000 	.word	0x20002000
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	2000008c 	.word	0x2000008c
 8003ed8:	08006ee8 	.word	0x08006ee8
 8003edc:	2000008c 	.word	0x2000008c
 8003ee0:	2000041c 	.word	0x2000041c

08003ee4 <ADC1_IRQHandler>:
 8003ee4:	e7fe      	b.n	8003ee4 <ADC1_IRQHandler>
	...

08003ee8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <HAL_Init+0x24>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_Init+0x24>)
 8003ef2:	2110      	movs	r1, #16
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f000 f809 	bl	8003f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003efe:	f7ff fe33 	bl	8003b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	40022000 	.word	0x40022000

08003f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f18:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <HAL_InitTick+0x5c>)
 8003f1a:	681c      	ldr	r4, [r3, #0]
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <HAL_InitTick+0x60>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	0019      	movs	r1, r3
 8003f22:	23fa      	movs	r3, #250	; 0xfa
 8003f24:	0098      	lsls	r0, r3, #2
 8003f26:	f7fc f8ef 	bl	8000108 <__udivsi3>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	0019      	movs	r1, r3
 8003f2e:	0020      	movs	r0, r4
 8003f30:	f7fc f8ea 	bl	8000108 <__udivsi3>
 8003f34:	0003      	movs	r3, r0
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 fb63 	bl	8004602 <HAL_SYSTICK_Config>
 8003f3c:	1e03      	subs	r3, r0, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e00f      	b.n	8003f64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d80b      	bhi.n	8003f62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	425b      	negs	r3, r3
 8003f50:	2200      	movs	r2, #0
 8003f52:	0018      	movs	r0, r3
 8003f54:	f000 fb30 	bl	80045b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <HAL_InitTick+0x64>)
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e000      	b.n	8003f64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b003      	add	sp, #12
 8003f6a:	bd90      	pop	{r4, r7, pc}
 8003f6c:	20000080 	.word	0x20000080
 8003f70:	20000088 	.word	0x20000088
 8003f74:	20000084 	.word	0x20000084

08003f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <HAL_IncTick+0x1c>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	001a      	movs	r2, r3
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_IncTick+0x20>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	18d2      	adds	r2, r2, r3
 8003f88:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <HAL_IncTick+0x20>)
 8003f8a:	601a      	str	r2, [r3, #0]
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	20000088 	.word	0x20000088
 8003f98:	20000418 	.word	0x20000418

08003f9c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <HAL_GetTick+0x10>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	20000418 	.word	0x20000418

08003fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fb8:	f7ff fff0 	bl	8003f9c <HAL_GetTick>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	d005      	beq.n	8003fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <HAL_Delay+0x40>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	001a      	movs	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	f7ff ffe0 	bl	8003f9c <HAL_GetTick>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d8f7      	bhi.n	8003fd8 <HAL_Delay+0x28>
  {
  }
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b004      	add	sp, #16
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000088 	.word	0x20000088

08003ff4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ffc:	230f      	movs	r3, #15
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e125      	b.n	800425e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2234      	movs	r2, #52	; 0x34
 8004024:	2100      	movs	r1, #0
 8004026:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff fdc0 	bl	8003bb0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	2210      	movs	r2, #16
 8004036:	4013      	ands	r3, r2
 8004038:	d000      	beq.n	800403c <HAL_ADC_Init+0x48>
 800403a:	e103      	b.n	8004244 <HAL_ADC_Init+0x250>
 800403c:	230f      	movs	r3, #15
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d000      	beq.n	8004048 <HAL_ADC_Init+0x54>
 8004046:	e0fd      	b.n	8004244 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2204      	movs	r2, #4
 8004050:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8004052:	d000      	beq.n	8004056 <HAL_ADC_Init+0x62>
 8004054:	e0f6      	b.n	8004244 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	4a83      	ldr	r2, [pc, #524]	; (8004268 <HAL_ADC_Init+0x274>)
 800405c:	4013      	ands	r3, r2
 800405e:	2202      	movs	r2, #2
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2203      	movs	r2, #3
 800406e:	4013      	ands	r3, r2
 8004070:	2b01      	cmp	r3, #1
 8004072:	d112      	bne.n	800409a <HAL_ADC_Init+0xa6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2201      	movs	r2, #1
 800407c:	4013      	ands	r3, r2
 800407e:	2b01      	cmp	r3, #1
 8004080:	d009      	beq.n	8004096 <HAL_ADC_Init+0xa2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	401a      	ands	r2, r3
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	429a      	cmp	r2, r3
 8004094:	d101      	bne.n	800409a <HAL_ADC_Init+0xa6>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_ADC_Init+0xa8>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d116      	bne.n	80040ce <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2218      	movs	r2, #24
 80040a8:	4393      	bics	r3, r2
 80040aa:	0019      	movs	r1, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	0899      	lsrs	r1, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4964      	ldr	r1, [pc, #400]	; (800426c <HAL_ADC_Init+0x278>)
 80040da:	400a      	ands	r2, r1
 80040dc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	7e1b      	ldrb	r3, [r3, #24]
 80040e2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	7e5b      	ldrb	r3, [r3, #25]
 80040e8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7e9b      	ldrb	r3, [r3, #26]
 80040f0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80040f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d002      	beq.n	8004102 <HAL_ADC_Init+0x10e>
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	015b      	lsls	r3, r3, #5
 8004100:	e000      	b.n	8004104 <HAL_ADC_Init+0x110>
 8004102:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004104:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800410a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d101      	bne.n	8004118 <HAL_ADC_Init+0x124>
 8004114:	2304      	movs	r3, #4
 8004116:	e000      	b.n	800411a <HAL_ADC_Init+0x126>
 8004118:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800411a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2124      	movs	r1, #36	; 0x24
 8004120:	5c5b      	ldrb	r3, [r3, r1]
 8004122:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004124:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4313      	orrs	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	7edb      	ldrb	r3, [r3, #27]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d115      	bne.n	8004160 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7e9b      	ldrb	r3, [r3, #26]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2280      	movs	r2, #128	; 0x80
 8004140:	0252      	lsls	r2, r2, #9
 8004142:	4313      	orrs	r3, r2
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	e00b      	b.n	8004160 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	2220      	movs	r2, #32
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	2201      	movs	r2, #1
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	23c2      	movs	r3, #194	; 0xc2
 8004166:	33ff      	adds	r3, #255	; 0xff
 8004168:	429a      	cmp	r2, r3
 800416a:	d007      	beq.n	800417c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004174:	4313      	orrs	r3, r2
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	4313      	orrs	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68d9      	ldr	r1, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	430a      	orrs	r2, r1
 800418a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	055b      	lsls	r3, r3, #21
 8004194:	429a      	cmp	r2, r3
 8004196:	d01b      	beq.n	80041d0 <HAL_ADC_Init+0x1dc>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d017      	beq.n	80041d0 <HAL_ADC_Init+0x1dc>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d013      	beq.n	80041d0 <HAL_ADC_Init+0x1dc>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d00f      	beq.n	80041d0 <HAL_ADC_Init+0x1dc>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d00b      	beq.n	80041d0 <HAL_ADC_Init+0x1dc>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	2b05      	cmp	r3, #5
 80041be:	d007      	beq.n	80041d0 <HAL_ADC_Init+0x1dc>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	2b06      	cmp	r3, #6
 80041c6:	d003      	beq.n	80041d0 <HAL_ADC_Init+0x1dc>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	2b07      	cmp	r3, #7
 80041ce:	d112      	bne.n	80041f6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2107      	movs	r1, #7
 80041dc:	438a      	bics	r2, r1
 80041de:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6959      	ldr	r1, [r3, #20]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	2207      	movs	r2, #7
 80041ec:	401a      	ands	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <HAL_ADC_Init+0x27c>)
 80041fe:	4013      	ands	r3, r2
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	d10b      	bne.n	800421e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	2203      	movs	r2, #3
 8004212:	4393      	bics	r3, r2
 8004214:	2201      	movs	r2, #1
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800421c:	e01c      	b.n	8004258 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	2212      	movs	r2, #18
 8004224:	4393      	bics	r3, r2
 8004226:	2210      	movs	r2, #16
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	2201      	movs	r2, #1
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800423a:	230f      	movs	r3, #15
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004242:	e009      	b.n	8004258 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	2210      	movs	r2, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004250:	230f      	movs	r3, #15
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004258:	230f      	movs	r3, #15
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	781b      	ldrb	r3, [r3, #0]
}
 800425e:	0018      	movs	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	b004      	add	sp, #16
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	fffffefd 	.word	0xfffffefd
 800426c:	fffe0219 	.word	0xfffe0219
 8004270:	833fffe7 	.word	0x833fffe7

08004274 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800427e:	230f      	movs	r3, #15
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	055b      	lsls	r3, r3, #21
 8004292:	429a      	cmp	r2, r3
 8004294:	d011      	beq.n	80042ba <HAL_ADC_ConfigChannel+0x46>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d00d      	beq.n	80042ba <HAL_ADC_ConfigChannel+0x46>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d009      	beq.n	80042ba <HAL_ADC_ConfigChannel+0x46>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d005      	beq.n	80042ba <HAL_ADC_ConfigChannel+0x46>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d001      	beq.n	80042ba <HAL_ADC_ConfigChannel+0x46>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2234      	movs	r2, #52	; 0x34
 80042be:	5c9b      	ldrb	r3, [r3, r2]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x54>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e0bb      	b.n	8004440 <HAL_ADC_ConfigChannel+0x1cc>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2234      	movs	r2, #52	; 0x34
 80042cc:	2101      	movs	r1, #1
 80042ce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2204      	movs	r2, #4
 80042d8:	4013      	ands	r3, r2
 80042da:	d000      	beq.n	80042de <HAL_ADC_ConfigChannel+0x6a>
 80042dc:	e09f      	b.n	800441e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4a59      	ldr	r2, [pc, #356]	; (8004448 <HAL_ADC_ConfigChannel+0x1d4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d100      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x76>
 80042e8:	e077      	b.n	80043da <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2201      	movs	r2, #1
 80042f6:	409a      	lsls	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	055b      	lsls	r3, r3, #21
 8004308:	429a      	cmp	r2, r3
 800430a:	d037      	beq.n	800437c <HAL_ADC_ConfigChannel+0x108>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d033      	beq.n	800437c <HAL_ADC_ConfigChannel+0x108>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	2b02      	cmp	r3, #2
 800431a:	d02f      	beq.n	800437c <HAL_ADC_ConfigChannel+0x108>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	2b03      	cmp	r3, #3
 8004322:	d02b      	beq.n	800437c <HAL_ADC_ConfigChannel+0x108>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	2b04      	cmp	r3, #4
 800432a:	d027      	beq.n	800437c <HAL_ADC_ConfigChannel+0x108>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	2b05      	cmp	r3, #5
 8004332:	d023      	beq.n	800437c <HAL_ADC_ConfigChannel+0x108>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	2b06      	cmp	r3, #6
 800433a:	d01f      	beq.n	800437c <HAL_ADC_ConfigChannel+0x108>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	2b07      	cmp	r3, #7
 8004342:	d01b      	beq.n	800437c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	2107      	movs	r1, #7
 8004350:	400b      	ands	r3, r1
 8004352:	429a      	cmp	r2, r3
 8004354:	d012      	beq.n	800437c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695a      	ldr	r2, [r3, #20]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2107      	movs	r1, #7
 8004362:	438a      	bics	r2, r1
 8004364:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6959      	ldr	r1, [r3, #20]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2207      	movs	r2, #7
 8004372:	401a      	ands	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b10      	cmp	r3, #16
 8004382:	d003      	beq.n	800438c <HAL_ADC_ConfigChannel+0x118>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b11      	cmp	r3, #17
 800438a:	d152      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800438c:	4b2f      	ldr	r3, [pc, #188]	; (800444c <HAL_ADC_ConfigChannel+0x1d8>)
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b10      	cmp	r3, #16
 8004396:	d102      	bne.n	800439e <HAL_ADC_ConfigChannel+0x12a>
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	041b      	lsls	r3, r3, #16
 800439c:	e001      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x12e>
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	03db      	lsls	r3, r3, #15
 80043a2:	4a2a      	ldr	r2, [pc, #168]	; (800444c <HAL_ADC_ConfigChannel+0x1d8>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d140      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043b0:	4b27      	ldr	r3, [pc, #156]	; (8004450 <HAL_ADC_ConfigChannel+0x1dc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4927      	ldr	r1, [pc, #156]	; (8004454 <HAL_ADC_ConfigChannel+0x1e0>)
 80043b6:	0018      	movs	r0, r3
 80043b8:	f7fb fea6 	bl	8000108 <__udivsi3>
 80043bc:	0003      	movs	r3, r0
 80043be:	001a      	movs	r2, r3
 80043c0:	0013      	movs	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	189b      	adds	r3, r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043ca:	e002      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f9      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x158>
 80043d8:	e02b      	b.n	8004432 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2101      	movs	r1, #1
 80043e6:	4099      	lsls	r1, r3
 80043e8:	000b      	movs	r3, r1
 80043ea:	43d9      	mvns	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	400a      	ands	r2, r1
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d003      	beq.n	8004404 <HAL_ADC_ConfigChannel+0x190>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b11      	cmp	r3, #17
 8004402:	d116      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004404:	4b11      	ldr	r3, [pc, #68]	; (800444c <HAL_ADC_ConfigChannel+0x1d8>)
 8004406:	6819      	ldr	r1, [r3, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b10      	cmp	r3, #16
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x1a0>
 8004410:	4a11      	ldr	r2, [pc, #68]	; (8004458 <HAL_ADC_ConfigChannel+0x1e4>)
 8004412:	e000      	b.n	8004416 <HAL_ADC_ConfigChannel+0x1a2>
 8004414:	4a11      	ldr	r2, [pc, #68]	; (800445c <HAL_ADC_ConfigChannel+0x1e8>)
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <HAL_ADC_ConfigChannel+0x1d8>)
 8004418:	400a      	ands	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e009      	b.n	8004432 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	2220      	movs	r2, #32
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800442a:	230f      	movs	r3, #15
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	2201      	movs	r2, #1
 8004430:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2234      	movs	r2, #52	; 0x34
 8004436:	2100      	movs	r1, #0
 8004438:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800443a:	230f      	movs	r3, #15
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	781b      	ldrb	r3, [r3, #0]
}
 8004440:	0018      	movs	r0, r3
 8004442:	46bd      	mov	sp, r7
 8004444:	b004      	add	sp, #16
 8004446:	bd80      	pop	{r7, pc}
 8004448:	00001001 	.word	0x00001001
 800444c:	40012708 	.word	0x40012708
 8004450:	20000080 	.word	0x20000080
 8004454:	000f4240 	.word	0x000f4240
 8004458:	ff7fffff 	.word	0xff7fffff
 800445c:	ffbfffff 	.word	0xffbfffff

08004460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	0002      	movs	r2, r0
 8004468:	1dfb      	adds	r3, r7, #7
 800446a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800446c:	1dfb      	adds	r3, r7, #7
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b7f      	cmp	r3, #127	; 0x7f
 8004472:	d809      	bhi.n	8004488 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004474:	1dfb      	adds	r3, r7, #7
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	001a      	movs	r2, r3
 800447a:	231f      	movs	r3, #31
 800447c:	401a      	ands	r2, r3
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <__NVIC_EnableIRQ+0x30>)
 8004480:	2101      	movs	r1, #1
 8004482:	4091      	lsls	r1, r2
 8004484:	000a      	movs	r2, r1
 8004486:	601a      	str	r2, [r3, #0]
  }
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	b002      	add	sp, #8
 800448e:	bd80      	pop	{r7, pc}
 8004490:	e000e100 	.word	0xe000e100

08004494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	0002      	movs	r2, r0
 800449c:	6039      	str	r1, [r7, #0]
 800449e:	1dfb      	adds	r3, r7, #7
 80044a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044a2:	1dfb      	adds	r3, r7, #7
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b7f      	cmp	r3, #127	; 0x7f
 80044a8:	d828      	bhi.n	80044fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044aa:	4a2f      	ldr	r2, [pc, #188]	; (8004568 <__NVIC_SetPriority+0xd4>)
 80044ac:	1dfb      	adds	r3, r7, #7
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	b25b      	sxtb	r3, r3
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	33c0      	adds	r3, #192	; 0xc0
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	589b      	ldr	r3, [r3, r2]
 80044ba:	1dfa      	adds	r2, r7, #7
 80044bc:	7812      	ldrb	r2, [r2, #0]
 80044be:	0011      	movs	r1, r2
 80044c0:	2203      	movs	r2, #3
 80044c2:	400a      	ands	r2, r1
 80044c4:	00d2      	lsls	r2, r2, #3
 80044c6:	21ff      	movs	r1, #255	; 0xff
 80044c8:	4091      	lsls	r1, r2
 80044ca:	000a      	movs	r2, r1
 80044cc:	43d2      	mvns	r2, r2
 80044ce:	401a      	ands	r2, r3
 80044d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	019b      	lsls	r3, r3, #6
 80044d6:	22ff      	movs	r2, #255	; 0xff
 80044d8:	401a      	ands	r2, r3
 80044da:	1dfb      	adds	r3, r7, #7
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	0018      	movs	r0, r3
 80044e0:	2303      	movs	r3, #3
 80044e2:	4003      	ands	r3, r0
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044e8:	481f      	ldr	r0, [pc, #124]	; (8004568 <__NVIC_SetPriority+0xd4>)
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	b25b      	sxtb	r3, r3
 80044f0:	089b      	lsrs	r3, r3, #2
 80044f2:	430a      	orrs	r2, r1
 80044f4:	33c0      	adds	r3, #192	; 0xc0
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80044fa:	e031      	b.n	8004560 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80044fc:	4a1b      	ldr	r2, [pc, #108]	; (800456c <__NVIC_SetPriority+0xd8>)
 80044fe:	1dfb      	adds	r3, r7, #7
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	0019      	movs	r1, r3
 8004504:	230f      	movs	r3, #15
 8004506:	400b      	ands	r3, r1
 8004508:	3b08      	subs	r3, #8
 800450a:	089b      	lsrs	r3, r3, #2
 800450c:	3306      	adds	r3, #6
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	18d3      	adds	r3, r2, r3
 8004512:	3304      	adds	r3, #4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	1dfa      	adds	r2, r7, #7
 8004518:	7812      	ldrb	r2, [r2, #0]
 800451a:	0011      	movs	r1, r2
 800451c:	2203      	movs	r2, #3
 800451e:	400a      	ands	r2, r1
 8004520:	00d2      	lsls	r2, r2, #3
 8004522:	21ff      	movs	r1, #255	; 0xff
 8004524:	4091      	lsls	r1, r2
 8004526:	000a      	movs	r2, r1
 8004528:	43d2      	mvns	r2, r2
 800452a:	401a      	ands	r2, r3
 800452c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	019b      	lsls	r3, r3, #6
 8004532:	22ff      	movs	r2, #255	; 0xff
 8004534:	401a      	ands	r2, r3
 8004536:	1dfb      	adds	r3, r7, #7
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	0018      	movs	r0, r3
 800453c:	2303      	movs	r3, #3
 800453e:	4003      	ands	r3, r0
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004544:	4809      	ldr	r0, [pc, #36]	; (800456c <__NVIC_SetPriority+0xd8>)
 8004546:	1dfb      	adds	r3, r7, #7
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	001c      	movs	r4, r3
 800454c:	230f      	movs	r3, #15
 800454e:	4023      	ands	r3, r4
 8004550:	3b08      	subs	r3, #8
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	430a      	orrs	r2, r1
 8004556:	3306      	adds	r3, #6
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	18c3      	adds	r3, r0, r3
 800455c:	3304      	adds	r3, #4
 800455e:	601a      	str	r2, [r3, #0]
}
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b003      	add	sp, #12
 8004566:	bd90      	pop	{r4, r7, pc}
 8004568:	e000e100 	.word	0xe000e100
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3b01      	subs	r3, #1
 800457c:	4a0c      	ldr	r2, [pc, #48]	; (80045b0 <SysTick_Config+0x40>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004582:	2301      	movs	r3, #1
 8004584:	e010      	b.n	80045a8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <SysTick_Config+0x44>)
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	3a01      	subs	r2, #1
 800458c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800458e:	2301      	movs	r3, #1
 8004590:	425b      	negs	r3, r3
 8004592:	2103      	movs	r1, #3
 8004594:	0018      	movs	r0, r3
 8004596:	f7ff ff7d 	bl	8004494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <SysTick_Config+0x44>)
 800459c:	2200      	movs	r2, #0
 800459e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <SysTick_Config+0x44>)
 80045a2:	2207      	movs	r2, #7
 80045a4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b002      	add	sp, #8
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	00ffffff 	.word	0x00ffffff
 80045b4:	e000e010 	.word	0xe000e010

080045b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	210f      	movs	r1, #15
 80045c4:	187b      	adds	r3, r7, r1
 80045c6:	1c02      	adds	r2, r0, #0
 80045c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	187b      	adds	r3, r7, r1
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	b25b      	sxtb	r3, r3
 80045d2:	0011      	movs	r1, r2
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7ff ff5d 	bl	8004494 <__NVIC_SetPriority>
}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b004      	add	sp, #16
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	0002      	movs	r2, r0
 80045ea:	1dfb      	adds	r3, r7, #7
 80045ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045ee:	1dfb      	adds	r3, r7, #7
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b25b      	sxtb	r3, r3
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7ff ff33 	bl	8004460 <__NVIC_EnableIRQ>
}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b002      	add	sp, #8
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	0018      	movs	r0, r3
 800460e:	f7ff ffaf 	bl	8004570 <SysTick_Config>
 8004612:	0003      	movs	r3, r0
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b002      	add	sp, #8
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004624:	230f      	movs	r3, #15
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2221      	movs	r2, #33	; 0x21
 8004630:	5c9b      	ldrb	r3, [r3, r2]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d007      	beq.n	8004648 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2204      	movs	r2, #4
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800463e:	230f      	movs	r3, #15
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	2201      	movs	r2, #1
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e028      	b.n	800469a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	210e      	movs	r1, #14
 8004654:	438a      	bics	r2, r1
 8004656:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2101      	movs	r1, #1
 8004664:	438a      	bics	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004670:	2101      	movs	r1, #1
 8004672:	4091      	lsls	r1, r2
 8004674:	000a      	movs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2221      	movs	r2, #33	; 0x21
 800467c:	2101      	movs	r1, #1
 800467e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	2100      	movs	r1, #0
 8004686:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468c:	2b00      	cmp	r3, #0
 800468e:	d004      	beq.n	800469a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	0010      	movs	r0, r2
 8004698:	4798      	blx	r3
    } 
  }
  return status;
 800469a:	230f      	movs	r3, #15
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	781b      	ldrb	r3, [r3, #0]
}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b004      	add	sp, #16
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046b6:	e14f      	b.n	8004958 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2101      	movs	r1, #1
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4091      	lsls	r1, r2
 80046c2:	000a      	movs	r2, r1
 80046c4:	4013      	ands	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d100      	bne.n	80046d0 <HAL_GPIO_Init+0x28>
 80046ce:	e140      	b.n	8004952 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d00b      	beq.n	80046f0 <HAL_GPIO_Init+0x48>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d007      	beq.n	80046f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046e4:	2b11      	cmp	r3, #17
 80046e6:	d003      	beq.n	80046f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b12      	cmp	r3, #18
 80046ee:	d130      	bne.n	8004752 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	2203      	movs	r2, #3
 80046fc:	409a      	lsls	r2, r3
 80046fe:	0013      	movs	r3, r2
 8004700:	43da      	mvns	r2, r3
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	409a      	lsls	r2, r3
 8004712:	0013      	movs	r3, r2
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004726:	2201      	movs	r2, #1
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	409a      	lsls	r2, r3
 800472c:	0013      	movs	r3, r2
 800472e:	43da      	mvns	r2, r3
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	2201      	movs	r2, #1
 800473e:	401a      	ands	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	409a      	lsls	r2, r3
 8004744:	0013      	movs	r3, r2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	2203      	movs	r2, #3
 800475e:	409a      	lsls	r2, r3
 8004760:	0013      	movs	r3, r2
 8004762:	43da      	mvns	r2, r3
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4013      	ands	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	409a      	lsls	r2, r3
 8004774:	0013      	movs	r3, r2
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_Init+0xea>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b12      	cmp	r3, #18
 8004790:	d123      	bne.n	80047da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	08da      	lsrs	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3208      	adds	r2, #8
 800479a:	0092      	lsls	r2, r2, #2
 800479c:	58d3      	ldr	r3, [r2, r3]
 800479e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2207      	movs	r2, #7
 80047a4:	4013      	ands	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	220f      	movs	r2, #15
 80047aa:	409a      	lsls	r2, r3
 80047ac:	0013      	movs	r3, r2
 80047ae:	43da      	mvns	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4013      	ands	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2107      	movs	r1, #7
 80047be:	400b      	ands	r3, r1
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	409a      	lsls	r2, r3
 80047c4:	0013      	movs	r3, r2
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	08da      	lsrs	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3208      	adds	r2, #8
 80047d4:	0092      	lsls	r2, r2, #2
 80047d6:	6939      	ldr	r1, [r7, #16]
 80047d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	2203      	movs	r2, #3
 80047e6:	409a      	lsls	r2, r3
 80047e8:	0013      	movs	r3, r2
 80047ea:	43da      	mvns	r2, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4013      	ands	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2203      	movs	r2, #3
 80047f8:	401a      	ands	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	409a      	lsls	r2, r3
 8004800:	0013      	movs	r3, r2
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	055b      	lsls	r3, r3, #21
 8004816:	4013      	ands	r3, r2
 8004818:	d100      	bne.n	800481c <HAL_GPIO_Init+0x174>
 800481a:	e09a      	b.n	8004952 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481c:	4b54      	ldr	r3, [pc, #336]	; (8004970 <HAL_GPIO_Init+0x2c8>)
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	4b53      	ldr	r3, [pc, #332]	; (8004970 <HAL_GPIO_Init+0x2c8>)
 8004822:	2101      	movs	r1, #1
 8004824:	430a      	orrs	r2, r1
 8004826:	619a      	str	r2, [r3, #24]
 8004828:	4b51      	ldr	r3, [pc, #324]	; (8004970 <HAL_GPIO_Init+0x2c8>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	2201      	movs	r2, #1
 800482e:	4013      	ands	r3, r2
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004834:	4a4f      	ldr	r2, [pc, #316]	; (8004974 <HAL_GPIO_Init+0x2cc>)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	089b      	lsrs	r3, r3, #2
 800483a:	3302      	adds	r3, #2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	589b      	ldr	r3, [r3, r2]
 8004840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2203      	movs	r2, #3
 8004846:	4013      	ands	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	220f      	movs	r2, #15
 800484c:	409a      	lsls	r2, r3
 800484e:	0013      	movs	r3, r2
 8004850:	43da      	mvns	r2, r3
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	2390      	movs	r3, #144	; 0x90
 800485c:	05db      	lsls	r3, r3, #23
 800485e:	429a      	cmp	r2, r3
 8004860:	d013      	beq.n	800488a <HAL_GPIO_Init+0x1e2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a44      	ldr	r2, [pc, #272]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00d      	beq.n	8004886 <HAL_GPIO_Init+0x1de>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a43      	ldr	r2, [pc, #268]	; (800497c <HAL_GPIO_Init+0x2d4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <HAL_GPIO_Init+0x1da>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a42      	ldr	r2, [pc, #264]	; (8004980 <HAL_GPIO_Init+0x2d8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d101      	bne.n	800487e <HAL_GPIO_Init+0x1d6>
 800487a:	2303      	movs	r3, #3
 800487c:	e006      	b.n	800488c <HAL_GPIO_Init+0x1e4>
 800487e:	2305      	movs	r3, #5
 8004880:	e004      	b.n	800488c <HAL_GPIO_Init+0x1e4>
 8004882:	2302      	movs	r3, #2
 8004884:	e002      	b.n	800488c <HAL_GPIO_Init+0x1e4>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <HAL_GPIO_Init+0x1e4>
 800488a:	2300      	movs	r3, #0
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	2103      	movs	r1, #3
 8004890:	400a      	ands	r2, r1
 8004892:	0092      	lsls	r2, r2, #2
 8004894:	4093      	lsls	r3, r2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800489c:	4935      	ldr	r1, [pc, #212]	; (8004974 <HAL_GPIO_Init+0x2cc>)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	089b      	lsrs	r3, r3, #2
 80048a2:	3302      	adds	r3, #2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048aa:	4b36      	ldr	r3, [pc, #216]	; (8004984 <HAL_GPIO_Init+0x2dc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	43da      	mvns	r2, r3
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4013      	ands	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	025b      	lsls	r3, r3, #9
 80048c2:	4013      	ands	r3, r2
 80048c4:	d003      	beq.n	80048ce <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80048ce:	4b2d      	ldr	r3, [pc, #180]	; (8004984 <HAL_GPIO_Init+0x2dc>)
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80048d4:	4b2b      	ldr	r3, [pc, #172]	; (8004984 <HAL_GPIO_Init+0x2dc>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	43da      	mvns	r2, r3
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	029b      	lsls	r3, r3, #10
 80048ec:	4013      	ands	r3, r2
 80048ee:	d003      	beq.n	80048f8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80048f8:	4b22      	ldr	r3, [pc, #136]	; (8004984 <HAL_GPIO_Init+0x2dc>)
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048fe:	4b21      	ldr	r3, [pc, #132]	; (8004984 <HAL_GPIO_Init+0x2dc>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	43da      	mvns	r2, r3
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4013      	ands	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	2380      	movs	r3, #128	; 0x80
 8004914:	035b      	lsls	r3, r3, #13
 8004916:	4013      	ands	r3, r2
 8004918:	d003      	beq.n	8004922 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004922:	4b18      	ldr	r3, [pc, #96]	; (8004984 <HAL_GPIO_Init+0x2dc>)
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004928:	4b16      	ldr	r3, [pc, #88]	; (8004984 <HAL_GPIO_Init+0x2dc>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	43da      	mvns	r2, r3
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	039b      	lsls	r3, r3, #14
 8004940:	4013      	ands	r3, r2
 8004942:	d003      	beq.n	800494c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <HAL_GPIO_Init+0x2dc>)
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	3301      	adds	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	40da      	lsrs	r2, r3
 8004960:	1e13      	subs	r3, r2, #0
 8004962:	d000      	beq.n	8004966 <HAL_GPIO_Init+0x2be>
 8004964:	e6a8      	b.n	80046b8 <HAL_GPIO_Init+0x10>
  } 
}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	46bd      	mov	sp, r7
 800496a:	b006      	add	sp, #24
 800496c:	bd80      	pop	{r7, pc}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	40021000 	.word	0x40021000
 8004974:	40010000 	.word	0x40010000
 8004978:	48000400 	.word	0x48000400
 800497c:	48000800 	.word	0x48000800
 8004980:	48000c00 	.word	0x48000c00
 8004984:	40010400 	.word	0x40010400

08004988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	000a      	movs	r2, r1
 8004992:	1cbb      	adds	r3, r7, #2
 8004994:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	1cba      	adds	r2, r7, #2
 800499c:	8812      	ldrh	r2, [r2, #0]
 800499e:	4013      	ands	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80049a2:	230f      	movs	r3, #15
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	e003      	b.n	80049b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ac:	230f      	movs	r3, #15
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80049b4:	230f      	movs	r3, #15
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	781b      	ldrb	r3, [r3, #0]
  }
 80049ba:	0018      	movs	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	b004      	add	sp, #16
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	0008      	movs	r0, r1
 80049cc:	0011      	movs	r1, r2
 80049ce:	1cbb      	adds	r3, r7, #2
 80049d0:	1c02      	adds	r2, r0, #0
 80049d2:	801a      	strh	r2, [r3, #0]
 80049d4:	1c7b      	adds	r3, r7, #1
 80049d6:	1c0a      	adds	r2, r1, #0
 80049d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049da:	1c7b      	adds	r3, r7, #1
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d004      	beq.n	80049ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049e2:	1cbb      	adds	r3, r7, #2
 80049e4:	881a      	ldrh	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049ea:	e003      	b.n	80049f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049ec:	1cbb      	adds	r3, r7, #2
 80049ee:	881a      	ldrh	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b002      	add	sp, #8
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e303      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2201      	movs	r2, #1
 8004a14:	4013      	ands	r3, r2
 8004a16:	d100      	bne.n	8004a1a <HAL_RCC_OscConfig+0x1e>
 8004a18:	e08d      	b.n	8004b36 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a1a:	4bc4      	ldr	r3, [pc, #784]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	220c      	movs	r2, #12
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d00e      	beq.n	8004a44 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a26:	4bc1      	ldr	r3, [pc, #772]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	220c      	movs	r2, #12
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d116      	bne.n	8004a60 <HAL_RCC_OscConfig+0x64>
 8004a32:	4bbe      	ldr	r3, [pc, #760]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	025b      	lsls	r3, r3, #9
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	025b      	lsls	r3, r3, #9
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d10d      	bne.n	8004a60 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	4bb9      	ldr	r3, [pc, #740]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	029b      	lsls	r3, r3, #10
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d100      	bne.n	8004a52 <HAL_RCC_OscConfig+0x56>
 8004a50:	e070      	b.n	8004b34 <HAL_RCC_OscConfig+0x138>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d000      	beq.n	8004a5c <HAL_RCC_OscConfig+0x60>
 8004a5a:	e06b      	b.n	8004b34 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e2da      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d107      	bne.n	8004a78 <HAL_RCC_OscConfig+0x7c>
 8004a68:	4bb0      	ldr	r3, [pc, #704]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4baf      	ldr	r3, [pc, #700]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	0249      	lsls	r1, r1, #9
 8004a72:	430a      	orrs	r2, r1
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	e02f      	b.n	8004ad8 <HAL_RCC_OscConfig+0xdc>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10c      	bne.n	8004a9a <HAL_RCC_OscConfig+0x9e>
 8004a80:	4baa      	ldr	r3, [pc, #680]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4ba9      	ldr	r3, [pc, #676]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004a86:	49aa      	ldr	r1, [pc, #680]	; (8004d30 <HAL_RCC_OscConfig+0x334>)
 8004a88:	400a      	ands	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	4ba7      	ldr	r3, [pc, #668]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4ba6      	ldr	r3, [pc, #664]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004a92:	49a8      	ldr	r1, [pc, #672]	; (8004d34 <HAL_RCC_OscConfig+0x338>)
 8004a94:	400a      	ands	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e01e      	b.n	8004ad8 <HAL_RCC_OscConfig+0xdc>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d10e      	bne.n	8004ac0 <HAL_RCC_OscConfig+0xc4>
 8004aa2:	4ba2      	ldr	r3, [pc, #648]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4ba1      	ldr	r3, [pc, #644]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	02c9      	lsls	r1, r1, #11
 8004aac:	430a      	orrs	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	4b9e      	ldr	r3, [pc, #632]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b9d      	ldr	r3, [pc, #628]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004ab6:	2180      	movs	r1, #128	; 0x80
 8004ab8:	0249      	lsls	r1, r1, #9
 8004aba:	430a      	orrs	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCC_OscConfig+0xdc>
 8004ac0:	4b9a      	ldr	r3, [pc, #616]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4b99      	ldr	r3, [pc, #612]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004ac6:	499a      	ldr	r1, [pc, #616]	; (8004d30 <HAL_RCC_OscConfig+0x334>)
 8004ac8:	400a      	ands	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	4b97      	ldr	r3, [pc, #604]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b96      	ldr	r3, [pc, #600]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004ad2:	4998      	ldr	r1, [pc, #608]	; (8004d34 <HAL_RCC_OscConfig+0x338>)
 8004ad4:	400a      	ands	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d014      	beq.n	8004b0a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7ff fa5c 	bl	8003f9c <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aea:	f7ff fa57 	bl	8003f9c <HAL_GetTick>
 8004aee:	0002      	movs	r2, r0
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b64      	cmp	r3, #100	; 0x64
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e28c      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afc:	4b8b      	ldr	r3, [pc, #556]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	029b      	lsls	r3, r3, #10
 8004b04:	4013      	ands	r3, r2
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCC_OscConfig+0xee>
 8004b08:	e015      	b.n	8004b36 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0a:	f7ff fa47 	bl	8003f9c <HAL_GetTick>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b14:	f7ff fa42 	bl	8003f9c <HAL_GetTick>
 8004b18:	0002      	movs	r2, r0
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b64      	cmp	r3, #100	; 0x64
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e277      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b26:	4b81      	ldr	r3, [pc, #516]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	029b      	lsls	r3, r3, #10
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d1f0      	bne.n	8004b14 <HAL_RCC_OscConfig+0x118>
 8004b32:	e000      	b.n	8004b36 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b34:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d100      	bne.n	8004b42 <HAL_RCC_OscConfig+0x146>
 8004b40:	e069      	b.n	8004c16 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b42:	4b7a      	ldr	r3, [pc, #488]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	220c      	movs	r2, #12
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d00b      	beq.n	8004b64 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b4c:	4b77      	ldr	r3, [pc, #476]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	220c      	movs	r2, #12
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d11c      	bne.n	8004b92 <HAL_RCC_OscConfig+0x196>
 8004b58:	4b74      	ldr	r3, [pc, #464]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	025b      	lsls	r3, r3, #9
 8004b60:	4013      	ands	r3, r2
 8004b62:	d116      	bne.n	8004b92 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b64:	4b71      	ldr	r3, [pc, #452]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d005      	beq.n	8004b7a <HAL_RCC_OscConfig+0x17e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d001      	beq.n	8004b7a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e24d      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7a:	4b6c      	ldr	r3, [pc, #432]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	22f8      	movs	r2, #248	; 0xf8
 8004b80:	4393      	bics	r3, r2
 8004b82:	0019      	movs	r1, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	00da      	lsls	r2, r3, #3
 8004b8a:	4b68      	ldr	r3, [pc, #416]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b90:	e041      	b.n	8004c16 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d024      	beq.n	8004be4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b9a:	4b64      	ldr	r3, [pc, #400]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b63      	ldr	r3, [pc, #396]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba6:	f7ff f9f9 	bl	8003f9c <HAL_GetTick>
 8004baa:	0003      	movs	r3, r0
 8004bac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb0:	f7ff f9f4 	bl	8003f9c <HAL_GetTick>
 8004bb4:	0002      	movs	r2, r0
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e229      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc2:	4b5a      	ldr	r3, [pc, #360]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d0f1      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bcc:	4b57      	ldr	r3, [pc, #348]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	22f8      	movs	r2, #248	; 0xf8
 8004bd2:	4393      	bics	r3, r2
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00da      	lsls	r2, r3, #3
 8004bdc:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004bde:	430a      	orrs	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e018      	b.n	8004c16 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be4:	4b51      	ldr	r3, [pc, #324]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4b50      	ldr	r3, [pc, #320]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004bea:	2101      	movs	r1, #1
 8004bec:	438a      	bics	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7ff f9d4 	bl	8003f9c <HAL_GetTick>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bfa:	f7ff f9cf 	bl	8003f9c <HAL_GetTick>
 8004bfe:	0002      	movs	r2, r0
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e204      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0c:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2202      	movs	r2, #2
 8004c12:	4013      	ands	r3, r2
 8004c14:	d1f1      	bne.n	8004bfa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d036      	beq.n	8004c8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d019      	beq.n	8004c5c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c28:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c2c:	4b3f      	ldr	r3, [pc, #252]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004c2e:	2101      	movs	r1, #1
 8004c30:	430a      	orrs	r2, r1
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c34:	f7ff f9b2 	bl	8003f9c <HAL_GetTick>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c3e:	f7ff f9ad 	bl	8003f9c <HAL_GetTick>
 8004c42:	0002      	movs	r2, r0
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e1e2      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c50:	4b36      	ldr	r3, [pc, #216]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	2202      	movs	r2, #2
 8004c56:	4013      	ands	r3, r2
 8004c58:	d0f1      	beq.n	8004c3e <HAL_RCC_OscConfig+0x242>
 8004c5a:	e018      	b.n	8004c8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c5c:	4b33      	ldr	r3, [pc, #204]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c60:	4b32      	ldr	r3, [pc, #200]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004c62:	2101      	movs	r1, #1
 8004c64:	438a      	bics	r2, r1
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c68:	f7ff f998 	bl	8003f9c <HAL_GetTick>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c72:	f7ff f993 	bl	8003f9c <HAL_GetTick>
 8004c76:	0002      	movs	r2, r0
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e1c8      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	2202      	movs	r2, #2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d1f1      	bne.n	8004c72 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2204      	movs	r2, #4
 8004c94:	4013      	ands	r3, r2
 8004c96:	d100      	bne.n	8004c9a <HAL_RCC_OscConfig+0x29e>
 8004c98:	e0b6      	b.n	8004e08 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	231f      	movs	r3, #31
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca2:	4b22      	ldr	r3, [pc, #136]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	055b      	lsls	r3, r3, #21
 8004caa:	4013      	ands	r3, r2
 8004cac:	d111      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cae:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004cb0:	69da      	ldr	r2, [r3, #28]
 8004cb2:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004cb4:	2180      	movs	r1, #128	; 0x80
 8004cb6:	0549      	lsls	r1, r1, #21
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	61da      	str	r2, [r3, #28]
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	2380      	movs	r3, #128	; 0x80
 8004cc2:	055b      	lsls	r3, r3, #21
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cca:	231f      	movs	r3, #31
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd2:	4b19      	ldr	r3, [pc, #100]	; (8004d38 <HAL_RCC_OscConfig+0x33c>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	2380      	movs	r3, #128	; 0x80
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d11a      	bne.n	8004d14 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cde:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <HAL_RCC_OscConfig+0x33c>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b15      	ldr	r3, [pc, #84]	; (8004d38 <HAL_RCC_OscConfig+0x33c>)
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	0049      	lsls	r1, r1, #1
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cec:	f7ff f956 	bl	8003f9c <HAL_GetTick>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf6:	f7ff f951 	bl	8003f9c <HAL_GetTick>
 8004cfa:	0002      	movs	r2, r0
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b64      	cmp	r3, #100	; 0x64
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e186      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_OscConfig+0x33c>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4013      	ands	r3, r2
 8004d12:	d0f0      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d10f      	bne.n	8004d3c <HAL_RCC_OscConfig+0x340>
 8004d1c:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004d1e:	6a1a      	ldr	r2, [r3, #32]
 8004d20:	4b02      	ldr	r3, [pc, #8]	; (8004d2c <HAL_RCC_OscConfig+0x330>)
 8004d22:	2101      	movs	r1, #1
 8004d24:	430a      	orrs	r2, r1
 8004d26:	621a      	str	r2, [r3, #32]
 8004d28:	e036      	b.n	8004d98 <HAL_RCC_OscConfig+0x39c>
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	fffeffff 	.word	0xfffeffff
 8004d34:	fffbffff 	.word	0xfffbffff
 8004d38:	40007000 	.word	0x40007000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10c      	bne.n	8004d5e <HAL_RCC_OscConfig+0x362>
 8004d44:	4bb6      	ldr	r3, [pc, #728]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	4bb5      	ldr	r3, [pc, #724]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	438a      	bics	r2, r1
 8004d4e:	621a      	str	r2, [r3, #32]
 8004d50:	4bb3      	ldr	r3, [pc, #716]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d52:	6a1a      	ldr	r2, [r3, #32]
 8004d54:	4bb2      	ldr	r3, [pc, #712]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d56:	2104      	movs	r1, #4
 8004d58:	438a      	bics	r2, r1
 8004d5a:	621a      	str	r2, [r3, #32]
 8004d5c:	e01c      	b.n	8004d98 <HAL_RCC_OscConfig+0x39c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	d10c      	bne.n	8004d80 <HAL_RCC_OscConfig+0x384>
 8004d66:	4bae      	ldr	r3, [pc, #696]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d68:	6a1a      	ldr	r2, [r3, #32]
 8004d6a:	4bad      	ldr	r3, [pc, #692]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d6c:	2104      	movs	r1, #4
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	621a      	str	r2, [r3, #32]
 8004d72:	4bab      	ldr	r3, [pc, #684]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d74:	6a1a      	ldr	r2, [r3, #32]
 8004d76:	4baa      	ldr	r3, [pc, #680]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d78:	2101      	movs	r1, #1
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	621a      	str	r2, [r3, #32]
 8004d7e:	e00b      	b.n	8004d98 <HAL_RCC_OscConfig+0x39c>
 8004d80:	4ba7      	ldr	r3, [pc, #668]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d82:	6a1a      	ldr	r2, [r3, #32]
 8004d84:	4ba6      	ldr	r3, [pc, #664]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d86:	2101      	movs	r1, #1
 8004d88:	438a      	bics	r2, r1
 8004d8a:	621a      	str	r2, [r3, #32]
 8004d8c:	4ba4      	ldr	r3, [pc, #656]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d8e:	6a1a      	ldr	r2, [r3, #32]
 8004d90:	4ba3      	ldr	r3, [pc, #652]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004d92:	2104      	movs	r1, #4
 8004d94:	438a      	bics	r2, r1
 8004d96:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d014      	beq.n	8004dca <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da0:	f7ff f8fc 	bl	8003f9c <HAL_GetTick>
 8004da4:	0003      	movs	r3, r0
 8004da6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da8:	e009      	b.n	8004dbe <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004daa:	f7ff f8f7 	bl	8003f9c <HAL_GetTick>
 8004dae:	0002      	movs	r2, r0
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	4a9b      	ldr	r2, [pc, #620]	; (8005024 <HAL_RCC_OscConfig+0x628>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e12b      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbe:	4b98      	ldr	r3, [pc, #608]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x3ae>
 8004dc8:	e013      	b.n	8004df2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dca:	f7ff f8e7 	bl	8003f9c <HAL_GetTick>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd2:	e009      	b.n	8004de8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd4:	f7ff f8e2 	bl	8003f9c <HAL_GetTick>
 8004dd8:	0002      	movs	r2, r0
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	4a91      	ldr	r2, [pc, #580]	; (8005024 <HAL_RCC_OscConfig+0x628>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e116      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de8:	4b8d      	ldr	r3, [pc, #564]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	2202      	movs	r2, #2
 8004dee:	4013      	ands	r3, r2
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004df2:	231f      	movs	r3, #31
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d105      	bne.n	8004e08 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfc:	4b88      	ldr	r3, [pc, #544]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	4b87      	ldr	r3, [pc, #540]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e02:	4989      	ldr	r1, [pc, #548]	; (8005028 <HAL_RCC_OscConfig+0x62c>)
 8004e04:	400a      	ands	r2, r1
 8004e06:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d063      	beq.n	8004eda <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d12a      	bne.n	8004e70 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e1a:	4b81      	ldr	r3, [pc, #516]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e1e:	4b80      	ldr	r3, [pc, #512]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e20:	2104      	movs	r1, #4
 8004e22:	430a      	orrs	r2, r1
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004e26:	4b7e      	ldr	r3, [pc, #504]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e2a:	4b7d      	ldr	r3, [pc, #500]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e32:	f7ff f8b3 	bl	8003f9c <HAL_GetTick>
 8004e36:	0003      	movs	r3, r0
 8004e38:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e3c:	f7ff f8ae 	bl	8003f9c <HAL_GetTick>
 8004e40:	0002      	movs	r2, r0
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e0e3      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e4e:	4b74      	ldr	r3, [pc, #464]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e52:	2202      	movs	r2, #2
 8004e54:	4013      	ands	r3, r2
 8004e56:	d0f1      	beq.n	8004e3c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e58:	4b71      	ldr	r3, [pc, #452]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5c:	22f8      	movs	r2, #248	; 0xf8
 8004e5e:	4393      	bics	r3, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	00da      	lsls	r2, r3, #3
 8004e68:	4b6d      	ldr	r3, [pc, #436]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004e6e:	e034      	b.n	8004eda <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	3305      	adds	r3, #5
 8004e76:	d111      	bne.n	8004e9c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004e78:	4b69      	ldr	r3, [pc, #420]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e7c:	4b68      	ldr	r3, [pc, #416]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e7e:	2104      	movs	r1, #4
 8004e80:	438a      	bics	r2, r1
 8004e82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e84:	4b66      	ldr	r3, [pc, #408]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	22f8      	movs	r2, #248	; 0xf8
 8004e8a:	4393      	bics	r3, r2
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	00da      	lsls	r2, r3, #3
 8004e94:	4b62      	ldr	r3, [pc, #392]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e96:	430a      	orrs	r2, r1
 8004e98:	635a      	str	r2, [r3, #52]	; 0x34
 8004e9a:	e01e      	b.n	8004eda <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e9c:	4b60      	ldr	r3, [pc, #384]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea0:	4b5f      	ldr	r3, [pc, #380]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004ea2:	2104      	movs	r1, #4
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004ea8:	4b5d      	ldr	r3, [pc, #372]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eac:	4b5c      	ldr	r3, [pc, #368]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004eae:	2101      	movs	r1, #1
 8004eb0:	438a      	bics	r2, r1
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb4:	f7ff f872 	bl	8003f9c <HAL_GetTick>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ebe:	f7ff f86d 	bl	8003f9c <HAL_GetTick>
 8004ec2:	0002      	movs	r2, r0
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e0a2      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ed0:	4b53      	ldr	r3, [pc, #332]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d1f1      	bne.n	8004ebe <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d100      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x4e8>
 8004ee2:	e097      	b.n	8005014 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ee4:	4b4e      	ldr	r3, [pc, #312]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	220c      	movs	r2, #12
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d100      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x4f6>
 8004ef0:	e06b      	b.n	8004fca <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d14c      	bne.n	8004f94 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efa:	4b49      	ldr	r3, [pc, #292]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b48      	ldr	r3, [pc, #288]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004f00:	494a      	ldr	r1, [pc, #296]	; (800502c <HAL_RCC_OscConfig+0x630>)
 8004f02:	400a      	ands	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7ff f849 	bl	8003f9c <HAL_GetTick>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f10:	f7ff f844 	bl	8003f9c <HAL_GetTick>
 8004f14:	0002      	movs	r2, r0
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e079      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f22:	4b3f      	ldr	r3, [pc, #252]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	049b      	lsls	r3, r3, #18
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f2e:	4b3c      	ldr	r3, [pc, #240]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	220f      	movs	r2, #15
 8004f34:	4393      	bics	r3, r2
 8004f36:	0019      	movs	r1, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	4b38      	ldr	r3, [pc, #224]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f42:	4b37      	ldr	r3, [pc, #220]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	4a3a      	ldr	r2, [pc, #232]	; (8005030 <HAL_RCC_OscConfig+0x634>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	431a      	orrs	r2, r3
 8004f56:	4b32      	ldr	r3, [pc, #200]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f5c:	4b30      	ldr	r3, [pc, #192]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	4b2f      	ldr	r3, [pc, #188]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004f62:	2180      	movs	r1, #128	; 0x80
 8004f64:	0449      	lsls	r1, r1, #17
 8004f66:	430a      	orrs	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6a:	f7ff f817 	bl	8003f9c <HAL_GetTick>
 8004f6e:	0003      	movs	r3, r0
 8004f70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f74:	f7ff f812 	bl	8003f9c <HAL_GetTick>
 8004f78:	0002      	movs	r2, r0
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e047      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f86:	4b26      	ldr	r3, [pc, #152]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	2380      	movs	r3, #128	; 0x80
 8004f8c:	049b      	lsls	r3, r3, #18
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x578>
 8004f92:	e03f      	b.n	8005014 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f94:	4b22      	ldr	r3, [pc, #136]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	4b21      	ldr	r3, [pc, #132]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004f9a:	4924      	ldr	r1, [pc, #144]	; (800502c <HAL_RCC_OscConfig+0x630>)
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fe fffc 	bl	8003f9c <HAL_GetTick>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004faa:	f7fe fff7 	bl	8003f9c <HAL_GetTick>
 8004fae:	0002      	movs	r2, r0
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e02c      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fbc:	4b18      	ldr	r3, [pc, #96]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	049b      	lsls	r3, r3, #18
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0x5ae>
 8004fc8:	e024      	b.n	8005014 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e01f      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004fd6:	4b12      	ldr	r3, [pc, #72]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <HAL_RCC_OscConfig+0x624>)
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	025b      	lsls	r3, r3, #9
 8004fe8:	401a      	ands	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d10e      	bne.n	8005010 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	220f      	movs	r2, #15
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d107      	bne.n	8005010 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	23f0      	movs	r3, #240	; 0xf0
 8005004:	039b      	lsls	r3, r3, #14
 8005006:	401a      	ands	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800500c:	429a      	cmp	r2, r3
 800500e:	d001      	beq.n	8005014 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	0018      	movs	r0, r3
 8005018:	46bd      	mov	sp, r7
 800501a:	b008      	add	sp, #32
 800501c:	bd80      	pop	{r7, pc}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	40021000 	.word	0x40021000
 8005024:	00001388 	.word	0x00001388
 8005028:	efffffff 	.word	0xefffffff
 800502c:	feffffff 	.word	0xfeffffff
 8005030:	ffc2ffff 	.word	0xffc2ffff

08005034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0b3      	b.n	80051b0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005048:	4b5b      	ldr	r3, [pc, #364]	; (80051b8 <HAL_RCC_ClockConfig+0x184>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2201      	movs	r2, #1
 800504e:	4013      	ands	r3, r2
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d911      	bls.n	800507a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005056:	4b58      	ldr	r3, [pc, #352]	; (80051b8 <HAL_RCC_ClockConfig+0x184>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2201      	movs	r2, #1
 800505c:	4393      	bics	r3, r2
 800505e:	0019      	movs	r1, r3
 8005060:	4b55      	ldr	r3, [pc, #340]	; (80051b8 <HAL_RCC_ClockConfig+0x184>)
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005068:	4b53      	ldr	r3, [pc, #332]	; (80051b8 <HAL_RCC_ClockConfig+0x184>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2201      	movs	r2, #1
 800506e:	4013      	ands	r3, r2
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d001      	beq.n	800507a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e09a      	b.n	80051b0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2202      	movs	r2, #2
 8005080:	4013      	ands	r3, r2
 8005082:	d015      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2204      	movs	r2, #4
 800508a:	4013      	ands	r3, r2
 800508c:	d006      	beq.n	800509c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800508e:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	4b4a      	ldr	r3, [pc, #296]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 8005094:	21e0      	movs	r1, #224	; 0xe0
 8005096:	00c9      	lsls	r1, r1, #3
 8005098:	430a      	orrs	r2, r1
 800509a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800509c:	4b47      	ldr	r3, [pc, #284]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	22f0      	movs	r2, #240	; 0xf0
 80050a2:	4393      	bics	r3, r2
 80050a4:	0019      	movs	r1, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	4b44      	ldr	r3, [pc, #272]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2201      	movs	r2, #1
 80050b6:	4013      	ands	r3, r2
 80050b8:	d040      	beq.n	800513c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d107      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c2:	4b3e      	ldr	r3, [pc, #248]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	2380      	movs	r3, #128	; 0x80
 80050c8:	029b      	lsls	r3, r3, #10
 80050ca:	4013      	ands	r3, r2
 80050cc:	d114      	bne.n	80050f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e06e      	b.n	80051b0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d107      	bne.n	80050ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050da:	4b38      	ldr	r3, [pc, #224]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	2380      	movs	r3, #128	; 0x80
 80050e0:	049b      	lsls	r3, r3, #18
 80050e2:	4013      	ands	r3, r2
 80050e4:	d108      	bne.n	80050f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e062      	b.n	80051b0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ea:	4b34      	ldr	r3, [pc, #208]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2202      	movs	r2, #2
 80050f0:	4013      	ands	r3, r2
 80050f2:	d101      	bne.n	80050f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e05b      	b.n	80051b0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050f8:	4b30      	ldr	r3, [pc, #192]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2203      	movs	r2, #3
 80050fe:	4393      	bics	r3, r2
 8005100:	0019      	movs	r1, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 8005108:	430a      	orrs	r2, r1
 800510a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800510c:	f7fe ff46 	bl	8003f9c <HAL_GetTick>
 8005110:	0003      	movs	r3, r0
 8005112:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005114:	e009      	b.n	800512a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005116:	f7fe ff41 	bl	8003f9c <HAL_GetTick>
 800511a:	0002      	movs	r2, r0
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	4a27      	ldr	r2, [pc, #156]	; (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d901      	bls.n	800512a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e042      	b.n	80051b0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	220c      	movs	r2, #12
 8005130:	401a      	ands	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	429a      	cmp	r2, r3
 800513a:	d1ec      	bne.n	8005116 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800513c:	4b1e      	ldr	r3, [pc, #120]	; (80051b8 <HAL_RCC_ClockConfig+0x184>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2201      	movs	r2, #1
 8005142:	4013      	ands	r3, r2
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d211      	bcs.n	800516e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514a:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <HAL_RCC_ClockConfig+0x184>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2201      	movs	r2, #1
 8005150:	4393      	bics	r3, r2
 8005152:	0019      	movs	r1, r3
 8005154:	4b18      	ldr	r3, [pc, #96]	; (80051b8 <HAL_RCC_ClockConfig+0x184>)
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800515c:	4b16      	ldr	r3, [pc, #88]	; (80051b8 <HAL_RCC_ClockConfig+0x184>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2201      	movs	r2, #1
 8005162:	4013      	ands	r3, r2
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d001      	beq.n	800516e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e020      	b.n	80051b0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2204      	movs	r2, #4
 8005174:	4013      	ands	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005178:	4b10      	ldr	r3, [pc, #64]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4a11      	ldr	r2, [pc, #68]	; (80051c4 <HAL_RCC_ClockConfig+0x190>)
 800517e:	4013      	ands	r3, r2
 8005180:	0019      	movs	r1, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	4b0d      	ldr	r3, [pc, #52]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800518c:	f000 f820 	bl	80051d0 <HAL_RCC_GetSysClockFreq>
 8005190:	0001      	movs	r1, r0
 8005192:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <HAL_RCC_ClockConfig+0x188>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	220f      	movs	r2, #15
 800519a:	4013      	ands	r3, r2
 800519c:	4a0a      	ldr	r2, [pc, #40]	; (80051c8 <HAL_RCC_ClockConfig+0x194>)
 800519e:	5cd3      	ldrb	r3, [r2, r3]
 80051a0:	000a      	movs	r2, r1
 80051a2:	40da      	lsrs	r2, r3
 80051a4:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_RCC_ClockConfig+0x198>)
 80051a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80051a8:	2000      	movs	r0, #0
 80051aa:	f7fe feb1 	bl	8003f10 <HAL_InitTick>
  
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b004      	add	sp, #16
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40022000 	.word	0x40022000
 80051bc:	40021000 	.word	0x40021000
 80051c0:	00001388 	.word	0x00001388
 80051c4:	fffff8ff 	.word	0xfffff8ff
 80051c8:	08006ec8 	.word	0x08006ec8
 80051cc:	20000080 	.word	0x20000080

080051d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b08f      	sub	sp, #60	; 0x3c
 80051d4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80051d6:	2314      	movs	r3, #20
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	4a2b      	ldr	r2, [pc, #172]	; (8005288 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051de:	c313      	stmia	r3!, {r0, r1, r4}
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	4a29      	ldr	r2, [pc, #164]	; (800528c <HAL_RCC_GetSysClockFreq+0xbc>)
 80051e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051ea:	c313      	stmia	r3!, {r0, r1, r4}
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f4:	2300      	movs	r3, #0
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f8:	2300      	movs	r3, #0
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005204:	4b22      	ldr	r3, [pc, #136]	; (8005290 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	220c      	movs	r2, #12
 800520e:	4013      	ands	r3, r2
 8005210:	2b04      	cmp	r3, #4
 8005212:	d002      	beq.n	800521a <HAL_RCC_GetSysClockFreq+0x4a>
 8005214:	2b08      	cmp	r3, #8
 8005216:	d003      	beq.n	8005220 <HAL_RCC_GetSysClockFreq+0x50>
 8005218:	e02d      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800521a:	4b1e      	ldr	r3, [pc, #120]	; (8005294 <HAL_RCC_GetSysClockFreq+0xc4>)
 800521c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800521e:	e02d      	b.n	800527c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	0c9b      	lsrs	r3, r3, #18
 8005224:	220f      	movs	r2, #15
 8005226:	4013      	ands	r3, r2
 8005228:	2214      	movs	r2, #20
 800522a:	18ba      	adds	r2, r7, r2
 800522c:	5cd3      	ldrb	r3, [r2, r3]
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005230:	4b17      	ldr	r3, [pc, #92]	; (8005290 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	220f      	movs	r2, #15
 8005236:	4013      	ands	r3, r2
 8005238:	1d3a      	adds	r2, r7, #4
 800523a:	5cd3      	ldrb	r3, [r2, r3]
 800523c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800523e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	025b      	lsls	r3, r3, #9
 8005244:	4013      	ands	r3, r2
 8005246:	d009      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800524a:	4812      	ldr	r0, [pc, #72]	; (8005294 <HAL_RCC_GetSysClockFreq+0xc4>)
 800524c:	f7fa ff5c 	bl	8000108 <__udivsi3>
 8005250:	0003      	movs	r3, r0
 8005252:	001a      	movs	r2, r3
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	4353      	muls	r3, r2
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
 800525a:	e009      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800525c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800525e:	000a      	movs	r2, r1
 8005260:	0152      	lsls	r2, r2, #5
 8005262:	1a52      	subs	r2, r2, r1
 8005264:	0193      	lsls	r3, r2, #6
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	185b      	adds	r3, r3, r1
 800526c:	021b      	lsls	r3, r3, #8
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005272:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005274:	e002      	b.n	800527c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005278:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800527a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800527e:	0018      	movs	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	b00f      	add	sp, #60	; 0x3c
 8005284:	bd90      	pop	{r4, r7, pc}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	08006dd4 	.word	0x08006dd4
 800528c:	08006de4 	.word	0x08006de4
 8005290:	40021000 	.word	0x40021000
 8005294:	007a1200 	.word	0x007a1200

08005298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800529c:	4b02      	ldr	r3, [pc, #8]	; (80052a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800529e:	681b      	ldr	r3, [r3, #0]
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	20000080 	.word	0x20000080

080052ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80052b0:	f7ff fff2 	bl	8005298 <HAL_RCC_GetHCLKFreq>
 80052b4:	0001      	movs	r1, r0
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	2207      	movs	r2, #7
 80052be:	4013      	ands	r3, r2
 80052c0:	4a04      	ldr	r2, [pc, #16]	; (80052d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052c2:	5cd3      	ldrb	r3, [r2, r3]
 80052c4:	40d9      	lsrs	r1, r3
 80052c6:	000b      	movs	r3, r1
}    
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	40021000 	.word	0x40021000
 80052d4:	08006ed8 	.word	0x08006ed8

080052d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e01e      	b.n	8005328 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	223d      	movs	r2, #61	; 0x3d
 80052ee:	5c9b      	ldrb	r3, [r3, r2]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d107      	bne.n	8005306 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	223c      	movs	r2, #60	; 0x3c
 80052fa:	2100      	movs	r1, #0
 80052fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	0018      	movs	r0, r3
 8005302:	f7fe fc9b 	bl	8003c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	223d      	movs	r2, #61	; 0x3d
 800530a:	2102      	movs	r1, #2
 800530c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3304      	adds	r3, #4
 8005316:	0019      	movs	r1, r3
 8005318:	0010      	movs	r0, r2
 800531a:	f000 fac3 	bl	80058a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	223d      	movs	r2, #61	; 0x3d
 8005322:	2101      	movs	r1, #1
 8005324:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	0018      	movs	r0, r3
 800532a:	46bd      	mov	sp, r7
 800532c:	b002      	add	sp, #8
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	223d      	movs	r2, #61	; 0x3d
 800533c:	2102      	movs	r1, #2
 800533e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	2207      	movs	r2, #7
 8005348:	4013      	ands	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b06      	cmp	r3, #6
 8005350:	d007      	beq.n	8005362 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2101      	movs	r1, #1
 800535e:	430a      	orrs	r2, r1
 8005360:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	223d      	movs	r2, #61	; 0x3d
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	b004      	add	sp, #16
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2101      	movs	r1, #1
 8005388:	430a      	orrs	r2, r1
 800538a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2207      	movs	r2, #7
 8005394:	4013      	ands	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b06      	cmp	r3, #6
 800539c:	d007      	beq.n	80053ae <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2101      	movs	r1, #1
 80053aa:	430a      	orrs	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b004      	add	sp, #16
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e01e      	b.n	8005408 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	223d      	movs	r2, #61	; 0x3d
 80053ce:	5c9b      	ldrb	r3, [r3, r2]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d107      	bne.n	80053e6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	223c      	movs	r2, #60	; 0x3c
 80053da:	2100      	movs	r1, #0
 80053dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 f815 	bl	8005410 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	223d      	movs	r2, #61	; 0x3d
 80053ea:	2102      	movs	r1, #2
 80053ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3304      	adds	r3, #4
 80053f6:	0019      	movs	r1, r3
 80053f8:	0010      	movs	r0, r2
 80053fa:	f000 fa53 	bl	80058a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	223d      	movs	r2, #61	; 0x3d
 8005402:	2101      	movs	r1, #1
 8005404:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	0018      	movs	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	b002      	add	sp, #8
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005418:	46c0      	nop			; (mov r8, r8)
 800541a:	46bd      	mov	sp, r7
 800541c:	b002      	add	sp, #8
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2202      	movs	r2, #2
 8005430:	4013      	ands	r3, r2
 8005432:	2b02      	cmp	r3, #2
 8005434:	d124      	bne.n	8005480 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2202      	movs	r2, #2
 800543e:	4013      	ands	r3, r2
 8005440:	2b02      	cmp	r3, #2
 8005442:	d11d      	bne.n	8005480 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2203      	movs	r2, #3
 800544a:	4252      	negs	r2, r2
 800544c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	2203      	movs	r2, #3
 800545c:	4013      	ands	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0018      	movs	r0, r3
 8005464:	f000 fa06 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 8005468:	e007      	b.n	800547a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0018      	movs	r0, r3
 800546e:	f000 f9f9 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	0018      	movs	r0, r3
 8005476:	f000 fa05 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2204      	movs	r2, #4
 8005488:	4013      	ands	r3, r2
 800548a:	2b04      	cmp	r3, #4
 800548c:	d125      	bne.n	80054da <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	2204      	movs	r2, #4
 8005496:	4013      	ands	r3, r2
 8005498:	2b04      	cmp	r3, #4
 800549a:	d11e      	bne.n	80054da <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2205      	movs	r2, #5
 80054a2:	4252      	negs	r2, r2
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	23c0      	movs	r3, #192	; 0xc0
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4013      	ands	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	0018      	movs	r0, r3
 80054be:	f000 f9d9 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 80054c2:	e007      	b.n	80054d4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	0018      	movs	r0, r3
 80054c8:	f000 f9cc 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	0018      	movs	r0, r3
 80054d0:	f000 f9d8 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	2208      	movs	r2, #8
 80054e2:	4013      	ands	r3, r2
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d124      	bne.n	8005532 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2208      	movs	r2, #8
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d11d      	bne.n	8005532 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2209      	movs	r2, #9
 80054fc:	4252      	negs	r2, r2
 80054fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2204      	movs	r2, #4
 8005504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	2203      	movs	r2, #3
 800550e:	4013      	ands	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	0018      	movs	r0, r3
 8005516:	f000 f9ad 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 800551a:	e007      	b.n	800552c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	0018      	movs	r0, r3
 8005520:	f000 f9a0 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	0018      	movs	r0, r3
 8005528:	f000 f9ac 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	2210      	movs	r2, #16
 800553a:	4013      	ands	r3, r2
 800553c:	2b10      	cmp	r3, #16
 800553e:	d125      	bne.n	800558c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	2210      	movs	r2, #16
 8005548:	4013      	ands	r3, r2
 800554a:	2b10      	cmp	r3, #16
 800554c:	d11e      	bne.n	800558c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2211      	movs	r2, #17
 8005554:	4252      	negs	r2, r2
 8005556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2208      	movs	r2, #8
 800555c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	23c0      	movs	r3, #192	; 0xc0
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4013      	ands	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	0018      	movs	r0, r3
 8005570:	f000 f980 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 8005574:	e007      	b.n	8005586 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	0018      	movs	r0, r3
 800557a:	f000 f973 	bl	8005864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	0018      	movs	r0, r3
 8005582:	f000 f97f 	bl	8005884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2201      	movs	r2, #1
 8005594:	4013      	ands	r3, r2
 8005596:	2b01      	cmp	r3, #1
 8005598:	d10f      	bne.n	80055ba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d108      	bne.n	80055ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2202      	movs	r2, #2
 80055ae:	4252      	negs	r2, r2
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	0018      	movs	r0, r3
 80055b6:	f7fc fe95 	bl	80022e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2280      	movs	r2, #128	; 0x80
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b80      	cmp	r3, #128	; 0x80
 80055c6:	d10f      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	4013      	ands	r3, r2
 80055d2:	2b80      	cmp	r3, #128	; 0x80
 80055d4:	d108      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2281      	movs	r2, #129	; 0x81
 80055dc:	4252      	negs	r2, r2
 80055de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	0018      	movs	r0, r3
 80055e4:	f000 fcca 	bl	8005f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2240      	movs	r2, #64	; 0x40
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d10f      	bne.n	8005616 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2240      	movs	r2, #64	; 0x40
 80055fe:	4013      	ands	r3, r2
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d108      	bne.n	8005616 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2241      	movs	r2, #65	; 0x41
 800560a:	4252      	negs	r2, r2
 800560c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	0018      	movs	r0, r3
 8005612:	f000 f93f 	bl	8005894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	2220      	movs	r2, #32
 800561e:	4013      	ands	r3, r2
 8005620:	2b20      	cmp	r3, #32
 8005622:	d10f      	bne.n	8005644 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	4013      	ands	r3, r2
 800562e:	2b20      	cmp	r3, #32
 8005630:	d108      	bne.n	8005644 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2221      	movs	r2, #33	; 0x21
 8005638:	4252      	negs	r2, r2
 800563a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	0018      	movs	r0, r3
 8005640:	f000 fc94 	bl	8005f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005644:	46c0      	nop			; (mov r8, r8)
 8005646:	46bd      	mov	sp, r7
 8005648:	b002      	add	sp, #8
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	223c      	movs	r2, #60	; 0x3c
 800565c:	5c9b      	ldrb	r3, [r3, r2]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005662:	2302      	movs	r3, #2
 8005664:	e03c      	b.n	80056e0 <HAL_TIM_OC_ConfigChannel+0x94>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	223c      	movs	r2, #60	; 0x3c
 800566a:	2101      	movs	r1, #1
 800566c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	223d      	movs	r2, #61	; 0x3d
 8005672:	2102      	movs	r1, #2
 8005674:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b04      	cmp	r3, #4
 800567a:	d010      	beq.n	800569e <HAL_TIM_OC_ConfigChannel+0x52>
 800567c:	d802      	bhi.n	8005684 <HAL_TIM_OC_ConfigChannel+0x38>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8005682:	e024      	b.n	80056ce <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8005684:	2b08      	cmp	r3, #8
 8005686:	d012      	beq.n	80056ae <HAL_TIM_OC_ConfigChannel+0x62>
 8005688:	2b0c      	cmp	r3, #12
 800568a:	d018      	beq.n	80056be <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 800568c:	e01f      	b.n	80056ce <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	0011      	movs	r1, r2
 8005696:	0018      	movs	r0, r3
 8005698:	f000 f97a 	bl	8005990 <TIM_OC1_SetConfig>
      break;
 800569c:	e017      	b.n	80056ce <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	0011      	movs	r1, r2
 80056a6:	0018      	movs	r0, r3
 80056a8:	f000 f9fa 	bl	8005aa0 <TIM_OC2_SetConfig>
      break;
 80056ac:	e00f      	b.n	80056ce <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	0011      	movs	r1, r2
 80056b6:	0018      	movs	r0, r3
 80056b8:	f000 fa76 	bl	8005ba8 <TIM_OC3_SetConfig>
      break;
 80056bc:	e007      	b.n	80056ce <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0011      	movs	r1, r2
 80056c6:	0018      	movs	r0, r3
 80056c8:	f000 faf4 	bl	8005cb4 <TIM_OC4_SetConfig>
      break;
 80056cc:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	223d      	movs	r2, #61	; 0x3d
 80056d2:	2101      	movs	r1, #1
 80056d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	223c      	movs	r2, #60	; 0x3c
 80056da:	2100      	movs	r1, #0
 80056dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b004      	add	sp, #16
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	223c      	movs	r2, #60	; 0x3c
 80056f6:	5c9b      	ldrb	r3, [r3, r2]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_TIM_ConfigClockSource+0x18>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e0ab      	b.n	8005858 <HAL_TIM_ConfigClockSource+0x170>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	223c      	movs	r2, #60	; 0x3c
 8005704:	2101      	movs	r1, #1
 8005706:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	223d      	movs	r2, #61	; 0x3d
 800570c:	2102      	movs	r1, #2
 800570e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2277      	movs	r2, #119	; 0x77
 800571c:	4393      	bics	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4a4f      	ldr	r2, [pc, #316]	; (8005860 <HAL_TIM_ConfigClockSource+0x178>)
 8005724:	4013      	ands	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d100      	bne.n	800573a <HAL_TIM_ConfigClockSource+0x52>
 8005738:	e06b      	b.n	8005812 <HAL_TIM_ConfigClockSource+0x12a>
 800573a:	d80e      	bhi.n	800575a <HAL_TIM_ConfigClockSource+0x72>
 800573c:	2b10      	cmp	r3, #16
 800573e:	d100      	bne.n	8005742 <HAL_TIM_ConfigClockSource+0x5a>
 8005740:	e077      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x14a>
 8005742:	d803      	bhi.n	800574c <HAL_TIM_ConfigClockSource+0x64>
 8005744:	2b00      	cmp	r3, #0
 8005746:	d100      	bne.n	800574a <HAL_TIM_ConfigClockSource+0x62>
 8005748:	e073      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800574a:	e07c      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800574c:	2b20      	cmp	r3, #32
 800574e:	d100      	bne.n	8005752 <HAL_TIM_ConfigClockSource+0x6a>
 8005750:	e06f      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x14a>
 8005752:	2b30      	cmp	r3, #48	; 0x30
 8005754:	d100      	bne.n	8005758 <HAL_TIM_ConfigClockSource+0x70>
 8005756:	e06c      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8005758:	e075      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800575a:	2b70      	cmp	r3, #112	; 0x70
 800575c:	d00e      	beq.n	800577c <HAL_TIM_ConfigClockSource+0x94>
 800575e:	d804      	bhi.n	800576a <HAL_TIM_ConfigClockSource+0x82>
 8005760:	2b50      	cmp	r3, #80	; 0x50
 8005762:	d036      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0xea>
 8005764:	2b60      	cmp	r3, #96	; 0x60
 8005766:	d044      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8005768:	e06d      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800576a:	2280      	movs	r2, #128	; 0x80
 800576c:	0152      	lsls	r2, r2, #5
 800576e:	4293      	cmp	r3, r2
 8005770:	d068      	beq.n	8005844 <HAL_TIM_ConfigClockSource+0x15c>
 8005772:	2280      	movs	r2, #128	; 0x80
 8005774:	0192      	lsls	r2, r2, #6
 8005776:	4293      	cmp	r3, r2
 8005778:	d017      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800577a:	e064      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	6899      	ldr	r1, [r3, #8]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f000 fb76 	bl	8005e7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2277      	movs	r2, #119	; 0x77
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	609a      	str	r2, [r3, #8]
      break;
 80057a8:	e04d      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6899      	ldr	r1, [r3, #8]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f000 fb5f 	bl	8005e7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2180      	movs	r1, #128	; 0x80
 80057ca:	01c9      	lsls	r1, r1, #7
 80057cc:	430a      	orrs	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]
      break;
 80057d0:	e039      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6859      	ldr	r1, [r3, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	001a      	movs	r2, r3
 80057e0:	f000 fad2 	bl	8005d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2150      	movs	r1, #80	; 0x50
 80057ea:	0018      	movs	r0, r3
 80057ec:	f000 fb2c 	bl	8005e48 <TIM_ITRx_SetConfig>
      break;
 80057f0:	e029      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6859      	ldr	r1, [r3, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	001a      	movs	r2, r3
 8005800:	f000 faf0 	bl	8005de4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2160      	movs	r1, #96	; 0x60
 800580a:	0018      	movs	r0, r3
 800580c:	f000 fb1c 	bl	8005e48 <TIM_ITRx_SetConfig>
      break;
 8005810:	e019      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6859      	ldr	r1, [r3, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	001a      	movs	r2, r3
 8005820:	f000 fab2 	bl	8005d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2140      	movs	r1, #64	; 0x40
 800582a:	0018      	movs	r0, r3
 800582c:	f000 fb0c 	bl	8005e48 <TIM_ITRx_SetConfig>
      break;
 8005830:	e009      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	0019      	movs	r1, r3
 800583c:	0010      	movs	r0, r2
 800583e:	f000 fb03 	bl	8005e48 <TIM_ITRx_SetConfig>
      break;
 8005842:	e000      	b.n	8005846 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8005844:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	223d      	movs	r2, #61	; 0x3d
 800584a:	2101      	movs	r1, #1
 800584c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	223c      	movs	r2, #60	; 0x3c
 8005852:	2100      	movs	r1, #0
 8005854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	0018      	movs	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	b004      	add	sp, #16
 800585e:	bd80      	pop	{r7, pc}
 8005860:	ffff00ff 	.word	0xffff00ff

08005864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	b002      	add	sp, #8
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	b002      	add	sp, #8
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800588c:	46c0      	nop			; (mov r8, r8)
 800588e:	46bd      	mov	sp, r7
 8005890:	b002      	add	sp, #8
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800589c:	46c0      	nop			; (mov r8, r8)
 800589e:	46bd      	mov	sp, r7
 80058a0:	b002      	add	sp, #8
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a2f      	ldr	r2, [pc, #188]	; (8005974 <TIM_Base_SetConfig+0xd0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d003      	beq.n	80058c4 <TIM_Base_SetConfig+0x20>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a2e      	ldr	r2, [pc, #184]	; (8005978 <TIM_Base_SetConfig+0xd4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d108      	bne.n	80058d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2270      	movs	r2, #112	; 0x70
 80058c8:	4393      	bics	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a26      	ldr	r2, [pc, #152]	; (8005974 <TIM_Base_SetConfig+0xd0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <TIM_Base_SetConfig+0x62>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a25      	ldr	r2, [pc, #148]	; (8005978 <TIM_Base_SetConfig+0xd4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00f      	beq.n	8005906 <TIM_Base_SetConfig+0x62>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a24      	ldr	r2, [pc, #144]	; (800597c <TIM_Base_SetConfig+0xd8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_Base_SetConfig+0x62>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a23      	ldr	r2, [pc, #140]	; (8005980 <TIM_Base_SetConfig+0xdc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_Base_SetConfig+0x62>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a22      	ldr	r2, [pc, #136]	; (8005984 <TIM_Base_SetConfig+0xe0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_Base_SetConfig+0x62>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a21      	ldr	r2, [pc, #132]	; (8005988 <TIM_Base_SetConfig+0xe4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a20      	ldr	r2, [pc, #128]	; (800598c <TIM_Base_SetConfig+0xe8>)
 800590a:	4013      	ands	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2280      	movs	r2, #128	; 0x80
 800591c:	4393      	bics	r3, r2
 800591e:	001a      	movs	r2, r3
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a0c      	ldr	r2, [pc, #48]	; (8005974 <TIM_Base_SetConfig+0xd0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00b      	beq.n	800595e <TIM_Base_SetConfig+0xba>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a0d      	ldr	r2, [pc, #52]	; (8005980 <TIM_Base_SetConfig+0xdc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d007      	beq.n	800595e <TIM_Base_SetConfig+0xba>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a0c      	ldr	r2, [pc, #48]	; (8005984 <TIM_Base_SetConfig+0xe0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d003      	beq.n	800595e <TIM_Base_SetConfig+0xba>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a0b      	ldr	r2, [pc, #44]	; (8005988 <TIM_Base_SetConfig+0xe4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d103      	bne.n	8005966 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	615a      	str	r2, [r3, #20]
}
 800596c:	46c0      	nop			; (mov r8, r8)
 800596e:	46bd      	mov	sp, r7
 8005970:	b004      	add	sp, #16
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40000400 	.word	0x40000400
 800597c:	40002000 	.word	0x40002000
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800
 800598c:	fffffcff 	.word	0xfffffcff

08005990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	2201      	movs	r2, #1
 80059a0:	4393      	bics	r3, r2
 80059a2:	001a      	movs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2270      	movs	r2, #112	; 0x70
 80059be:	4393      	bics	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2203      	movs	r2, #3
 80059c6:	4393      	bics	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2202      	movs	r2, #2
 80059d8:	4393      	bics	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a27      	ldr	r2, [pc, #156]	; (8005a88 <TIM_OC1_SetConfig+0xf8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00b      	beq.n	8005a06 <TIM_OC1_SetConfig+0x76>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a26      	ldr	r2, [pc, #152]	; (8005a8c <TIM_OC1_SetConfig+0xfc>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d007      	beq.n	8005a06 <TIM_OC1_SetConfig+0x76>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a25      	ldr	r2, [pc, #148]	; (8005a90 <TIM_OC1_SetConfig+0x100>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d003      	beq.n	8005a06 <TIM_OC1_SetConfig+0x76>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <TIM_OC1_SetConfig+0x104>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d10c      	bne.n	8005a20 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	4393      	bics	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	4393      	bics	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a19      	ldr	r2, [pc, #100]	; (8005a88 <TIM_OC1_SetConfig+0xf8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00b      	beq.n	8005a40 <TIM_OC1_SetConfig+0xb0>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <TIM_OC1_SetConfig+0xfc>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d007      	beq.n	8005a40 <TIM_OC1_SetConfig+0xb0>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <TIM_OC1_SetConfig+0x100>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_OC1_SetConfig+0xb0>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <TIM_OC1_SetConfig+0x104>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d111      	bne.n	8005a64 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <TIM_OC1_SetConfig+0x108>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4a14      	ldr	r2, [pc, #80]	; (8005a9c <TIM_OC1_SetConfig+0x10c>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b006      	add	sp, #24
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40014400 	.word	0x40014400
 8005a94:	40014800 	.word	0x40014800
 8005a98:	fffffeff 	.word	0xfffffeff
 8005a9c:	fffffdff 	.word	0xfffffdff

08005aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	2210      	movs	r2, #16
 8005ab0:	4393      	bics	r3, r2
 8005ab2:	001a      	movs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4a2e      	ldr	r2, [pc, #184]	; (8005b88 <TIM_OC2_SetConfig+0xe8>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4a2d      	ldr	r2, [pc, #180]	; (8005b8c <TIM_OC2_SetConfig+0xec>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	4393      	bics	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a24      	ldr	r2, [pc, #144]	; (8005b90 <TIM_OC2_SetConfig+0xf0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d10d      	bne.n	8005b1e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2280      	movs	r2, #128	; 0x80
 8005b06:	4393      	bics	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2240      	movs	r2, #64	; 0x40
 8005b1a:	4393      	bics	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <TIM_OC2_SetConfig+0xf0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00b      	beq.n	8005b3e <TIM_OC2_SetConfig+0x9e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1a      	ldr	r2, [pc, #104]	; (8005b94 <TIM_OC2_SetConfig+0xf4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d007      	beq.n	8005b3e <TIM_OC2_SetConfig+0x9e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a19      	ldr	r2, [pc, #100]	; (8005b98 <TIM_OC2_SetConfig+0xf8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_OC2_SetConfig+0x9e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a18      	ldr	r2, [pc, #96]	; (8005b9c <TIM_OC2_SetConfig+0xfc>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d113      	bne.n	8005b66 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	4a17      	ldr	r2, [pc, #92]	; (8005ba0 <TIM_OC2_SetConfig+0x100>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	4a16      	ldr	r2, [pc, #88]	; (8005ba4 <TIM_OC2_SetConfig+0x104>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	46c0      	nop			; (mov r8, r8)
 8005b82:	46bd      	mov	sp, r7
 8005b84:	b006      	add	sp, #24
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	ffff8fff 	.word	0xffff8fff
 8005b8c:	fffffcff 	.word	0xfffffcff
 8005b90:	40012c00 	.word	0x40012c00
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800
 8005ba0:	fffffbff 	.word	0xfffffbff
 8005ba4:	fffff7ff 	.word	0xfffff7ff

08005ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	4a35      	ldr	r2, [pc, #212]	; (8005c8c <TIM_OC3_SetConfig+0xe4>)
 8005bb8:	401a      	ands	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2270      	movs	r2, #112	; 0x70
 8005bd4:	4393      	bics	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2203      	movs	r2, #3
 8005bdc:	4393      	bics	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	4a28      	ldr	r2, [pc, #160]	; (8005c90 <TIM_OC3_SetConfig+0xe8>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a24      	ldr	r2, [pc, #144]	; (8005c94 <TIM_OC3_SetConfig+0xec>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d10d      	bne.n	8005c22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4a23      	ldr	r2, [pc, #140]	; (8005c98 <TIM_OC3_SetConfig+0xf0>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	4a1f      	ldr	r2, [pc, #124]	; (8005c9c <TIM_OC3_SetConfig+0xf4>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a1b      	ldr	r2, [pc, #108]	; (8005c94 <TIM_OC3_SetConfig+0xec>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00b      	beq.n	8005c42 <TIM_OC3_SetConfig+0x9a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ca0 <TIM_OC3_SetConfig+0xf8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <TIM_OC3_SetConfig+0x9a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <TIM_OC3_SetConfig+0xfc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_OC3_SetConfig+0x9a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ca8 <TIM_OC3_SetConfig+0x100>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d113      	bne.n	8005c6a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4a19      	ldr	r2, [pc, #100]	; (8005cac <TIM_OC3_SetConfig+0x104>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <TIM_OC3_SetConfig+0x108>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	621a      	str	r2, [r3, #32]
}
 8005c84:	46c0      	nop			; (mov r8, r8)
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b006      	add	sp, #24
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	fffffeff 	.word	0xfffffeff
 8005c90:	fffffdff 	.word	0xfffffdff
 8005c94:	40012c00 	.word	0x40012c00
 8005c98:	fffff7ff 	.word	0xfffff7ff
 8005c9c:	fffffbff 	.word	0xfffffbff
 8005ca0:	40014000 	.word	0x40014000
 8005ca4:	40014400 	.word	0x40014400
 8005ca8:	40014800 	.word	0x40014800
 8005cac:	ffffefff 	.word	0xffffefff
 8005cb0:	ffffdfff 	.word	0xffffdfff

08005cb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	4a28      	ldr	r2, [pc, #160]	; (8005d64 <TIM_OC4_SetConfig+0xb0>)
 8005cc4:	401a      	ands	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4a22      	ldr	r2, [pc, #136]	; (8005d68 <TIM_OC4_SetConfig+0xb4>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4a21      	ldr	r2, [pc, #132]	; (8005d6c <TIM_OC4_SetConfig+0xb8>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <TIM_OC4_SetConfig+0xbc>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	031b      	lsls	r3, r3, #12
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <TIM_OC4_SetConfig+0xc0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00b      	beq.n	8005d2c <TIM_OC4_SetConfig+0x78>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <TIM_OC4_SetConfig+0xc4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d007      	beq.n	8005d2c <TIM_OC4_SetConfig+0x78>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a17      	ldr	r2, [pc, #92]	; (8005d7c <TIM_OC4_SetConfig+0xc8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC4_SetConfig+0x78>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a16      	ldr	r2, [pc, #88]	; (8005d80 <TIM_OC4_SetConfig+0xcc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d109      	bne.n	8005d40 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <TIM_OC4_SetConfig+0xd0>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	019b      	lsls	r3, r3, #6
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	b006      	add	sp, #24
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	ffffefff 	.word	0xffffefff
 8005d68:	ffff8fff 	.word	0xffff8fff
 8005d6c:	fffffcff 	.word	0xfffffcff
 8005d70:	ffffdfff 	.word	0xffffdfff
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40014000 	.word	0x40014000
 8005d7c:	40014400 	.word	0x40014400
 8005d80:	40014800 	.word	0x40014800
 8005d84:	ffffbfff 	.word	0xffffbfff

08005d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	4393      	bics	r3, r2
 8005da2:	001a      	movs	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	22f0      	movs	r2, #240	; 0xf0
 8005db2:	4393      	bics	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	220a      	movs	r2, #10
 8005dc4:	4393      	bics	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	46c0      	nop			; (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b006      	add	sp, #24
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	2210      	movs	r2, #16
 8005df6:	4393      	bics	r3, r2
 8005df8:	001a      	movs	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	4a0d      	ldr	r2, [pc, #52]	; (8005e44 <TIM_TI2_ConfigInputStage+0x60>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	031b      	lsls	r3, r3, #12
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	22a0      	movs	r2, #160	; 0xa0
 8005e20:	4393      	bics	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b006      	add	sp, #24
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	ffff0fff 	.word	0xffff0fff

08005e48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2270      	movs	r2, #112	; 0x70
 8005e5c:	4393      	bics	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	2207      	movs	r2, #7
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	609a      	str	r2, [r3, #8]
}
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	b004      	add	sp, #16
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4a09      	ldr	r2, [pc, #36]	; (8005eb8 <TIM_ETR_SetConfig+0x3c>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	021a      	lsls	r2, r3, #8
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	609a      	str	r2, [r3, #8]
}
 8005eb0:	46c0      	nop			; (mov r8, r8)
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b006      	add	sp, #24
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	ffff00ff 	.word	0xffff00ff

08005ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	223c      	movs	r2, #60	; 0x3c
 8005eca:	5c9b      	ldrb	r3, [r3, r2]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e041      	b.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	223c      	movs	r2, #60	; 0x3c
 8005ed8:	2101      	movs	r1, #1
 8005eda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	223d      	movs	r2, #61	; 0x3d
 8005ee0:	2102      	movs	r1, #2
 8005ee2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2270      	movs	r2, #112	; 0x70
 8005ef8:	4393      	bics	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a13      	ldr	r2, [pc, #76]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a11      	ldr	r2, [pc, #68]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d004      	beq.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a10      	ldr	r2, [pc, #64]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d10c      	bne.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2280      	movs	r2, #128	; 0x80
 8005f30:	4393      	bics	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	223d      	movs	r2, #61	; 0x3d
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	223c      	movs	r2, #60	; 0x3c
 8005f52:	2100      	movs	r1, #0
 8005f54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	0018      	movs	r0, r3
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b004      	add	sp, #16
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40012c00 	.word	0x40012c00
 8005f64:	40000400 	.word	0x40000400
 8005f68:	40014000 	.word	0x40014000

08005f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f74:	46c0      	nop			; (mov r8, r8)
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b002      	add	sp, #8
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f84:	46c0      	nop			; (mov r8, r8)
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b002      	add	sp, #8
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e044      	b.n	8006028 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d107      	bne.n	8005fb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2270      	movs	r2, #112	; 0x70
 8005faa:	2100      	movs	r1, #0
 8005fac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f7fd fe7f 	bl	8003cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2224      	movs	r2, #36	; 0x24
 8005fba:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	438a      	bics	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f000 fabc 	bl	800654c <UART_SetConfig>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e024      	b.n	8006028 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f000 fc35 	bl	8006858 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	490d      	ldr	r1, [pc, #52]	; (8006030 <HAL_UART_Init+0xa4>)
 8005ffa:	400a      	ands	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2108      	movs	r1, #8
 800600a:	438a      	bics	r2, r1
 800600c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2101      	movs	r1, #1
 800601a:	430a      	orrs	r2, r1
 800601c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	0018      	movs	r0, r3
 8006022:	f000 fccd 	bl	80069c0 <UART_CheckIdleState>
 8006026:	0003      	movs	r3, r0
}
 8006028:	0018      	movs	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	b002      	add	sp, #8
 800602e:	bd80      	pop	{r7, pc}
 8006030:	fffff7ff 	.word	0xfffff7ff

08006034 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	; 0x28
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	1dbb      	adds	r3, r7, #6
 8006042:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006048:	2b20      	cmp	r3, #32
 800604a:	d000      	beq.n	800604e <HAL_UART_Transmit+0x1a>
 800604c:	e095      	b.n	800617a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_UART_Transmit+0x28>
 8006054:	1dbb      	adds	r3, r7, #6
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e08d      	b.n	800617c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	015b      	lsls	r3, r3, #5
 8006068:	429a      	cmp	r2, r3
 800606a:	d109      	bne.n	8006080 <HAL_UART_Transmit+0x4c>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d105      	bne.n	8006080 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2201      	movs	r2, #1
 8006078:	4013      	ands	r3, r2
 800607a:	d001      	beq.n	8006080 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e07d      	b.n	800617c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2270      	movs	r2, #112	; 0x70
 8006084:	5c9b      	ldrb	r3, [r3, r2]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_UART_Transmit+0x5a>
 800608a:	2302      	movs	r3, #2
 800608c:	e076      	b.n	800617c <HAL_UART_Transmit+0x148>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2270      	movs	r2, #112	; 0x70
 8006092:	2101      	movs	r1, #1
 8006094:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2221      	movs	r2, #33	; 0x21
 80060a0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80060a2:	f7fd ff7b 	bl	8003f9c <HAL_GetTick>
 80060a6:	0003      	movs	r3, r0
 80060a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	1dba      	adds	r2, r7, #6
 80060ae:	2150      	movs	r1, #80	; 0x50
 80060b0:	8812      	ldrh	r2, [r2, #0]
 80060b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1dba      	adds	r2, r7, #6
 80060b8:	2152      	movs	r1, #82	; 0x52
 80060ba:	8812      	ldrh	r2, [r2, #0]
 80060bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	015b      	lsls	r3, r3, #5
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d108      	bne.n	80060dc <HAL_UART_Transmit+0xa8>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d104      	bne.n	80060dc <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	e003      	b.n	80060e4 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060e4:	e02d      	b.n	8006142 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	0013      	movs	r3, r2
 80060f0:	2200      	movs	r2, #0
 80060f2:	2180      	movs	r1, #128	; 0x80
 80060f4:	f000 fcaa 	bl	8006a4c <UART_WaitOnFlagUntilTimeout>
 80060f8:	1e03      	subs	r3, r0, #0
 80060fa:	d001      	beq.n	8006100 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e03d      	b.n	800617c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10b      	bne.n	800611e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	881a      	ldrh	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	05d2      	lsls	r2, r2, #23
 8006110:	0dd2      	lsrs	r2, r2, #23
 8006112:	b292      	uxth	r2, r2
 8006114:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	3302      	adds	r3, #2
 800611a:	61bb      	str	r3, [r7, #24]
 800611c:	e008      	b.n	8006130 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	781a      	ldrb	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	b292      	uxth	r2, r2
 8006128:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3301      	adds	r3, #1
 800612e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2252      	movs	r2, #82	; 0x52
 8006134:	5a9b      	ldrh	r3, [r3, r2]
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b299      	uxth	r1, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2252      	movs	r2, #82	; 0x52
 8006140:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2252      	movs	r2, #82	; 0x52
 8006146:	5a9b      	ldrh	r3, [r3, r2]
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1cb      	bne.n	80060e6 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	0013      	movs	r3, r2
 8006158:	2200      	movs	r2, #0
 800615a:	2140      	movs	r1, #64	; 0x40
 800615c:	f000 fc76 	bl	8006a4c <UART_WaitOnFlagUntilTimeout>
 8006160:	1e03      	subs	r3, r0, #0
 8006162:	d001      	beq.n	8006168 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e009      	b.n	800617c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2270      	movs	r2, #112	; 0x70
 8006172:	2100      	movs	r1, #0
 8006174:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	e000      	b.n	800617c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800617a:	2302      	movs	r3, #2
  }
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b008      	add	sp, #32
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	1dbb      	adds	r3, r7, #6
 8006190:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006196:	2b20      	cmp	r3, #32
 8006198:	d000      	beq.n	800619c <HAL_UART_Receive_IT+0x18>
 800619a:	e08b      	b.n	80062b4 <HAL_UART_Receive_IT+0x130>
  {
    if ((pData == NULL) || (Size == 0U))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_UART_Receive_IT+0x26>
 80061a2:	1dbb      	adds	r3, r7, #6
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e083      	b.n	80062b6 <HAL_UART_Receive_IT+0x132>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	2380      	movs	r3, #128	; 0x80
 80061b4:	015b      	lsls	r3, r3, #5
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d109      	bne.n	80061ce <HAL_UART_Receive_IT+0x4a>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d105      	bne.n	80061ce <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2201      	movs	r2, #1
 80061c6:	4013      	ands	r3, r2
 80061c8:	d001      	beq.n	80061ce <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e073      	b.n	80062b6 <HAL_UART_Receive_IT+0x132>
      }
    }

    __HAL_LOCK(huart);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2270      	movs	r2, #112	; 0x70
 80061d2:	5c9b      	ldrb	r3, [r3, r2]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_UART_Receive_IT+0x58>
 80061d8:	2302      	movs	r3, #2
 80061da:	e06c      	b.n	80062b6 <HAL_UART_Receive_IT+0x132>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2270      	movs	r2, #112	; 0x70
 80061e0:	2101      	movs	r1, #1
 80061e2:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	1dba      	adds	r2, r7, #6
 80061ee:	2158      	movs	r1, #88	; 0x58
 80061f0:	8812      	ldrh	r2, [r2, #0]
 80061f2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	1dba      	adds	r2, r7, #6
 80061f8:	215a      	movs	r1, #90	; 0x5a
 80061fa:	8812      	ldrh	r2, [r2, #0]
 80061fc:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	2380      	movs	r3, #128	; 0x80
 800620a:	015b      	lsls	r3, r3, #5
 800620c:	429a      	cmp	r2, r3
 800620e:	d10d      	bne.n	800622c <HAL_UART_Receive_IT+0xa8>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <HAL_UART_Receive_IT+0x9e>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	225c      	movs	r2, #92	; 0x5c
 800621c:	4928      	ldr	r1, [pc, #160]	; (80062c0 <HAL_UART_Receive_IT+0x13c>)
 800621e:	5299      	strh	r1, [r3, r2]
 8006220:	e01a      	b.n	8006258 <HAL_UART_Receive_IT+0xd4>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	225c      	movs	r2, #92	; 0x5c
 8006226:	21ff      	movs	r1, #255	; 0xff
 8006228:	5299      	strh	r1, [r3, r2]
 800622a:	e015      	b.n	8006258 <HAL_UART_Receive_IT+0xd4>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10d      	bne.n	8006250 <HAL_UART_Receive_IT+0xcc>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <HAL_UART_Receive_IT+0xc2>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	225c      	movs	r2, #92	; 0x5c
 8006240:	21ff      	movs	r1, #255	; 0xff
 8006242:	5299      	strh	r1, [r3, r2]
 8006244:	e008      	b.n	8006258 <HAL_UART_Receive_IT+0xd4>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	225c      	movs	r2, #92	; 0x5c
 800624a:	217f      	movs	r1, #127	; 0x7f
 800624c:	5299      	strh	r1, [r3, r2]
 800624e:	e003      	b.n	8006258 <HAL_UART_Receive_IT+0xd4>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	225c      	movs	r2, #92	; 0x5c
 8006254:	2100      	movs	r1, #0
 8006256:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2222      	movs	r2, #34	; 0x22
 8006262:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2101      	movs	r1, #1
 8006270:	430a      	orrs	r2, r1
 8006272:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	015b      	lsls	r3, r3, #5
 800627c:	429a      	cmp	r2, r3
 800627e:	d107      	bne.n	8006290 <HAL_UART_Receive_IT+0x10c>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <HAL_UART_Receive_IT+0x10c>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <HAL_UART_Receive_IT+0x140>)
 800628c:	661a      	str	r2, [r3, #96]	; 0x60
 800628e:	e002      	b.n	8006296 <HAL_UART_Receive_IT+0x112>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a0d      	ldr	r2, [pc, #52]	; (80062c8 <HAL_UART_Receive_IT+0x144>)
 8006294:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2270      	movs	r2, #112	; 0x70
 800629a:	2100      	movs	r1, #0
 800629c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2190      	movs	r1, #144	; 0x90
 80062aa:	0049      	lsls	r1, r1, #1
 80062ac:	430a      	orrs	r2, r1
 80062ae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e000      	b.n	80062b6 <HAL_UART_Receive_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
  }
}
 80062b6:	0018      	movs	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b004      	add	sp, #16
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	000001ff 	.word	0x000001ff
 80062c4:	08006ca9 	.word	0x08006ca9
 80062c8:	08006bed 	.word	0x08006bed

080062cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4a89      	ldr	r2, [pc, #548]	; (8006514 <HAL_UART_IRQHandler+0x248>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d112      	bne.n	8006320 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2220      	movs	r2, #32
 80062fe:	4013      	ands	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2220      	movs	r2, #32
 8006306:	4013      	ands	r3, r2
 8006308:	d00a      	beq.n	8006320 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800630e:	2b00      	cmp	r3, #0
 8006310:	d100      	bne.n	8006314 <HAL_UART_IRQHandler+0x48>
 8006312:	e0f7      	b.n	8006504 <HAL_UART_IRQHandler+0x238>
      {
        huart->RxISR(huart);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	0010      	movs	r0, r2
 800631c:	4798      	blx	r3
      }
      return;
 800631e:	e0f1      	b.n	8006504 <HAL_UART_IRQHandler+0x238>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d100      	bne.n	8006328 <HAL_UART_IRQHandler+0x5c>
 8006326:	e0cd      	b.n	80064c4 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2201      	movs	r2, #1
 800632c:	4013      	ands	r3, r2
 800632e:	d105      	bne.n	800633c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	2390      	movs	r3, #144	; 0x90
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	4013      	ands	r3, r2
 8006338:	d100      	bne.n	800633c <HAL_UART_IRQHandler+0x70>
 800633a:	e0c3      	b.n	80064c4 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2201      	movs	r2, #1
 8006340:	4013      	ands	r3, r2
 8006342:	d00e      	beq.n	8006362 <HAL_UART_IRQHandler+0x96>
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	2380      	movs	r3, #128	; 0x80
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	4013      	ands	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800635a:	2201      	movs	r2, #1
 800635c:	431a      	orrs	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2202      	movs	r2, #2
 8006366:	4013      	ands	r3, r2
 8006368:	d00d      	beq.n	8006386 <HAL_UART_IRQHandler+0xba>
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2201      	movs	r2, #1
 800636e:	4013      	ands	r3, r2
 8006370:	d009      	beq.n	8006386 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2202      	movs	r2, #2
 8006378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800637e:	2204      	movs	r2, #4
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	2204      	movs	r2, #4
 800638a:	4013      	ands	r3, r2
 800638c:	d00d      	beq.n	80063aa <HAL_UART_IRQHandler+0xde>
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2201      	movs	r2, #1
 8006392:	4013      	ands	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2204      	movs	r2, #4
 800639c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063a2:	2202      	movs	r2, #2
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	2208      	movs	r2, #8
 80063ae:	4013      	ands	r3, r2
 80063b0:	d011      	beq.n	80063d6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2220      	movs	r2, #32
 80063b6:	4013      	ands	r3, r2
 80063b8:	d103      	bne.n	80063c2 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2201      	movs	r2, #1
 80063be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063c0:	d009      	beq.n	80063d6 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2208      	movs	r2, #8
 80063c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ce:	2208      	movs	r2, #8
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	2380      	movs	r3, #128	; 0x80
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	4013      	ands	r3, r2
 80063de:	d00f      	beq.n	8006400 <HAL_UART_IRQHandler+0x134>
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	04db      	lsls	r3, r3, #19
 80063e6:	4013      	ands	r3, r2
 80063e8:	d00a      	beq.n	8006400 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2280      	movs	r2, #128	; 0x80
 80063f0:	0112      	lsls	r2, r2, #4
 80063f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f8:	2220      	movs	r2, #32
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d100      	bne.n	800640a <HAL_UART_IRQHandler+0x13e>
 8006408:	e07e      	b.n	8006508 <HAL_UART_IRQHandler+0x23c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2220      	movs	r2, #32
 800640e:	4013      	ands	r3, r2
 8006410:	d00c      	beq.n	800642c <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	2220      	movs	r2, #32
 8006416:	4013      	ands	r3, r2
 8006418:	d008      	beq.n	800642c <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	0010      	movs	r0, r2
 800642a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006430:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2240      	movs	r2, #64	; 0x40
 800643a:	4013      	ands	r3, r2
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	d003      	beq.n	8006448 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2228      	movs	r2, #40	; 0x28
 8006444:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006446:	d033      	beq.n	80064b0 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	0018      	movs	r0, r3
 800644c:	f000 fb7c 	bl	8006b48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2240      	movs	r2, #64	; 0x40
 8006458:	4013      	ands	r3, r2
 800645a:	2b40      	cmp	r3, #64	; 0x40
 800645c:	d123      	bne.n	80064a6 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2140      	movs	r1, #64	; 0x40
 800646a:	438a      	bics	r2, r1
 800646c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d012      	beq.n	800649c <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800647a:	4a27      	ldr	r2, [pc, #156]	; (8006518 <HAL_UART_IRQHandler+0x24c>)
 800647c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006482:	0018      	movs	r0, r3
 8006484:	f7fe f8ca 	bl	800461c <HAL_DMA_Abort_IT>
 8006488:	1e03      	subs	r3, r0, #0
 800648a:	d019      	beq.n	80064c0 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006496:	0018      	movs	r0, r3
 8006498:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649a:	e011      	b.n	80064c0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 f84c 	bl	800653c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a4:	e00c      	b.n	80064c0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 f847 	bl	800653c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ae:	e007      	b.n	80064c0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	0018      	movs	r0, r3
 80064b4:	f000 f842 	bl	800653c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80064be:	e023      	b.n	8006508 <HAL_UART_IRQHandler+0x23c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c0:	46c0      	nop			; (mov r8, r8)
    return;
 80064c2:	e021      	b.n	8006508 <HAL_UART_IRQHandler+0x23c>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	2280      	movs	r2, #128	; 0x80
 80064c8:	4013      	ands	r3, r2
 80064ca:	d00d      	beq.n	80064e8 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	2280      	movs	r2, #128	; 0x80
 80064d0:	4013      	ands	r3, r2
 80064d2:	d009      	beq.n	80064e8 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d017      	beq.n	800650c <HAL_UART_IRQHandler+0x240>
    {
      huart->TxISR(huart);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	0010      	movs	r0, r2
 80064e4:	4798      	blx	r3
    }
    return;
 80064e6:	e011      	b.n	800650c <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2240      	movs	r2, #64	; 0x40
 80064ec:	4013      	ands	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_UART_IRQHandler+0x242>
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2240      	movs	r2, #64	; 0x40
 80064f4:	4013      	ands	r3, r2
 80064f6:	d00a      	beq.n	800650e <HAL_UART_IRQHandler+0x242>
  {
    UART_EndTransmit_IT(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	0018      	movs	r0, r3
 80064fc:	f000 fb5b 	bl	8006bb6 <UART_EndTransmit_IT>
    return;
 8006500:	46c0      	nop			; (mov r8, r8)
 8006502:	e004      	b.n	800650e <HAL_UART_IRQHandler+0x242>
      return;
 8006504:	46c0      	nop			; (mov r8, r8)
 8006506:	e002      	b.n	800650e <HAL_UART_IRQHandler+0x242>
    return;
 8006508:	46c0      	nop			; (mov r8, r8)
 800650a:	e000      	b.n	800650e <HAL_UART_IRQHandler+0x242>
    return;
 800650c:	46c0      	nop			; (mov r8, r8)
  }

}
 800650e:	46bd      	mov	sp, r7
 8006510:	b008      	add	sp, #32
 8006512:	bd80      	pop	{r7, pc}
 8006514:	0000080f 	.word	0x0000080f
 8006518:	08006b89 	.word	0x08006b89

0800651c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006524:	46c0      	nop			; (mov r8, r8)
 8006526:	46bd      	mov	sp, r7
 8006528:	b002      	add	sp, #8
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006534:	46c0      	nop			; (mov r8, r8)
 8006536:	46bd      	mov	sp, r7
 8006538:	b002      	add	sp, #8
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b002      	add	sp, #8
 800654a:	bd80      	pop	{r7, pc}

0800654c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006554:	2300      	movs	r3, #0
 8006556:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006558:	2317      	movs	r3, #23
 800655a:	18fb      	adds	r3, r7, r3
 800655c:	2200      	movs	r2, #0
 800655e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4aad      	ldr	r2, [pc, #692]	; (8006834 <UART_SetConfig+0x2e8>)
 8006580:	4013      	ands	r3, r2
 8006582:	0019      	movs	r1, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	430a      	orrs	r2, r1
 800658c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4aa8      	ldr	r2, [pc, #672]	; (8006838 <UART_SetConfig+0x2ec>)
 8006596:	4013      	ands	r3, r2
 8006598:	0019      	movs	r1, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	4a9f      	ldr	r2, [pc, #636]	; (800683c <UART_SetConfig+0x2f0>)
 80065be:	4013      	ands	r3, r2
 80065c0:	0019      	movs	r1, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a9b      	ldr	r2, [pc, #620]	; (8006840 <UART_SetConfig+0x2f4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d125      	bne.n	8006622 <UART_SetConfig+0xd6>
 80065d6:	4b9b      	ldr	r3, [pc, #620]	; (8006844 <UART_SetConfig+0x2f8>)
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	2203      	movs	r2, #3
 80065dc:	4013      	ands	r3, r2
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d00f      	beq.n	8006602 <UART_SetConfig+0xb6>
 80065e2:	d304      	bcc.n	80065ee <UART_SetConfig+0xa2>
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d011      	beq.n	800660c <UART_SetConfig+0xc0>
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d005      	beq.n	80065f8 <UART_SetConfig+0xac>
 80065ec:	e013      	b.n	8006616 <UART_SetConfig+0xca>
 80065ee:	231f      	movs	r3, #31
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	2200      	movs	r2, #0
 80065f4:	701a      	strb	r2, [r3, #0]
 80065f6:	e022      	b.n	800663e <UART_SetConfig+0xf2>
 80065f8:	231f      	movs	r3, #31
 80065fa:	18fb      	adds	r3, r7, r3
 80065fc:	2202      	movs	r2, #2
 80065fe:	701a      	strb	r2, [r3, #0]
 8006600:	e01d      	b.n	800663e <UART_SetConfig+0xf2>
 8006602:	231f      	movs	r3, #31
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	2204      	movs	r2, #4
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	e018      	b.n	800663e <UART_SetConfig+0xf2>
 800660c:	231f      	movs	r3, #31
 800660e:	18fb      	adds	r3, r7, r3
 8006610:	2208      	movs	r2, #8
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	e013      	b.n	800663e <UART_SetConfig+0xf2>
 8006616:	231f      	movs	r3, #31
 8006618:	18fb      	adds	r3, r7, r3
 800661a:	2210      	movs	r2, #16
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	e00d      	b.n	800663e <UART_SetConfig+0xf2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a88      	ldr	r2, [pc, #544]	; (8006848 <UART_SetConfig+0x2fc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d104      	bne.n	8006636 <UART_SetConfig+0xea>
 800662c:	231f      	movs	r3, #31
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	2200      	movs	r2, #0
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	e003      	b.n	800663e <UART_SetConfig+0xf2>
 8006636:	231f      	movs	r3, #31
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	2210      	movs	r2, #16
 800663c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69da      	ldr	r2, [r3, #28]
 8006642:	2380      	movs	r3, #128	; 0x80
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	429a      	cmp	r2, r3
 8006648:	d000      	beq.n	800664c <UART_SetConfig+0x100>
 800664a:	e07d      	b.n	8006748 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 800664c:	231f      	movs	r3, #31
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b02      	cmp	r3, #2
 8006654:	d01c      	beq.n	8006690 <UART_SetConfig+0x144>
 8006656:	dc02      	bgt.n	800665e <UART_SetConfig+0x112>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <UART_SetConfig+0x11c>
 800665c:	e04b      	b.n	80066f6 <UART_SetConfig+0x1aa>
 800665e:	2b04      	cmp	r3, #4
 8006660:	d025      	beq.n	80066ae <UART_SetConfig+0x162>
 8006662:	2b08      	cmp	r3, #8
 8006664:	d037      	beq.n	80066d6 <UART_SetConfig+0x18a>
 8006666:	e046      	b.n	80066f6 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006668:	f7fe fe20 	bl	80052ac <HAL_RCC_GetPCLK1Freq>
 800666c:	0003      	movs	r3, r0
 800666e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	005a      	lsls	r2, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	085b      	lsrs	r3, r3, #1
 800667a:	18d2      	adds	r2, r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	0019      	movs	r1, r3
 8006682:	0010      	movs	r0, r2
 8006684:	f7f9 fd40 	bl	8000108 <__udivsi3>
 8006688:	0003      	movs	r3, r0
 800668a:	b29b      	uxth	r3, r3
 800668c:	61bb      	str	r3, [r7, #24]
        break;
 800668e:	e037      	b.n	8006700 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	085b      	lsrs	r3, r3, #1
 8006696:	4a6d      	ldr	r2, [pc, #436]	; (800684c <UART_SetConfig+0x300>)
 8006698:	189a      	adds	r2, r3, r2
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	0019      	movs	r1, r3
 80066a0:	0010      	movs	r0, r2
 80066a2:	f7f9 fd31 	bl	8000108 <__udivsi3>
 80066a6:	0003      	movs	r3, r0
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	61bb      	str	r3, [r7, #24]
        break;
 80066ac:	e028      	b.n	8006700 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ae:	f7fe fd8f 	bl	80051d0 <HAL_RCC_GetSysClockFreq>
 80066b2:	0003      	movs	r3, r0
 80066b4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	005a      	lsls	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	085b      	lsrs	r3, r3, #1
 80066c0:	18d2      	adds	r2, r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	0019      	movs	r1, r3
 80066c8:	0010      	movs	r0, r2
 80066ca:	f7f9 fd1d 	bl	8000108 <__udivsi3>
 80066ce:	0003      	movs	r3, r0
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	61bb      	str	r3, [r7, #24]
        break;
 80066d4:	e014      	b.n	8006700 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	2280      	movs	r2, #128	; 0x80
 80066de:	0252      	lsls	r2, r2, #9
 80066e0:	189a      	adds	r2, r3, r2
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	0019      	movs	r1, r3
 80066e8:	0010      	movs	r0, r2
 80066ea:	f7f9 fd0d 	bl	8000108 <__udivsi3>
 80066ee:	0003      	movs	r3, r0
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	61bb      	str	r3, [r7, #24]
        break;
 80066f4:	e004      	b.n	8006700 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80066f6:	2317      	movs	r3, #23
 80066f8:	18fb      	adds	r3, r7, r3
 80066fa:	2201      	movs	r2, #1
 80066fc:	701a      	strb	r2, [r3, #0]
        break;
 80066fe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b0f      	cmp	r3, #15
 8006704:	d91b      	bls.n	800673e <UART_SetConfig+0x1f2>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	4a51      	ldr	r2, [pc, #324]	; (8006850 <UART_SetConfig+0x304>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d817      	bhi.n	800673e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	b29a      	uxth	r2, r3
 8006712:	200a      	movs	r0, #10
 8006714:	183b      	adds	r3, r7, r0
 8006716:	210f      	movs	r1, #15
 8006718:	438a      	bics	r2, r1
 800671a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	b29b      	uxth	r3, r3
 8006722:	2207      	movs	r2, #7
 8006724:	4013      	ands	r3, r2
 8006726:	b299      	uxth	r1, r3
 8006728:	183b      	adds	r3, r7, r0
 800672a:	183a      	adds	r2, r7, r0
 800672c:	8812      	ldrh	r2, [r2, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	183a      	adds	r2, r7, r0
 8006738:	8812      	ldrh	r2, [r2, #0]
 800673a:	60da      	str	r2, [r3, #12]
 800673c:	e06c      	b.n	8006818 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800673e:	2317      	movs	r3, #23
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	2201      	movs	r2, #1
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	e067      	b.n	8006818 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8006748:	231f      	movs	r3, #31
 800674a:	18fb      	adds	r3, r7, r3
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d01b      	beq.n	800678a <UART_SetConfig+0x23e>
 8006752:	dc02      	bgt.n	800675a <UART_SetConfig+0x20e>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d005      	beq.n	8006764 <UART_SetConfig+0x218>
 8006758:	e049      	b.n	80067ee <UART_SetConfig+0x2a2>
 800675a:	2b04      	cmp	r3, #4
 800675c:	d024      	beq.n	80067a8 <UART_SetConfig+0x25c>
 800675e:	2b08      	cmp	r3, #8
 8006760:	d035      	beq.n	80067ce <UART_SetConfig+0x282>
 8006762:	e044      	b.n	80067ee <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006764:	f7fe fda2 	bl	80052ac <HAL_RCC_GetPCLK1Freq>
 8006768:	0003      	movs	r3, r0
 800676a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	085a      	lsrs	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	18d2      	adds	r2, r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	0019      	movs	r1, r3
 800677c:	0010      	movs	r0, r2
 800677e:	f7f9 fcc3 	bl	8000108 <__udivsi3>
 8006782:	0003      	movs	r3, r0
 8006784:	b29b      	uxth	r3, r3
 8006786:	61bb      	str	r3, [r7, #24]
        break;
 8006788:	e036      	b.n	80067f8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	4a30      	ldr	r2, [pc, #192]	; (8006854 <UART_SetConfig+0x308>)
 8006792:	189a      	adds	r2, r3, r2
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	0019      	movs	r1, r3
 800679a:	0010      	movs	r0, r2
 800679c:	f7f9 fcb4 	bl	8000108 <__udivsi3>
 80067a0:	0003      	movs	r3, r0
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	61bb      	str	r3, [r7, #24]
        break;
 80067a6:	e027      	b.n	80067f8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067a8:	f7fe fd12 	bl	80051d0 <HAL_RCC_GetSysClockFreq>
 80067ac:	0003      	movs	r3, r0
 80067ae:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	085a      	lsrs	r2, r3, #1
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	18d2      	adds	r2, r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	0019      	movs	r1, r3
 80067c0:	0010      	movs	r0, r2
 80067c2:	f7f9 fca1 	bl	8000108 <__udivsi3>
 80067c6:	0003      	movs	r3, r0
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	61bb      	str	r3, [r7, #24]
        break;
 80067cc:	e014      	b.n	80067f8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	2280      	movs	r2, #128	; 0x80
 80067d6:	0212      	lsls	r2, r2, #8
 80067d8:	189a      	adds	r2, r3, r2
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	0019      	movs	r1, r3
 80067e0:	0010      	movs	r0, r2
 80067e2:	f7f9 fc91 	bl	8000108 <__udivsi3>
 80067e6:	0003      	movs	r3, r0
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	61bb      	str	r3, [r7, #24]
        break;
 80067ec:	e004      	b.n	80067f8 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80067ee:	2317      	movs	r3, #23
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	2201      	movs	r2, #1
 80067f4:	701a      	strb	r2, [r3, #0]
        break;
 80067f6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2b0f      	cmp	r3, #15
 80067fc:	d908      	bls.n	8006810 <UART_SetConfig+0x2c4>
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	4a13      	ldr	r2, [pc, #76]	; (8006850 <UART_SetConfig+0x304>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d804      	bhi.n	8006810 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	e003      	b.n	8006818 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006810:	2317      	movs	r3, #23
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	2201      	movs	r2, #1
 8006816:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006824:	2317      	movs	r3, #23
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	781b      	ldrb	r3, [r3, #0]
}
 800682a:	0018      	movs	r0, r3
 800682c:	46bd      	mov	sp, r7
 800682e:	b008      	add	sp, #32
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	ffff69f3 	.word	0xffff69f3
 8006838:	ffffcfff 	.word	0xffffcfff
 800683c:	fffff4ff 	.word	0xfffff4ff
 8006840:	40013800 	.word	0x40013800
 8006844:	40021000 	.word	0x40021000
 8006848:	40004400 	.word	0x40004400
 800684c:	00f42400 	.word	0x00f42400
 8006850:	0000ffff 	.word	0x0000ffff
 8006854:	007a1200 	.word	0x007a1200

08006858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	2201      	movs	r2, #1
 8006866:	4013      	ands	r3, r2
 8006868:	d00b      	beq.n	8006882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	4a4a      	ldr	r2, [pc, #296]	; (800699c <UART_AdvFeatureConfig+0x144>)
 8006872:	4013      	ands	r3, r2
 8006874:	0019      	movs	r1, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	2202      	movs	r2, #2
 8006888:	4013      	ands	r3, r2
 800688a:	d00b      	beq.n	80068a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4a43      	ldr	r2, [pc, #268]	; (80069a0 <UART_AdvFeatureConfig+0x148>)
 8006894:	4013      	ands	r3, r2
 8006896:	0019      	movs	r1, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	2204      	movs	r2, #4
 80068aa:	4013      	ands	r3, r2
 80068ac:	d00b      	beq.n	80068c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	4a3b      	ldr	r2, [pc, #236]	; (80069a4 <UART_AdvFeatureConfig+0x14c>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	0019      	movs	r1, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	2208      	movs	r2, #8
 80068cc:	4013      	ands	r3, r2
 80068ce:	d00b      	beq.n	80068e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	4a34      	ldr	r2, [pc, #208]	; (80069a8 <UART_AdvFeatureConfig+0x150>)
 80068d8:	4013      	ands	r3, r2
 80068da:	0019      	movs	r1, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	2210      	movs	r2, #16
 80068ee:	4013      	ands	r3, r2
 80068f0:	d00b      	beq.n	800690a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	4a2c      	ldr	r2, [pc, #176]	; (80069ac <UART_AdvFeatureConfig+0x154>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	0019      	movs	r1, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	2220      	movs	r2, #32
 8006910:	4013      	ands	r3, r2
 8006912:	d00b      	beq.n	800692c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	4a25      	ldr	r2, [pc, #148]	; (80069b0 <UART_AdvFeatureConfig+0x158>)
 800691c:	4013      	ands	r3, r2
 800691e:	0019      	movs	r1, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	2240      	movs	r2, #64	; 0x40
 8006932:	4013      	ands	r3, r2
 8006934:	d01d      	beq.n	8006972 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <UART_AdvFeatureConfig+0x15c>)
 800693e:	4013      	ands	r3, r2
 8006940:	0019      	movs	r1, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006952:	2380      	movs	r3, #128	; 0x80
 8006954:	035b      	lsls	r3, r3, #13
 8006956:	429a      	cmp	r2, r3
 8006958:	d10b      	bne.n	8006972 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <UART_AdvFeatureConfig+0x160>)
 8006962:	4013      	ands	r3, r2
 8006964:	0019      	movs	r1, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	2280      	movs	r2, #128	; 0x80
 8006978:	4013      	ands	r3, r2
 800697a:	d00b      	beq.n	8006994 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	4a0e      	ldr	r2, [pc, #56]	; (80069bc <UART_AdvFeatureConfig+0x164>)
 8006984:	4013      	ands	r3, r2
 8006986:	0019      	movs	r1, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	605a      	str	r2, [r3, #4]
  }
}
 8006994:	46c0      	nop			; (mov r8, r8)
 8006996:	46bd      	mov	sp, r7
 8006998:	b002      	add	sp, #8
 800699a:	bd80      	pop	{r7, pc}
 800699c:	fffdffff 	.word	0xfffdffff
 80069a0:	fffeffff 	.word	0xfffeffff
 80069a4:	fffbffff 	.word	0xfffbffff
 80069a8:	ffff7fff 	.word	0xffff7fff
 80069ac:	ffffefff 	.word	0xffffefff
 80069b0:	ffffdfff 	.word	0xffffdfff
 80069b4:	ffefffff 	.word	0xffefffff
 80069b8:	ff9fffff 	.word	0xff9fffff
 80069bc:	fff7ffff 	.word	0xfff7ffff

080069c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80069ce:	f7fd fae5 	bl	8003f9c <HAL_GetTick>
 80069d2:	0003      	movs	r3, r0
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2208      	movs	r2, #8
 80069de:	4013      	ands	r3, r2
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d10d      	bne.n	8006a00 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	2380      	movs	r3, #128	; 0x80
 80069e8:	0399      	lsls	r1, r3, #14
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <UART_CheckIdleState+0x88>)
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	0013      	movs	r3, r2
 80069f2:	2200      	movs	r2, #0
 80069f4:	f000 f82a 	bl	8006a4c <UART_WaitOnFlagUntilTimeout>
 80069f8:	1e03      	subs	r3, r0, #0
 80069fa:	d001      	beq.n	8006a00 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e01f      	b.n	8006a40 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2204      	movs	r2, #4
 8006a08:	4013      	ands	r3, r2
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d10d      	bne.n	8006a2a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	2380      	movs	r3, #128	; 0x80
 8006a12:	03d9      	lsls	r1, r3, #15
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <UART_CheckIdleState+0x88>)
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	0013      	movs	r3, r2
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f000 f815 	bl	8006a4c <UART_WaitOnFlagUntilTimeout>
 8006a22:	1e03      	subs	r3, r0, #0
 8006a24:	d001      	beq.n	8006a2a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e00a      	b.n	8006a40 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2220      	movs	r2, #32
 8006a34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2270      	movs	r2, #112	; 0x70
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	0018      	movs	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b004      	add	sp, #16
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	01ffffff 	.word	0x01ffffff

08006a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	1dfb      	adds	r3, r7, #7
 8006a5a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5c:	e05d      	b.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	3301      	adds	r3, #1
 8006a62:	d05a      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a64:	f7fd fa9a 	bl	8003f9c <HAL_GetTick>
 8006a68:	0002      	movs	r2, r0
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d302      	bcc.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d11b      	bne.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	492f      	ldr	r1, [pc, #188]	; (8006b44 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006a86:	400a      	ands	r2, r1
 8006a88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2101      	movs	r1, #1
 8006a96:	438a      	bics	r2, r1
 8006a98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2270      	movs	r2, #112	; 0x70
 8006aaa:	2100      	movs	r1, #0
 8006aac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e043      	b.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2204      	movs	r2, #4
 8006aba:	4013      	ands	r3, r2
 8006abc:	d02d      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69da      	ldr	r2, [r3, #28]
 8006ac4:	2380      	movs	r3, #128	; 0x80
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	401a      	ands	r2, r3
 8006aca:	2380      	movs	r3, #128	; 0x80
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d123      	bne.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2280      	movs	r2, #128	; 0x80
 8006ad8:	0112      	lsls	r2, r2, #4
 8006ada:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4917      	ldr	r1, [pc, #92]	; (8006b44 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006ae8:	400a      	ands	r2, r1
 8006aea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2101      	movs	r1, #1
 8006af8:	438a      	bics	r2, r1
 8006afa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2220      	movs	r2, #32
 8006b06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2270      	movs	r2, #112	; 0x70
 8006b12:	2100      	movs	r1, #0
 8006b14:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e00f      	b.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	4013      	ands	r3, r2
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	425a      	negs	r2, r3
 8006b2a:	4153      	adcs	r3, r2
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	001a      	movs	r2, r3
 8006b30:	1dfb      	adds	r3, r7, #7
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d092      	beq.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	b004      	add	sp, #16
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	46c0      	nop			; (mov r8, r8)
 8006b44:	fffffe5f 	.word	0xfffffe5f

08006b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	490a      	ldr	r1, [pc, #40]	; (8006b84 <UART_EndRxTransfer+0x3c>)
 8006b5c:	400a      	ands	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	438a      	bics	r2, r1
 8006b6e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006b7c:	46c0      	nop			; (mov r8, r8)
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b002      	add	sp, #8
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	fffffedf 	.word	0xfffffedf

08006b88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	225a      	movs	r2, #90	; 0x5a
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2252      	movs	r2, #82	; 0x52
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f7ff fcc7 	bl	800653c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	b004      	add	sp, #16
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2140      	movs	r1, #64	; 0x40
 8006bca:	438a      	bics	r2, r1
 8006bcc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f7ff fc9d 	bl	800651c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b002      	add	sp, #8
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bf4:	230e      	movs	r3, #14
 8006bf6:	18fb      	adds	r3, r7, r3
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	215c      	movs	r1, #92	; 0x5c
 8006bfc:	5a52      	ldrh	r2, [r2, r1]
 8006bfe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c04:	2b22      	cmp	r3, #34	; 0x22
 8006c06:	d140      	bne.n	8006c8a <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	210c      	movs	r1, #12
 8006c0e:	187b      	adds	r3, r7, r1
 8006c10:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006c12:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c14:	187b      	adds	r3, r7, r1
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	230e      	movs	r3, #14
 8006c1c:	18fb      	adds	r3, r7, r3
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b2d9      	uxtb	r1, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c26:	400a      	ands	r2, r1
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	225a      	movs	r2, #90	; 0x5a
 8006c3a:	5a9b      	ldrh	r3, [r3, r2]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b299      	uxth	r1, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	225a      	movs	r2, #90	; 0x5a
 8006c46:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	225a      	movs	r2, #90	; 0x5a
 8006c4c:	5a9b      	ldrh	r3, [r3, r2]
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d122      	bne.n	8006c9a <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4911      	ldr	r1, [pc, #68]	; (8006ca4 <UART_RxISR_8BIT+0xb8>)
 8006c60:	400a      	ands	r2, r1
 8006c62:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2101      	movs	r1, #1
 8006c70:	438a      	bics	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	0018      	movs	r0, r3
 8006c84:	f7ff fc52 	bl	800652c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c88:	e007      	b.n	8006c9a <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	699a      	ldr	r2, [r3, #24]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2108      	movs	r1, #8
 8006c96:	430a      	orrs	r2, r1
 8006c98:	619a      	str	r2, [r3, #24]
}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	b004      	add	sp, #16
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	fffffedf 	.word	0xfffffedf

08006ca8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006cb0:	230e      	movs	r3, #14
 8006cb2:	18fb      	adds	r3, r7, r3
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	215c      	movs	r1, #92	; 0x5c
 8006cb8:	5a52      	ldrh	r2, [r2, r1]
 8006cba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cc0:	2b22      	cmp	r3, #34	; 0x22
 8006cc2:	d140      	bne.n	8006d46 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	210c      	movs	r1, #12
 8006cca:	187b      	adds	r3, r7, r1
 8006ccc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006cce:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cd6:	187b      	adds	r3, r7, r1
 8006cd8:	220e      	movs	r2, #14
 8006cda:	18ba      	adds	r2, r7, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	8812      	ldrh	r2, [r2, #0]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cec:	1c9a      	adds	r2, r3, #2
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	225a      	movs	r2, #90	; 0x5a
 8006cf6:	5a9b      	ldrh	r3, [r3, r2]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b299      	uxth	r1, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	225a      	movs	r2, #90	; 0x5a
 8006d02:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	225a      	movs	r2, #90	; 0x5a
 8006d08:	5a9b      	ldrh	r3, [r3, r2]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d122      	bne.n	8006d56 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4911      	ldr	r1, [pc, #68]	; (8006d60 <UART_RxISR_16BIT+0xb8>)
 8006d1c:	400a      	ands	r2, r1
 8006d1e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	438a      	bics	r2, r1
 8006d2e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f7ff fbf4 	bl	800652c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d44:	e007      	b.n	8006d56 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699a      	ldr	r2, [r3, #24]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2108      	movs	r1, #8
 8006d52:	430a      	orrs	r2, r1
 8006d54:	619a      	str	r2, [r3, #24]
}
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	b004      	add	sp, #16
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	fffffedf 	.word	0xfffffedf

08006d64 <__libc_init_array>:
 8006d64:	b570      	push	{r4, r5, r6, lr}
 8006d66:	2600      	movs	r6, #0
 8006d68:	4d0c      	ldr	r5, [pc, #48]	; (8006d9c <__libc_init_array+0x38>)
 8006d6a:	4c0d      	ldr	r4, [pc, #52]	; (8006da0 <__libc_init_array+0x3c>)
 8006d6c:	1b64      	subs	r4, r4, r5
 8006d6e:	10a4      	asrs	r4, r4, #2
 8006d70:	42a6      	cmp	r6, r4
 8006d72:	d109      	bne.n	8006d88 <__libc_init_array+0x24>
 8006d74:	2600      	movs	r6, #0
 8006d76:	f000 f821 	bl	8006dbc <_init>
 8006d7a:	4d0a      	ldr	r5, [pc, #40]	; (8006da4 <__libc_init_array+0x40>)
 8006d7c:	4c0a      	ldr	r4, [pc, #40]	; (8006da8 <__libc_init_array+0x44>)
 8006d7e:	1b64      	subs	r4, r4, r5
 8006d80:	10a4      	asrs	r4, r4, #2
 8006d82:	42a6      	cmp	r6, r4
 8006d84:	d105      	bne.n	8006d92 <__libc_init_array+0x2e>
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	00b3      	lsls	r3, r6, #2
 8006d8a:	58eb      	ldr	r3, [r5, r3]
 8006d8c:	4798      	blx	r3
 8006d8e:	3601      	adds	r6, #1
 8006d90:	e7ee      	b.n	8006d70 <__libc_init_array+0xc>
 8006d92:	00b3      	lsls	r3, r6, #2
 8006d94:	58eb      	ldr	r3, [r5, r3]
 8006d96:	4798      	blx	r3
 8006d98:	3601      	adds	r6, #1
 8006d9a:	e7f2      	b.n	8006d82 <__libc_init_array+0x1e>
 8006d9c:	08006ee0 	.word	0x08006ee0
 8006da0:	08006ee0 	.word	0x08006ee0
 8006da4:	08006ee0 	.word	0x08006ee0
 8006da8:	08006ee4 	.word	0x08006ee4

08006dac <memset>:
 8006dac:	0003      	movs	r3, r0
 8006dae:	1812      	adds	r2, r2, r0
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d100      	bne.n	8006db6 <memset+0xa>
 8006db4:	4770      	bx	lr
 8006db6:	7019      	strb	r1, [r3, #0]
 8006db8:	3301      	adds	r3, #1
 8006dba:	e7f9      	b.n	8006db0 <memset+0x4>

08006dbc <_init>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	46c0      	nop			; (mov r8, r8)
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr

08006dc8 <_fini>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr
